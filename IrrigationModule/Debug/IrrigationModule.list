
IrrigationModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000030  08004134  08004134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000d8  08004164  08004164  00014164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08004240  08004240  00014240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000100  20000000  08004244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
  9 .bss          00000f20  20000100  20000100  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001020  20001020  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024e39  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048c4  00000000  00000000  00044f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d016  00000000  00000000  0004982d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001158  00000000  00000000  00056848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001640  00000000  00000000  000579a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ab56  00000000  00000000  00058fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000686e  00000000  00000000  00063b36  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  0006a3a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032c0  00000000  00000000  0006a420  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000076  00000000  00000000  0006d6e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004080 	.word	0x08004080

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	08004080 	.word	0x08004080

080001d0 <selfrel_offset31>:
 80001d0:	6803      	ldr	r3, [r0, #0]
 80001d2:	005a      	lsls	r2, r3, #1
 80001d4:	bf4c      	ite	mi
 80001d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80001da:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80001de:	4418      	add	r0, r3
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop

080001e4 <search_EIT_table>:
 80001e4:	b361      	cbz	r1, 8000240 <search_EIT_table+0x5c>
 80001e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001ea:	f101 3aff 	add.w	sl, r1, #4294967295
 80001ee:	4690      	mov	r8, r2
 80001f0:	4606      	mov	r6, r0
 80001f2:	46d1      	mov	r9, sl
 80001f4:	2700      	movs	r7, #0
 80001f6:	eb07 0409 	add.w	r4, r7, r9
 80001fa:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80001fe:	1064      	asrs	r4, r4, #1
 8000200:	00e5      	lsls	r5, r4, #3
 8000202:	1971      	adds	r1, r6, r5
 8000204:	4608      	mov	r0, r1
 8000206:	f7ff ffe3 	bl	80001d0 <selfrel_offset31>
 800020a:	45a2      	cmp	sl, r4
 800020c:	4683      	mov	fp, r0
 800020e:	f105 0008 	add.w	r0, r5, #8
 8000212:	4430      	add	r0, r6
 8000214:	d009      	beq.n	800022a <search_EIT_table+0x46>
 8000216:	f7ff ffdb 	bl	80001d0 <selfrel_offset31>
 800021a:	45c3      	cmp	fp, r8
 800021c:	f100 30ff 	add.w	r0, r0, #4294967295
 8000220:	d805      	bhi.n	800022e <search_EIT_table+0x4a>
 8000222:	4540      	cmp	r0, r8
 8000224:	d209      	bcs.n	800023a <search_EIT_table+0x56>
 8000226:	1c67      	adds	r7, r4, #1
 8000228:	e7e5      	b.n	80001f6 <search_EIT_table+0x12>
 800022a:	45c3      	cmp	fp, r8
 800022c:	d905      	bls.n	800023a <search_EIT_table+0x56>
 800022e:	42a7      	cmp	r7, r4
 8000230:	d002      	beq.n	8000238 <search_EIT_table+0x54>
 8000232:	f104 39ff 	add.w	r9, r4, #4294967295
 8000236:	e7de      	b.n	80001f6 <search_EIT_table+0x12>
 8000238:	2100      	movs	r1, #0
 800023a:	4608      	mov	r0, r1
 800023c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000240:	4608      	mov	r0, r1
 8000242:	4770      	bx	lr

08000244 <__gnu_unwind_get_pr_addr>:
 8000244:	2801      	cmp	r0, #1
 8000246:	d007      	beq.n	8000258 <__gnu_unwind_get_pr_addr+0x14>
 8000248:	2802      	cmp	r0, #2
 800024a:	d007      	beq.n	800025c <__gnu_unwind_get_pr_addr+0x18>
 800024c:	4b04      	ldr	r3, [pc, #16]	; (8000260 <__gnu_unwind_get_pr_addr+0x1c>)
 800024e:	2800      	cmp	r0, #0
 8000250:	bf0c      	ite	eq
 8000252:	4618      	moveq	r0, r3
 8000254:	2000      	movne	r0, #0
 8000256:	4770      	bx	lr
 8000258:	4802      	ldr	r0, [pc, #8]	; (8000264 <__gnu_unwind_get_pr_addr+0x20>)
 800025a:	4770      	bx	lr
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__gnu_unwind_get_pr_addr+0x24>)
 800025e:	4770      	bx	lr
 8000260:	08000949 	.word	0x08000949
 8000264:	0800094d 	.word	0x0800094d
 8000268:	08000951 	.word	0x08000951

0800026c <get_eit_entry>:
 800026c:	b530      	push	{r4, r5, lr}
 800026e:	4b24      	ldr	r3, [pc, #144]	; (8000300 <get_eit_entry+0x94>)
 8000270:	b083      	sub	sp, #12
 8000272:	4604      	mov	r4, r0
 8000274:	1e8d      	subs	r5, r1, #2
 8000276:	b37b      	cbz	r3, 80002d8 <get_eit_entry+0x6c>
 8000278:	a901      	add	r1, sp, #4
 800027a:	4628      	mov	r0, r5
 800027c:	f3af 8000 	nop.w
 8000280:	b320      	cbz	r0, 80002cc <get_eit_entry+0x60>
 8000282:	9901      	ldr	r1, [sp, #4]
 8000284:	462a      	mov	r2, r5
 8000286:	f7ff ffad 	bl	80001e4 <search_EIT_table>
 800028a:	4601      	mov	r1, r0
 800028c:	b1f0      	cbz	r0, 80002cc <get_eit_entry+0x60>
 800028e:	f7ff ff9f 	bl	80001d0 <selfrel_offset31>
 8000292:	684b      	ldr	r3, [r1, #4]
 8000294:	64a0      	str	r0, [r4, #72]	; 0x48
 8000296:	2b01      	cmp	r3, #1
 8000298:	d012      	beq.n	80002c0 <get_eit_entry+0x54>
 800029a:	2b00      	cmp	r3, #0
 800029c:	f101 0004 	add.w	r0, r1, #4
 80002a0:	db20      	blt.n	80002e4 <get_eit_entry+0x78>
 80002a2:	f7ff ff95 	bl	80001d0 <selfrel_offset31>
 80002a6:	2300      	movs	r3, #0
 80002a8:	64e0      	str	r0, [r4, #76]	; 0x4c
 80002aa:	6523      	str	r3, [r4, #80]	; 0x50
 80002ac:	6803      	ldr	r3, [r0, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1c      	blt.n	80002ec <get_eit_entry+0x80>
 80002b2:	f7ff ff8d 	bl	80001d0 <selfrel_offset31>
 80002b6:	2300      	movs	r3, #0
 80002b8:	6120      	str	r0, [r4, #16]
 80002ba:	4618      	mov	r0, r3
 80002bc:	b003      	add	sp, #12
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	2300      	movs	r3, #0
 80002c2:	6123      	str	r3, [r4, #16]
 80002c4:	2305      	movs	r3, #5
 80002c6:	4618      	mov	r0, r3
 80002c8:	b003      	add	sp, #12
 80002ca:	bd30      	pop	{r4, r5, pc}
 80002cc:	2300      	movs	r3, #0
 80002ce:	6123      	str	r3, [r4, #16]
 80002d0:	2309      	movs	r3, #9
 80002d2:	4618      	mov	r0, r3
 80002d4:	b003      	add	sp, #12
 80002d6:	bd30      	pop	{r4, r5, pc}
 80002d8:	490a      	ldr	r1, [pc, #40]	; (8000304 <get_eit_entry+0x98>)
 80002da:	480b      	ldr	r0, [pc, #44]	; (8000308 <get_eit_entry+0x9c>)
 80002dc:	1a09      	subs	r1, r1, r0
 80002de:	10c9      	asrs	r1, r1, #3
 80002e0:	9101      	str	r1, [sp, #4]
 80002e2:	e7cf      	b.n	8000284 <get_eit_entry+0x18>
 80002e4:	2301      	movs	r3, #1
 80002e6:	64e0      	str	r0, [r4, #76]	; 0x4c
 80002e8:	6523      	str	r3, [r4, #80]	; 0x50
 80002ea:	e7df      	b.n	80002ac <get_eit_entry+0x40>
 80002ec:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80002f0:	f7ff ffa8 	bl	8000244 <__gnu_unwind_get_pr_addr>
 80002f4:	2800      	cmp	r0, #0
 80002f6:	6120      	str	r0, [r4, #16]
 80002f8:	bf14      	ite	ne
 80002fa:	2300      	movne	r3, #0
 80002fc:	2309      	moveq	r3, #9
 80002fe:	e7dc      	b.n	80002ba <get_eit_entry+0x4e>
 8000300:	00000000 	.word	0x00000000
 8000304:	0800423c 	.word	0x0800423c
 8000308:	08004164 	.word	0x08004164

0800030c <restore_non_core_regs>:
 800030c:	6803      	ldr	r3, [r0, #0]
 800030e:	07da      	lsls	r2, r3, #31
 8000310:	b510      	push	{r4, lr}
 8000312:	4604      	mov	r4, r0
 8000314:	d406      	bmi.n	8000324 <restore_non_core_regs+0x18>
 8000316:	079b      	lsls	r3, r3, #30
 8000318:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800031c:	d509      	bpl.n	8000332 <restore_non_core_regs+0x26>
 800031e:	f000 fc51 	bl	8000bc4 <__gnu_Unwind_Restore_VFP_D>
 8000322:	6823      	ldr	r3, [r4, #0]
 8000324:	0759      	lsls	r1, r3, #29
 8000326:	d509      	bpl.n	800033c <restore_non_core_regs+0x30>
 8000328:	071a      	lsls	r2, r3, #28
 800032a:	d50e      	bpl.n	800034a <restore_non_core_regs+0x3e>
 800032c:	06db      	lsls	r3, r3, #27
 800032e:	d513      	bpl.n	8000358 <restore_non_core_regs+0x4c>
 8000330:	bd10      	pop	{r4, pc}
 8000332:	f000 fc3f 	bl	8000bb4 <__gnu_Unwind_Restore_VFP>
 8000336:	6823      	ldr	r3, [r4, #0]
 8000338:	0759      	lsls	r1, r3, #29
 800033a:	d4f5      	bmi.n	8000328 <restore_non_core_regs+0x1c>
 800033c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000340:	f000 fc48 	bl	8000bd4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000344:	6823      	ldr	r3, [r4, #0]
 8000346:	071a      	lsls	r2, r3, #28
 8000348:	d4f0      	bmi.n	800032c <restore_non_core_regs+0x20>
 800034a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800034e:	f000 fc49 	bl	8000be4 <__gnu_Unwind_Restore_WMMXD>
 8000352:	6823      	ldr	r3, [r4, #0]
 8000354:	06db      	lsls	r3, r3, #27
 8000356:	d4eb      	bmi.n	8000330 <restore_non_core_regs+0x24>
 8000358:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800035c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000360:	f000 bc84 	b.w	8000c6c <__gnu_Unwind_Restore_WMMXC>

08000364 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000364:	6803      	ldr	r3, [r0, #0]
 8000366:	b103      	cbz	r3, 800036a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000368:	4403      	add	r3, r0
 800036a:	4618      	mov	r0, r3
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__gnu_unwind_24bit.isra.1>:
 8000370:	2009      	movs	r0, #9
 8000372:	4770      	bx	lr

08000374 <_Unwind_DebugHook>:
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop

08000378 <unwind_phase2>:
 8000378:	b570      	push	{r4, r5, r6, lr}
 800037a:	4604      	mov	r4, r0
 800037c:	460d      	mov	r5, r1
 800037e:	e008      	b.n	8000392 <unwind_phase2+0x1a>
 8000380:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000382:	6163      	str	r3, [r4, #20]
 8000384:	462a      	mov	r2, r5
 8000386:	6923      	ldr	r3, [r4, #16]
 8000388:	4621      	mov	r1, r4
 800038a:	2001      	movs	r0, #1
 800038c:	4798      	blx	r3
 800038e:	2808      	cmp	r0, #8
 8000390:	d108      	bne.n	80003a4 <unwind_phase2+0x2c>
 8000392:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000394:	4620      	mov	r0, r4
 8000396:	f7ff ff69 	bl	800026c <get_eit_entry>
 800039a:	4606      	mov	r6, r0
 800039c:	2800      	cmp	r0, #0
 800039e:	d0ef      	beq.n	8000380 <unwind_phase2+0x8>
 80003a0:	f003 fe11 	bl	8003fc6 <abort>
 80003a4:	2807      	cmp	r0, #7
 80003a6:	d1fb      	bne.n	80003a0 <unwind_phase2+0x28>
 80003a8:	4630      	mov	r0, r6
 80003aa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80003ac:	f7ff ffe2 	bl	8000374 <_Unwind_DebugHook>
 80003b0:	1d28      	adds	r0, r5, #4
 80003b2:	f000 fbf3 	bl	8000b9c <__restore_core_regs>
 80003b6:	bf00      	nop

080003b8 <unwind_phase2_forced>:
 80003b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003bc:	1d0c      	adds	r4, r1, #4
 80003be:	4605      	mov	r5, r0
 80003c0:	4692      	mov	sl, r2
 80003c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003c4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80003c8:	ae03      	add	r6, sp, #12
 80003ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80003cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80003d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80003d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003d8:	ac02      	add	r4, sp, #8
 80003da:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80003de:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80003e2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80003e6:	2300      	movs	r3, #0
 80003e8:	4628      	mov	r0, r5
 80003ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80003ec:	6023      	str	r3, [r4, #0]
 80003ee:	f7ff ff3d 	bl	800026c <get_eit_entry>
 80003f2:	f1ba 0f00 	cmp.w	sl, #0
 80003f6:	4607      	mov	r7, r0
 80003f8:	bf14      	ite	ne
 80003fa:	260a      	movne	r6, #10
 80003fc:	2609      	moveq	r6, #9
 80003fe:	b17f      	cbz	r7, 8000420 <unwind_phase2_forced+0x68>
 8000400:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000402:	f046 0110 	orr.w	r1, r6, #16
 8000406:	e88d 0210 	stmia.w	sp, {r4, r9}
 800040a:	462a      	mov	r2, r5
 800040c:	6463      	str	r3, [r4, #68]	; 0x44
 800040e:	2001      	movs	r0, #1
 8000410:	462b      	mov	r3, r5
 8000412:	47c0      	blx	r8
 8000414:	bb78      	cbnz	r0, 8000476 <unwind_phase2_forced+0xbe>
 8000416:	4638      	mov	r0, r7
 8000418:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000422:	616b      	str	r3, [r5, #20]
 8000424:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000428:	4621      	mov	r1, r4
 800042a:	a87a      	add	r0, sp, #488	; 0x1e8
 800042c:	f003 fdc0 	bl	8003fb0 <memcpy>
 8000430:	692b      	ldr	r3, [r5, #16]
 8000432:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000434:	4629      	mov	r1, r5
 8000436:	4630      	mov	r0, r6
 8000438:	4798      	blx	r3
 800043a:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800043c:	4682      	mov	sl, r0
 800043e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000442:	4631      	mov	r1, r6
 8000444:	6463      	str	r3, [r4, #68]	; 0x44
 8000446:	462a      	mov	r2, r5
 8000448:	462b      	mov	r3, r5
 800044a:	2001      	movs	r0, #1
 800044c:	47c0      	blx	r8
 800044e:	b990      	cbnz	r0, 8000476 <unwind_phase2_forced+0xbe>
 8000450:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000454:	a97a      	add	r1, sp, #488	; 0x1e8
 8000456:	4620      	mov	r0, r4
 8000458:	f003 fdaa 	bl	8003fb0 <memcpy>
 800045c:	f1ba 0f08 	cmp.w	sl, #8
 8000460:	d106      	bne.n	8000470 <unwind_phase2_forced+0xb8>
 8000462:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000464:	4628      	mov	r0, r5
 8000466:	f7ff ff01 	bl	800026c <get_eit_entry>
 800046a:	2609      	movs	r6, #9
 800046c:	4607      	mov	r7, r0
 800046e:	e7c6      	b.n	80003fe <unwind_phase2_forced+0x46>
 8000470:	f1ba 0f07 	cmp.w	sl, #7
 8000474:	d005      	beq.n	8000482 <unwind_phase2_forced+0xca>
 8000476:	2709      	movs	r7, #9
 8000478:	4638      	mov	r0, r7
 800047a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	4638      	mov	r0, r7
 8000484:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000486:	f7ff ff75 	bl	8000374 <_Unwind_DebugHook>
 800048a:	a803      	add	r0, sp, #12
 800048c:	f000 fb86 	bl	8000b9c <__restore_core_regs>

08000490 <_Unwind_GetCFA>:
 8000490:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000492:	4770      	bx	lr

08000494 <__gnu_Unwind_RaiseException>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000498:	640b      	str	r3, [r1, #64]	; 0x40
 800049a:	1d0e      	adds	r6, r1, #4
 800049c:	460f      	mov	r7, r1
 800049e:	4604      	mov	r4, r0
 80004a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80004a2:	b0f9      	sub	sp, #484	; 0x1e4
 80004a4:	ad01      	add	r5, sp, #4
 80004a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80004aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80004ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004b4:	f04f 36ff 	mov.w	r6, #4294967295
 80004b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80004bc:	9600      	str	r6, [sp, #0]
 80004be:	e006      	b.n	80004ce <__gnu_Unwind_RaiseException+0x3a>
 80004c0:	6923      	ldr	r3, [r4, #16]
 80004c2:	466a      	mov	r2, sp
 80004c4:	4621      	mov	r1, r4
 80004c6:	4798      	blx	r3
 80004c8:	2808      	cmp	r0, #8
 80004ca:	4605      	mov	r5, r0
 80004cc:	d108      	bne.n	80004e0 <__gnu_Unwind_RaiseException+0x4c>
 80004ce:	9910      	ldr	r1, [sp, #64]	; 0x40
 80004d0:	4620      	mov	r0, r4
 80004d2:	f7ff fecb 	bl	800026c <get_eit_entry>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	d0f2      	beq.n	80004c0 <__gnu_Unwind_RaiseException+0x2c>
 80004da:	2009      	movs	r0, #9
 80004dc:	b079      	add	sp, #484	; 0x1e4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4668      	mov	r0, sp
 80004e2:	f7ff ff13 	bl	800030c <restore_non_core_regs>
 80004e6:	2d06      	cmp	r5, #6
 80004e8:	d1f7      	bne.n	80004da <__gnu_Unwind_RaiseException+0x46>
 80004ea:	4639      	mov	r1, r7
 80004ec:	4620      	mov	r0, r4
 80004ee:	f7ff ff43 	bl	8000378 <unwind_phase2>
 80004f2:	bf00      	nop

080004f4 <__gnu_Unwind_ForcedUnwind>:
 80004f4:	b430      	push	{r4, r5}
 80004f6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80004f8:	60c1      	str	r1, [r0, #12]
 80004fa:	6182      	str	r2, [r0, #24]
 80004fc:	4619      	mov	r1, r3
 80004fe:	641d      	str	r5, [r3, #64]	; 0x40
 8000500:	2200      	movs	r2, #0
 8000502:	bc30      	pop	{r4, r5}
 8000504:	e758      	b.n	80003b8 <unwind_phase2_forced>
 8000506:	bf00      	nop

08000508 <__gnu_Unwind_Resume>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	68c6      	ldr	r6, [r0, #12]
 800050c:	6943      	ldr	r3, [r0, #20]
 800050e:	640b      	str	r3, [r1, #64]	; 0x40
 8000510:	b126      	cbz	r6, 800051c <__gnu_Unwind_Resume+0x14>
 8000512:	2201      	movs	r2, #1
 8000514:	f7ff ff50 	bl	80003b8 <unwind_phase2_forced>
 8000518:	f003 fd55 	bl	8003fc6 <abort>
 800051c:	6903      	ldr	r3, [r0, #16]
 800051e:	460a      	mov	r2, r1
 8000520:	4604      	mov	r4, r0
 8000522:	460d      	mov	r5, r1
 8000524:	4601      	mov	r1, r0
 8000526:	2002      	movs	r0, #2
 8000528:	4798      	blx	r3
 800052a:	2807      	cmp	r0, #7
 800052c:	d007      	beq.n	800053e <__gnu_Unwind_Resume+0x36>
 800052e:	2808      	cmp	r0, #8
 8000530:	d103      	bne.n	800053a <__gnu_Unwind_Resume+0x32>
 8000532:	4629      	mov	r1, r5
 8000534:	4620      	mov	r0, r4
 8000536:	f7ff ff1f 	bl	8000378 <unwind_phase2>
 800053a:	f003 fd44 	bl	8003fc6 <abort>
 800053e:	4630      	mov	r0, r6
 8000540:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000542:	f7ff ff17 	bl	8000374 <_Unwind_DebugHook>
 8000546:	1d28      	adds	r0, r5, #4
 8000548:	f000 fb28 	bl	8000b9c <__restore_core_regs>

0800054c <__gnu_Unwind_Resume_or_Rethrow>:
 800054c:	68c2      	ldr	r2, [r0, #12]
 800054e:	b11a      	cbz	r2, 8000558 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000550:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000552:	640a      	str	r2, [r1, #64]	; 0x40
 8000554:	2200      	movs	r2, #0
 8000556:	e72f      	b.n	80003b8 <unwind_phase2_forced>
 8000558:	e79c      	b.n	8000494 <__gnu_Unwind_RaiseException>
 800055a:	bf00      	nop

0800055c <_Unwind_Complete>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_Unwind_DeleteException>:
 8000560:	6883      	ldr	r3, [r0, #8]
 8000562:	b113      	cbz	r3, 800056a <_Unwind_DeleteException+0xa>
 8000564:	4601      	mov	r1, r0
 8000566:	2001      	movs	r0, #1
 8000568:	4718      	bx	r3
 800056a:	4770      	bx	lr

0800056c <_Unwind_VRS_Get>:
 800056c:	b500      	push	{lr}
 800056e:	2904      	cmp	r1, #4
 8000570:	d807      	bhi.n	8000582 <_Unwind_VRS_Get+0x16>
 8000572:	e8df f001 	tbb	[pc, r1]
 8000576:	0903      	.short	0x0903
 8000578:	0906      	.short	0x0906
 800057a:	09          	.byte	0x09
 800057b:	00          	.byte	0x00
 800057c:	b90b      	cbnz	r3, 8000582 <_Unwind_VRS_Get+0x16>
 800057e:	2a0f      	cmp	r2, #15
 8000580:	d905      	bls.n	800058e <_Unwind_VRS_Get+0x22>
 8000582:	2002      	movs	r0, #2
 8000584:	f85d fb04 	ldr.w	pc, [sp], #4
 8000588:	2001      	movs	r0, #1
 800058a:	f85d fb04 	ldr.w	pc, [sp], #4
 800058e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000592:	4618      	mov	r0, r3
 8000594:	6853      	ldr	r3, [r2, #4]
 8000596:	9a01      	ldr	r2, [sp, #4]
 8000598:	6013      	str	r3, [r2, #0]
 800059a:	f85d fb04 	ldr.w	pc, [sp], #4
 800059e:	bf00      	nop

080005a0 <_Unwind_GetGR>:
 80005a0:	b510      	push	{r4, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	2300      	movs	r3, #0
 80005a6:	ac03      	add	r4, sp, #12
 80005a8:	460a      	mov	r2, r1
 80005aa:	9400      	str	r4, [sp, #0]
 80005ac:	4619      	mov	r1, r3
 80005ae:	f7ff ffdd 	bl	800056c <_Unwind_VRS_Get>
 80005b2:	9803      	ldr	r0, [sp, #12]
 80005b4:	b004      	add	sp, #16
 80005b6:	bd10      	pop	{r4, pc}

080005b8 <_Unwind_VRS_Set>:
 80005b8:	b500      	push	{lr}
 80005ba:	2904      	cmp	r1, #4
 80005bc:	d807      	bhi.n	80005ce <_Unwind_VRS_Set+0x16>
 80005be:	e8df f001 	tbb	[pc, r1]
 80005c2:	0903      	.short	0x0903
 80005c4:	0906      	.short	0x0906
 80005c6:	09          	.byte	0x09
 80005c7:	00          	.byte	0x00
 80005c8:	b90b      	cbnz	r3, 80005ce <_Unwind_VRS_Set+0x16>
 80005ca:	2a0f      	cmp	r2, #15
 80005cc:	d905      	bls.n	80005da <_Unwind_VRS_Set+0x22>
 80005ce:	2002      	movs	r0, #2
 80005d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80005d4:	2001      	movs	r0, #1
 80005d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80005da:	9901      	ldr	r1, [sp, #4]
 80005dc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80005e0:	6809      	ldr	r1, [r1, #0]
 80005e2:	6051      	str	r1, [r2, #4]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80005ea:	bf00      	nop

080005ec <_Unwind_SetGR>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	ac04      	add	r4, sp, #16
 80005f2:	2300      	movs	r3, #0
 80005f4:	f844 2d04 	str.w	r2, [r4, #-4]!
 80005f8:	460a      	mov	r2, r1
 80005fa:	9400      	str	r4, [sp, #0]
 80005fc:	4619      	mov	r1, r3
 80005fe:	f7ff ffdb 	bl	80005b8 <_Unwind_VRS_Set>
 8000602:	b004      	add	sp, #16
 8000604:	bd10      	pop	{r4, pc}
 8000606:	bf00      	nop

08000608 <__gnu_Unwind_Backtrace>:
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800060c:	6413      	str	r3, [r2, #64]	; 0x40
 800060e:	1d15      	adds	r5, r2, #4
 8000610:	4607      	mov	r7, r0
 8000612:	460e      	mov	r6, r1
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800061a:	ac17      	add	r4, sp, #92	; 0x5c
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800062a:	f04f 35ff 	mov.w	r5, #4294967295
 800062e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000632:	9516      	str	r5, [sp, #88]	; 0x58
 8000634:	e010      	b.n	8000658 <__gnu_Unwind_Backtrace+0x50>
 8000636:	a816      	add	r0, sp, #88	; 0x58
 8000638:	f7ff ffd8 	bl	80005ec <_Unwind_SetGR>
 800063c:	4631      	mov	r1, r6
 800063e:	a816      	add	r0, sp, #88	; 0x58
 8000640:	47b8      	blx	r7
 8000642:	aa16      	add	r2, sp, #88	; 0x58
 8000644:	4669      	mov	r1, sp
 8000646:	b978      	cbnz	r0, 8000668 <__gnu_Unwind_Backtrace+0x60>
 8000648:	9b04      	ldr	r3, [sp, #16]
 800064a:	2008      	movs	r0, #8
 800064c:	4798      	blx	r3
 800064e:	2805      	cmp	r0, #5
 8000650:	4604      	mov	r4, r0
 8000652:	d00a      	beq.n	800066a <__gnu_Unwind_Backtrace+0x62>
 8000654:	2809      	cmp	r0, #9
 8000656:	d007      	beq.n	8000668 <__gnu_Unwind_Backtrace+0x60>
 8000658:	9926      	ldr	r1, [sp, #152]	; 0x98
 800065a:	4668      	mov	r0, sp
 800065c:	f7ff fe06 	bl	800026c <get_eit_entry>
 8000660:	466a      	mov	r2, sp
 8000662:	210c      	movs	r1, #12
 8000664:	2800      	cmp	r0, #0
 8000666:	d0e6      	beq.n	8000636 <__gnu_Unwind_Backtrace+0x2e>
 8000668:	2409      	movs	r4, #9
 800066a:	a816      	add	r0, sp, #88	; 0x58
 800066c:	f7ff fe4e 	bl	800030c <restore_non_core_regs>
 8000670:	4620      	mov	r0, r4
 8000672:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000676:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000678 <__gnu_unwind_pr_common>:
 8000678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800067c:	460d      	mov	r5, r1
 800067e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000680:	b08b      	sub	sp, #44	; 0x2c
 8000682:	1d0c      	adds	r4, r1, #4
 8000684:	6809      	ldr	r1, [r1, #0]
 8000686:	9107      	str	r1, [sp, #28]
 8000688:	4691      	mov	r9, r2
 800068a:	9408      	str	r4, [sp, #32]
 800068c:	f000 0b03 	and.w	fp, r0, #3
 8000690:	461e      	mov	r6, r3
 8000692:	2b00      	cmp	r3, #0
 8000694:	d160      	bne.n	8000758 <__gnu_unwind_pr_common+0xe0>
 8000696:	0209      	lsls	r1, r1, #8
 8000698:	2303      	movs	r3, #3
 800069a:	9107      	str	r1, [sp, #28]
 800069c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80006a0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80006a4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80006a6:	f1bb 0f02 	cmp.w	fp, #2
 80006aa:	bf08      	it	eq
 80006ac:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80006ae:	f013 0301 	ands.w	r3, r3, #1
 80006b2:	d140      	bne.n	8000736 <__gnu_unwind_pr_common+0xbe>
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	f000 0308 	and.w	r3, r0, #8
 80006ba:	9303      	str	r3, [sp, #12]
 80006bc:	f8d4 8000 	ldr.w	r8, [r4]
 80006c0:	f1b8 0f00 	cmp.w	r8, #0
 80006c4:	d039      	beq.n	800073a <__gnu_unwind_pr_common+0xc2>
 80006c6:	2e02      	cmp	r6, #2
 80006c8:	d043      	beq.n	8000752 <__gnu_unwind_pr_common+0xda>
 80006ca:	f8b4 8000 	ldrh.w	r8, [r4]
 80006ce:	8867      	ldrh	r7, [r4, #2]
 80006d0:	3404      	adds	r4, #4
 80006d2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80006d4:	f027 0a01 	bic.w	sl, r7, #1
 80006d8:	210f      	movs	r1, #15
 80006da:	4648      	mov	r0, r9
 80006dc:	449a      	add	sl, r3
 80006de:	f7ff ff5f 	bl	80005a0 <_Unwind_GetGR>
 80006e2:	4582      	cmp	sl, r0
 80006e4:	d833      	bhi.n	800074e <__gnu_unwind_pr_common+0xd6>
 80006e6:	f028 0301 	bic.w	r3, r8, #1
 80006ea:	449a      	add	sl, r3
 80006ec:	4550      	cmp	r0, sl
 80006ee:	bf2c      	ite	cs
 80006f0:	2000      	movcs	r0, #0
 80006f2:	2001      	movcc	r0, #1
 80006f4:	007f      	lsls	r7, r7, #1
 80006f6:	f007 0702 	and.w	r7, r7, #2
 80006fa:	f008 0801 	and.w	r8, r8, #1
 80006fe:	ea47 0708 	orr.w	r7, r7, r8
 8000702:	2f01      	cmp	r7, #1
 8000704:	d03e      	beq.n	8000784 <__gnu_unwind_pr_common+0x10c>
 8000706:	d335      	bcc.n	8000774 <__gnu_unwind_pr_common+0xfc>
 8000708:	2f02      	cmp	r7, #2
 800070a:	d11c      	bne.n	8000746 <__gnu_unwind_pr_common+0xce>
 800070c:	6823      	ldr	r3, [r4, #0]
 800070e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000712:	9202      	str	r2, [sp, #8]
 8000714:	f1bb 0f00 	cmp.w	fp, #0
 8000718:	d176      	bne.n	8000808 <__gnu_unwind_pr_common+0x190>
 800071a:	b128      	cbz	r0, 8000728 <__gnu_unwind_pr_common+0xb0>
 800071c:	9903      	ldr	r1, [sp, #12]
 800071e:	2900      	cmp	r1, #0
 8000720:	d07e      	beq.n	8000820 <__gnu_unwind_pr_common+0x1a8>
 8000722:	2a00      	cmp	r2, #0
 8000724:	f000 80a6 	beq.w	8000874 <__gnu_unwind_pr_common+0x1fc>
 8000728:	2b00      	cmp	r3, #0
 800072a:	db77      	blt.n	800081c <__gnu_unwind_pr_common+0x1a4>
 800072c:	9b02      	ldr	r3, [sp, #8]
 800072e:	3301      	adds	r3, #1
 8000730:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000734:	e7c2      	b.n	80006bc <__gnu_unwind_pr_common+0x44>
 8000736:	2300      	movs	r3, #0
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	2e02      	cmp	r6, #2
 800073c:	dd3e      	ble.n	80007bc <__gnu_unwind_pr_common+0x144>
 800073e:	f7ff fe17 	bl	8000370 <__gnu_unwind_24bit.isra.1>
 8000742:	2800      	cmp	r0, #0
 8000744:	d040      	beq.n	80007c8 <__gnu_unwind_pr_common+0x150>
 8000746:	2009      	movs	r0, #9
 8000748:	b00b      	add	sp, #44	; 0x2c
 800074a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800074e:	2000      	movs	r0, #0
 8000750:	e7d0      	b.n	80006f4 <__gnu_unwind_pr_common+0x7c>
 8000752:	6867      	ldr	r7, [r4, #4]
 8000754:	3408      	adds	r4, #8
 8000756:	e7bc      	b.n	80006d2 <__gnu_unwind_pr_common+0x5a>
 8000758:	2b02      	cmp	r3, #2
 800075a:	dca3      	bgt.n	80006a4 <__gnu_unwind_pr_common+0x2c>
 800075c:	0c0b      	lsrs	r3, r1, #16
 800075e:	b2da      	uxtb	r2, r3
 8000760:	0409      	lsls	r1, r1, #16
 8000762:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000766:	2302      	movs	r3, #2
 8000768:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800076c:	9107      	str	r1, [sp, #28]
 800076e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000772:	e797      	b.n	80006a4 <__gnu_unwind_pr_common+0x2c>
 8000774:	f1bb 0f00 	cmp.w	fp, #0
 8000778:	d002      	beq.n	8000780 <__gnu_unwind_pr_common+0x108>
 800077a:	2800      	cmp	r0, #0
 800077c:	f040 80bd 	bne.w	80008fa <__gnu_unwind_pr_common+0x282>
 8000780:	3404      	adds	r4, #4
 8000782:	e79b      	b.n	80006bc <__gnu_unwind_pr_common+0x44>
 8000784:	f1bb 0f00 	cmp.w	fp, #0
 8000788:	d125      	bne.n	80007d6 <__gnu_unwind_pr_common+0x15e>
 800078a:	b1a8      	cbz	r0, 80007b8 <__gnu_unwind_pr_common+0x140>
 800078c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000790:	1c99      	adds	r1, r3, #2
 8000792:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000796:	d0d6      	beq.n	8000746 <__gnu_unwind_pr_common+0xce>
 8000798:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800079c:	3301      	adds	r3, #1
 800079e:	9106      	str	r1, [sp, #24]
 80007a0:	f000 80a3 	beq.w	80008ea <__gnu_unwind_pr_common+0x272>
 80007a4:	1d20      	adds	r0, r4, #4
 80007a6:	f7ff fddd 	bl	8000364 <_Unwind_decode_typeinfo_ptr.isra.0>
 80007aa:	ab06      	add	r3, sp, #24
 80007ac:	4601      	mov	r1, r0
 80007ae:	4628      	mov	r0, r5
 80007b0:	f3af 8000 	nop.w
 80007b4:	2800      	cmp	r0, #0
 80007b6:	d177      	bne.n	80008a8 <__gnu_unwind_pr_common+0x230>
 80007b8:	3408      	adds	r4, #8
 80007ba:	e77f      	b.n	80006bc <__gnu_unwind_pr_common+0x44>
 80007bc:	a907      	add	r1, sp, #28
 80007be:	4648      	mov	r0, r9
 80007c0:	f000 faee 	bl	8000da0 <__gnu_unwind_execute>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d1be      	bne.n	8000746 <__gnu_unwind_pr_common+0xce>
 80007c8:	9b01      	ldr	r3, [sp, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d15c      	bne.n	8000888 <__gnu_unwind_pr_common+0x210>
 80007ce:	2008      	movs	r0, #8
 80007d0:	b00b      	add	sp, #44	; 0x2c
 80007d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007d6:	210d      	movs	r1, #13
 80007d8:	4648      	mov	r0, r9
 80007da:	6a2f      	ldr	r7, [r5, #32]
 80007dc:	f7ff fee0 	bl	80005a0 <_Unwind_GetGR>
 80007e0:	4287      	cmp	r7, r0
 80007e2:	d1e9      	bne.n	80007b8 <__gnu_unwind_pr_common+0x140>
 80007e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80007e6:	429c      	cmp	r4, r3
 80007e8:	d1e6      	bne.n	80007b8 <__gnu_unwind_pr_common+0x140>
 80007ea:	4620      	mov	r0, r4
 80007ec:	f7ff fcf0 	bl	80001d0 <selfrel_offset31>
 80007f0:	210f      	movs	r1, #15
 80007f2:	4602      	mov	r2, r0
 80007f4:	4648      	mov	r0, r9
 80007f6:	f7ff fef9 	bl	80005ec <_Unwind_SetGR>
 80007fa:	4648      	mov	r0, r9
 80007fc:	462a      	mov	r2, r5
 80007fe:	2100      	movs	r1, #0
 8000800:	f7ff fef4 	bl	80005ec <_Unwind_SetGR>
 8000804:	2007      	movs	r0, #7
 8000806:	e79f      	b.n	8000748 <__gnu_unwind_pr_common+0xd0>
 8000808:	210d      	movs	r1, #13
 800080a:	4648      	mov	r0, r9
 800080c:	6a2f      	ldr	r7, [r5, #32]
 800080e:	f7ff fec7 	bl	80005a0 <_Unwind_GetGR>
 8000812:	4287      	cmp	r7, r0
 8000814:	d058      	beq.n	80008c8 <__gnu_unwind_pr_common+0x250>
 8000816:	6823      	ldr	r3, [r4, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	da87      	bge.n	800072c <__gnu_unwind_pr_common+0xb4>
 800081c:	3404      	adds	r4, #4
 800081e:	e785      	b.n	800072c <__gnu_unwind_pr_common+0xb4>
 8000820:	9b02      	ldr	r3, [sp, #8]
 8000822:	b33b      	cbz	r3, 8000874 <__gnu_unwind_pr_common+0x1fc>
 8000824:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000828:	1d27      	adds	r7, r4, #4
 800082a:	f8cd b010 	str.w	fp, [sp, #16]
 800082e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000832:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000836:	9605      	str	r6, [sp, #20]
 8000838:	46a3      	mov	fp, r4
 800083a:	461c      	mov	r4, r3
 800083c:	e002      	b.n	8000844 <__gnu_unwind_pr_common+0x1cc>
 800083e:	45b2      	cmp	sl, r6
 8000840:	46b0      	mov	r8, r6
 8000842:	d016      	beq.n	8000872 <__gnu_unwind_pr_common+0x1fa>
 8000844:	4638      	mov	r0, r7
 8000846:	9406      	str	r4, [sp, #24]
 8000848:	f7ff fd8c 	bl	8000364 <_Unwind_decode_typeinfo_ptr.isra.0>
 800084c:	ab06      	add	r3, sp, #24
 800084e:	4601      	mov	r1, r0
 8000850:	2200      	movs	r2, #0
 8000852:	4628      	mov	r0, r5
 8000854:	f3af 8000 	nop.w
 8000858:	f108 0601 	add.w	r6, r8, #1
 800085c:	3704      	adds	r7, #4
 800085e:	2800      	cmp	r0, #0
 8000860:	d0ed      	beq.n	800083e <__gnu_unwind_pr_common+0x1c6>
 8000862:	9b02      	ldr	r3, [sp, #8]
 8000864:	9e05      	ldr	r6, [sp, #20]
 8000866:	4543      	cmp	r3, r8
 8000868:	465c      	mov	r4, fp
 800086a:	f8dd b010 	ldr.w	fp, [sp, #16]
 800086e:	d1d2      	bne.n	8000816 <__gnu_unwind_pr_common+0x19e>
 8000870:	e000      	b.n	8000874 <__gnu_unwind_pr_common+0x1fc>
 8000872:	465c      	mov	r4, fp
 8000874:	4648      	mov	r0, r9
 8000876:	210d      	movs	r1, #13
 8000878:	f7ff fe92 	bl	80005a0 <_Unwind_GetGR>
 800087c:	9b06      	ldr	r3, [sp, #24]
 800087e:	6228      	str	r0, [r5, #32]
 8000880:	62ac      	str	r4, [r5, #40]	; 0x28
 8000882:	626b      	str	r3, [r5, #36]	; 0x24
 8000884:	2006      	movs	r0, #6
 8000886:	e75f      	b.n	8000748 <__gnu_unwind_pr_common+0xd0>
 8000888:	210f      	movs	r1, #15
 800088a:	4648      	mov	r0, r9
 800088c:	f7ff fe88 	bl	80005a0 <_Unwind_GetGR>
 8000890:	210e      	movs	r1, #14
 8000892:	4602      	mov	r2, r0
 8000894:	4648      	mov	r0, r9
 8000896:	f7ff fea9 	bl	80005ec <_Unwind_SetGR>
 800089a:	4648      	mov	r0, r9
 800089c:	4a29      	ldr	r2, [pc, #164]	; (8000944 <__gnu_unwind_pr_common+0x2cc>)
 800089e:	210f      	movs	r1, #15
 80008a0:	f7ff fea4 	bl	80005ec <_Unwind_SetGR>
 80008a4:	2007      	movs	r0, #7
 80008a6:	e74f      	b.n	8000748 <__gnu_unwind_pr_common+0xd0>
 80008a8:	4607      	mov	r7, r0
 80008aa:	210d      	movs	r1, #13
 80008ac:	4648      	mov	r0, r9
 80008ae:	f7ff fe77 	bl	80005a0 <_Unwind_GetGR>
 80008b2:	2f02      	cmp	r7, #2
 80008b4:	6228      	str	r0, [r5, #32]
 80008b6:	d11d      	bne.n	80008f4 <__gnu_unwind_pr_common+0x27c>
 80008b8:	462b      	mov	r3, r5
 80008ba:	9a06      	ldr	r2, [sp, #24]
 80008bc:	f843 2f2c 	str.w	r2, [r3, #44]!
 80008c0:	626b      	str	r3, [r5, #36]	; 0x24
 80008c2:	62ac      	str	r4, [r5, #40]	; 0x28
 80008c4:	2006      	movs	r0, #6
 80008c6:	e73f      	b.n	8000748 <__gnu_unwind_pr_common+0xd0>
 80008c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008ca:	429c      	cmp	r4, r3
 80008cc:	d1a3      	bne.n	8000816 <__gnu_unwind_pr_common+0x19e>
 80008ce:	2204      	movs	r2, #4
 80008d0:	2700      	movs	r7, #0
 80008d2:	18a3      	adds	r3, r4, r2
 80008d4:	9902      	ldr	r1, [sp, #8]
 80008d6:	62a9      	str	r1, [r5, #40]	; 0x28
 80008d8:	62ef      	str	r7, [r5, #44]	; 0x2c
 80008da:	632a      	str	r2, [r5, #48]	; 0x30
 80008dc:	636b      	str	r3, [r5, #52]	; 0x34
 80008de:	6823      	ldr	r3, [r4, #0]
 80008e0:	42bb      	cmp	r3, r7
 80008e2:	db1d      	blt.n	8000920 <__gnu_unwind_pr_common+0x2a8>
 80008e4:	2301      	movs	r3, #1
 80008e6:	9301      	str	r3, [sp, #4]
 80008e8:	e720      	b.n	800072c <__gnu_unwind_pr_common+0xb4>
 80008ea:	4648      	mov	r0, r9
 80008ec:	210d      	movs	r1, #13
 80008ee:	f7ff fe57 	bl	80005a0 <_Unwind_GetGR>
 80008f2:	6228      	str	r0, [r5, #32]
 80008f4:	9b06      	ldr	r3, [sp, #24]
 80008f6:	626b      	str	r3, [r5, #36]	; 0x24
 80008f8:	e7e3      	b.n	80008c2 <__gnu_unwind_pr_common+0x24a>
 80008fa:	4620      	mov	r0, r4
 80008fc:	f7ff fc68 	bl	80001d0 <selfrel_offset31>
 8000900:	3404      	adds	r4, #4
 8000902:	4606      	mov	r6, r0
 8000904:	63ac      	str	r4, [r5, #56]	; 0x38
 8000906:	4628      	mov	r0, r5
 8000908:	f3af 8000 	nop.w
 800090c:	2800      	cmp	r0, #0
 800090e:	f43f af1a 	beq.w	8000746 <__gnu_unwind_pr_common+0xce>
 8000912:	4648      	mov	r0, r9
 8000914:	4632      	mov	r2, r6
 8000916:	210f      	movs	r1, #15
 8000918:	f7ff fe68 	bl	80005ec <_Unwind_SetGR>
 800091c:	2007      	movs	r0, #7
 800091e:	e713      	b.n	8000748 <__gnu_unwind_pr_common+0xd0>
 8000920:	4608      	mov	r0, r1
 8000922:	3001      	adds	r0, #1
 8000924:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000928:	f7ff fc52 	bl	80001d0 <selfrel_offset31>
 800092c:	210f      	movs	r1, #15
 800092e:	4602      	mov	r2, r0
 8000930:	4648      	mov	r0, r9
 8000932:	f7ff fe5b 	bl	80005ec <_Unwind_SetGR>
 8000936:	4648      	mov	r0, r9
 8000938:	462a      	mov	r2, r5
 800093a:	4639      	mov	r1, r7
 800093c:	f7ff fe56 	bl	80005ec <_Unwind_SetGR>
 8000940:	2007      	movs	r0, #7
 8000942:	e701      	b.n	8000748 <__gnu_unwind_pr_common+0xd0>
 8000944:	00000000 	.word	0x00000000

08000948 <__aeabi_unwind_cpp_pr0>:
 8000948:	2300      	movs	r3, #0
 800094a:	e695      	b.n	8000678 <__gnu_unwind_pr_common>

0800094c <__aeabi_unwind_cpp_pr1>:
 800094c:	2301      	movs	r3, #1
 800094e:	e693      	b.n	8000678 <__gnu_unwind_pr_common>

08000950 <__aeabi_unwind_cpp_pr2>:
 8000950:	2302      	movs	r3, #2
 8000952:	e691      	b.n	8000678 <__gnu_unwind_pr_common>

08000954 <_Unwind_VRS_Pop>:
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000956:	4604      	mov	r4, r0
 8000958:	b0c5      	sub	sp, #276	; 0x114
 800095a:	2904      	cmp	r1, #4
 800095c:	d80d      	bhi.n	800097a <_Unwind_VRS_Pop+0x26>
 800095e:	e8df f001 	tbb	[pc, r1]
 8000962:	0353      	.short	0x0353
 8000964:	310c      	.short	0x310c
 8000966:	0f          	.byte	0x0f
 8000967:	00          	.byte	0x00
 8000968:	2b01      	cmp	r3, #1
 800096a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800096e:	b295      	uxth	r5, r2
 8000970:	d162      	bne.n	8000a38 <_Unwind_VRS_Pop+0xe4>
 8000972:	1972      	adds	r2, r6, r5
 8000974:	2a10      	cmp	r2, #16
 8000976:	f240 809b 	bls.w	8000ab0 <_Unwind_VRS_Pop+0x15c>
 800097a:	2002      	movs	r0, #2
 800097c:	b045      	add	sp, #276	; 0x114
 800097e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1fa      	bne.n	800097a <_Unwind_VRS_Pop+0x26>
 8000984:	2a10      	cmp	r2, #16
 8000986:	d8f8      	bhi.n	800097a <_Unwind_VRS_Pop+0x26>
 8000988:	6823      	ldr	r3, [r4, #0]
 800098a:	06d8      	lsls	r0, r3, #27
 800098c:	f100 80c6 	bmi.w	8000b1c <_Unwind_VRS_Pop+0x1c8>
 8000990:	ae22      	add	r6, sp, #136	; 0x88
 8000992:	4630      	mov	r0, r6
 8000994:	9201      	str	r2, [sp, #4]
 8000996:	f000 f973 	bl	8000c80 <__gnu_Unwind_Save_WMMXC>
 800099a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800099c:	9a01      	ldr	r2, [sp, #4]
 800099e:	2300      	movs	r3, #0
 80009a0:	2501      	movs	r5, #1
 80009a2:	fa05 f103 	lsl.w	r1, r5, r3
 80009a6:	4211      	tst	r1, r2
 80009a8:	d003      	beq.n	80009b2 <_Unwind_VRS_Pop+0x5e>
 80009aa:	6801      	ldr	r1, [r0, #0]
 80009ac:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 80009b0:	3004      	adds	r0, #4
 80009b2:	3301      	adds	r3, #1
 80009b4:	2b04      	cmp	r3, #4
 80009b6:	d1f4      	bne.n	80009a2 <_Unwind_VRS_Pop+0x4e>
 80009b8:	63a0      	str	r0, [r4, #56]	; 0x38
 80009ba:	4630      	mov	r0, r6
 80009bc:	f000 f956 	bl	8000c6c <__gnu_Unwind_Restore_WMMXC>
 80009c0:	2000      	movs	r0, #0
 80009c2:	e7db      	b.n	800097c <_Unwind_VRS_Pop+0x28>
 80009c4:	2b03      	cmp	r3, #3
 80009c6:	d1d8      	bne.n	800097a <_Unwind_VRS_Pop+0x26>
 80009c8:	0c15      	lsrs	r5, r2, #16
 80009ca:	b297      	uxth	r7, r2
 80009cc:	19eb      	adds	r3, r5, r7
 80009ce:	2b10      	cmp	r3, #16
 80009d0:	d8d3      	bhi.n	800097a <_Unwind_VRS_Pop+0x26>
 80009d2:	6823      	ldr	r3, [r4, #0]
 80009d4:	071e      	lsls	r6, r3, #28
 80009d6:	f100 80b5 	bmi.w	8000b44 <_Unwind_VRS_Pop+0x1f0>
 80009da:	ae22      	add	r6, sp, #136	; 0x88
 80009dc:	4630      	mov	r0, r6
 80009de:	f000 f923 	bl	8000c28 <__gnu_Unwind_Save_WMMXD>
 80009e2:	00ed      	lsls	r5, r5, #3
 80009e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80009e6:	b14f      	cbz	r7, 80009fc <_Unwind_VRS_Pop+0xa8>
 80009e8:	3d04      	subs	r5, #4
 80009ea:	1971      	adds	r1, r6, r5
 80009ec:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 80009f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80009f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80009f8:	4283      	cmp	r3, r0
 80009fa:	d1f9      	bne.n	80009f0 <_Unwind_VRS_Pop+0x9c>
 80009fc:	4630      	mov	r0, r6
 80009fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8000a00:	f000 f8f0 	bl	8000be4 <__gnu_Unwind_Restore_WMMXD>
 8000a04:	2000      	movs	r0, #0
 8000a06:	e7b9      	b.n	800097c <_Unwind_VRS_Pop+0x28>
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1b6      	bne.n	800097a <_Unwind_VRS_Pop+0x26>
 8000a0c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000a0e:	b297      	uxth	r7, r2
 8000a10:	1d20      	adds	r0, r4, #4
 8000a12:	2601      	movs	r6, #1
 8000a14:	fa06 f103 	lsl.w	r1, r6, r3
 8000a18:	4239      	tst	r1, r7
 8000a1a:	f103 0301 	add.w	r3, r3, #1
 8000a1e:	d002      	beq.n	8000a26 <_Unwind_VRS_Pop+0xd2>
 8000a20:	6829      	ldr	r1, [r5, #0]
 8000a22:	6001      	str	r1, [r0, #0]
 8000a24:	3504      	adds	r5, #4
 8000a26:	2b10      	cmp	r3, #16
 8000a28:	f100 0004 	add.w	r0, r0, #4
 8000a2c:	d1f2      	bne.n	8000a14 <_Unwind_VRS_Pop+0xc0>
 8000a2e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000a32:	d13b      	bne.n	8000aac <_Unwind_VRS_Pop+0x158>
 8000a34:	63a5      	str	r5, [r4, #56]	; 0x38
 8000a36:	e7a1      	b.n	800097c <_Unwind_VRS_Pop+0x28>
 8000a38:	2b05      	cmp	r3, #5
 8000a3a:	d19e      	bne.n	800097a <_Unwind_VRS_Pop+0x26>
 8000a3c:	1977      	adds	r7, r6, r5
 8000a3e:	2f20      	cmp	r7, #32
 8000a40:	d89b      	bhi.n	800097a <_Unwind_VRS_Pop+0x26>
 8000a42:	2e0f      	cmp	r6, #15
 8000a44:	d966      	bls.n	8000b14 <_Unwind_VRS_Pop+0x1c0>
 8000a46:	462f      	mov	r7, r5
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d13a      	bne.n	8000ac2 <_Unwind_VRS_Pop+0x16e>
 8000a4c:	462a      	mov	r2, r5
 8000a4e:	2700      	movs	r7, #0
 8000a50:	2a00      	cmp	r2, #0
 8000a52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000a54:	dd72      	ble.n	8000b3c <_Unwind_VRS_Pop+0x1e8>
 8000a56:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000a5a:	4601      	mov	r1, r0
 8000a5c:	a844      	add	r0, sp, #272	; 0x110
 8000a5e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000a62:	388c      	subs	r0, #140	; 0x8c
 8000a64:	f851 5b04 	ldr.w	r5, [r1], #4
 8000a68:	f840 5f04 	str.w	r5, [r0, #4]!
 8000a6c:	4291      	cmp	r1, r2
 8000a6e:	d1f9      	bne.n	8000a64 <_Unwind_VRS_Pop+0x110>
 8000a70:	4608      	mov	r0, r1
 8000a72:	b197      	cbz	r7, 8000a9a <_Unwind_VRS_Pop+0x146>
 8000a74:	2e10      	cmp	r6, #16
 8000a76:	4632      	mov	r2, r6
 8000a78:	a944      	add	r1, sp, #272	; 0x110
 8000a7a:	bf38      	it	cc
 8000a7c:	2210      	movcc	r2, #16
 8000a7e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000a82:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000a86:	0079      	lsls	r1, r7, #1
 8000a88:	3a04      	subs	r2, #4
 8000a8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000a8e:	f850 5b04 	ldr.w	r5, [r0], #4
 8000a92:	f842 5f04 	str.w	r5, [r2, #4]!
 8000a96:	4288      	cmp	r0, r1
 8000a98:	d1f9      	bne.n	8000a8e <_Unwind_VRS_Pop+0x13a>
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d048      	beq.n	8000b30 <_Unwind_VRS_Pop+0x1dc>
 8000a9e:	2e0f      	cmp	r6, #15
 8000aa0:	63a1      	str	r1, [r4, #56]	; 0x38
 8000aa2:	d933      	bls.n	8000b0c <_Unwind_VRS_Pop+0x1b8>
 8000aa4:	b117      	cbz	r7, 8000aac <_Unwind_VRS_Pop+0x158>
 8000aa6:	a802      	add	r0, sp, #8
 8000aa8:	f000 f894 	bl	8000bd4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000aac:	2000      	movs	r0, #0
 8000aae:	e765      	b.n	800097c <_Unwind_VRS_Pop+0x28>
 8000ab0:	2e0f      	cmp	r6, #15
 8000ab2:	f63f af62 	bhi.w	800097a <_Unwind_VRS_Pop+0x26>
 8000ab6:	2700      	movs	r7, #0
 8000ab8:	6822      	ldr	r2, [r4, #0]
 8000aba:	07d1      	lsls	r1, r2, #31
 8000abc:	d417      	bmi.n	8000aee <_Unwind_VRS_Pop+0x19a>
 8000abe:	2f00      	cmp	r7, #0
 8000ac0:	d060      	beq.n	8000b84 <_Unwind_VRS_Pop+0x230>
 8000ac2:	6822      	ldr	r2, [r4, #0]
 8000ac4:	0751      	lsls	r1, r2, #29
 8000ac6:	d445      	bmi.n	8000b54 <_Unwind_VRS_Pop+0x200>
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d04d      	beq.n	8000b68 <_Unwind_VRS_Pop+0x214>
 8000acc:	2e0f      	cmp	r6, #15
 8000ace:	d806      	bhi.n	8000ade <_Unwind_VRS_Pop+0x18a>
 8000ad0:	a822      	add	r0, sp, #136	; 0x88
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	f000 f87a 	bl	8000bcc <__gnu_Unwind_Save_VFP_D>
 8000ad8:	9b01      	ldr	r3, [sp, #4]
 8000ada:	2f00      	cmp	r7, #0
 8000adc:	d0b6      	beq.n	8000a4c <_Unwind_VRS_Pop+0xf8>
 8000ade:	a802      	add	r0, sp, #8
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	f000 f87b 	bl	8000bdc <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ae6:	9b01      	ldr	r3, [sp, #4]
 8000ae8:	f1c6 0210 	rsb	r2, r6, #16
 8000aec:	e7b0      	b.n	8000a50 <_Unwind_VRS_Pop+0xfc>
 8000aee:	f022 0101 	bic.w	r1, r2, #1
 8000af2:	2b05      	cmp	r3, #5
 8000af4:	6021      	str	r1, [r4, #0]
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	4620      	mov	r0, r4
 8000afa:	d03b      	beq.n	8000b74 <_Unwind_VRS_Pop+0x220>
 8000afc:	f022 0203 	bic.w	r2, r2, #3
 8000b00:	f840 2b48 	str.w	r2, [r0], #72
 8000b04:	f000 f85a 	bl	8000bbc <__gnu_Unwind_Save_VFP>
 8000b08:	9b01      	ldr	r3, [sp, #4]
 8000b0a:	e7d8      	b.n	8000abe <_Unwind_VRS_Pop+0x16a>
 8000b0c:	a822      	add	r0, sp, #136	; 0x88
 8000b0e:	f000 f859 	bl	8000bc4 <__gnu_Unwind_Restore_VFP_D>
 8000b12:	e7c7      	b.n	8000aa4 <_Unwind_VRS_Pop+0x150>
 8000b14:	2f10      	cmp	r7, #16
 8000b16:	d9ce      	bls.n	8000ab6 <_Unwind_VRS_Pop+0x162>
 8000b18:	3f10      	subs	r7, #16
 8000b1a:	e7cd      	b.n	8000ab8 <_Unwind_VRS_Pop+0x164>
 8000b1c:	f023 0310 	bic.w	r3, r3, #16
 8000b20:	6023      	str	r3, [r4, #0]
 8000b22:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000b26:	9201      	str	r2, [sp, #4]
 8000b28:	f000 f8aa 	bl	8000c80 <__gnu_Unwind_Save_WMMXC>
 8000b2c:	9a01      	ldr	r2, [sp, #4]
 8000b2e:	e72f      	b.n	8000990 <_Unwind_VRS_Pop+0x3c>
 8000b30:	3104      	adds	r1, #4
 8000b32:	63a1      	str	r1, [r4, #56]	; 0x38
 8000b34:	a822      	add	r0, sp, #136	; 0x88
 8000b36:	f000 f83d 	bl	8000bb4 <__gnu_Unwind_Restore_VFP>
 8000b3a:	e7b7      	b.n	8000aac <_Unwind_VRS_Pop+0x158>
 8000b3c:	2f00      	cmp	r7, #0
 8000b3e:	d199      	bne.n	8000a74 <_Unwind_VRS_Pop+0x120>
 8000b40:	4601      	mov	r1, r0
 8000b42:	e7aa      	b.n	8000a9a <_Unwind_VRS_Pop+0x146>
 8000b44:	f023 0308 	bic.w	r3, r3, #8
 8000b48:	6023      	str	r3, [r4, #0]
 8000b4a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000b4e:	f000 f86b 	bl	8000c28 <__gnu_Unwind_Save_WMMXD>
 8000b52:	e742      	b.n	80009da <_Unwind_VRS_Pop+0x86>
 8000b54:	4620      	mov	r0, r4
 8000b56:	f022 0204 	bic.w	r2, r2, #4
 8000b5a:	f840 2bd0 	str.w	r2, [r0], #208
 8000b5e:	9301      	str	r3, [sp, #4]
 8000b60:	f000 f83c 	bl	8000bdc <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b64:	9b01      	ldr	r3, [sp, #4]
 8000b66:	e7af      	b.n	8000ac8 <_Unwind_VRS_Pop+0x174>
 8000b68:	a822      	add	r0, sp, #136	; 0x88
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	f000 f826 	bl	8000bbc <__gnu_Unwind_Save_VFP>
 8000b70:	9b01      	ldr	r3, [sp, #4]
 8000b72:	e7b9      	b.n	8000ae8 <_Unwind_VRS_Pop+0x194>
 8000b74:	f041 0102 	orr.w	r1, r1, #2
 8000b78:	f840 1b48 	str.w	r1, [r0], #72
 8000b7c:	f000 f826 	bl	8000bcc <__gnu_Unwind_Save_VFP_D>
 8000b80:	9b01      	ldr	r3, [sp, #4]
 8000b82:	e79c      	b.n	8000abe <_Unwind_VRS_Pop+0x16a>
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d003      	beq.n	8000b90 <_Unwind_VRS_Pop+0x23c>
 8000b88:	2e0f      	cmp	r6, #15
 8000b8a:	f63f af5f 	bhi.w	8000a4c <_Unwind_VRS_Pop+0xf8>
 8000b8e:	e79f      	b.n	8000ad0 <_Unwind_VRS_Pop+0x17c>
 8000b90:	a822      	add	r0, sp, #136	; 0x88
 8000b92:	9301      	str	r3, [sp, #4]
 8000b94:	f000 f812 	bl	8000bbc <__gnu_Unwind_Save_VFP>
 8000b98:	9b01      	ldr	r3, [sp, #4]
 8000b9a:	e757      	b.n	8000a4c <_Unwind_VRS_Pop+0xf8>

08000b9c <__restore_core_regs>:
 8000b9c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000ba0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000ba4:	469c      	mov	ip, r3
 8000ba6:	46a6      	mov	lr, r4
 8000ba8:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000bac:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000bb0:	46e5      	mov	sp, ip
 8000bb2:	bd00      	pop	{pc}

08000bb4 <__gnu_Unwind_Restore_VFP>:
 8000bb4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__gnu_Unwind_Save_VFP>:
 8000bbc:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__gnu_Unwind_Restore_VFP_D>:
 8000bc4:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__gnu_Unwind_Save_VFP_D>:
 8000bcc:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000bd4:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000bdc:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__gnu_Unwind_Restore_WMMXD>:
 8000be4:	ecf0 0102 	ldfe	f0, [r0], #8
 8000be8:	ecf0 1102 	ldfe	f1, [r0], #8
 8000bec:	ecf0 2102 	ldfe	f2, [r0], #8
 8000bf0:	ecf0 3102 	ldfe	f3, [r0], #8
 8000bf4:	ecf0 4102 	ldfe	f4, [r0], #8
 8000bf8:	ecf0 5102 	ldfe	f5, [r0], #8
 8000bfc:	ecf0 6102 	ldfe	f6, [r0], #8
 8000c00:	ecf0 7102 	ldfe	f7, [r0], #8
 8000c04:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c08:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c0c:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c10:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c14:	ecf0 c102 	ldfp	f4, [r0], #8
 8000c18:	ecf0 d102 	ldfp	f5, [r0], #8
 8000c1c:	ecf0 e102 	ldfp	f6, [r0], #8
 8000c20:	ecf0 f102 	ldfp	f7, [r0], #8
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__gnu_Unwind_Save_WMMXD>:
 8000c28:	ece0 0102 	stfe	f0, [r0], #8
 8000c2c:	ece0 1102 	stfe	f1, [r0], #8
 8000c30:	ece0 2102 	stfe	f2, [r0], #8
 8000c34:	ece0 3102 	stfe	f3, [r0], #8
 8000c38:	ece0 4102 	stfe	f4, [r0], #8
 8000c3c:	ece0 5102 	stfe	f5, [r0], #8
 8000c40:	ece0 6102 	stfe	f6, [r0], #8
 8000c44:	ece0 7102 	stfe	f7, [r0], #8
 8000c48:	ece0 8102 	stfp	f0, [r0], #8
 8000c4c:	ece0 9102 	stfp	f1, [r0], #8
 8000c50:	ece0 a102 	stfp	f2, [r0], #8
 8000c54:	ece0 b102 	stfp	f3, [r0], #8
 8000c58:	ece0 c102 	stfp	f4, [r0], #8
 8000c5c:	ece0 d102 	stfp	f5, [r0], #8
 8000c60:	ece0 e102 	stfp	f6, [r0], #8
 8000c64:	ece0 f102 	stfp	f7, [r0], #8
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__gnu_Unwind_Restore_WMMXC>:
 8000c6c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c70:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c74:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c78:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__gnu_Unwind_Save_WMMXC>:
 8000c80:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c84:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000c88:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000c8c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <_Unwind_RaiseException>:
 8000c94:	46ec      	mov	ip, sp
 8000c96:	b500      	push	{lr}
 8000c98:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c9c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ca8:	a901      	add	r1, sp, #4
 8000caa:	f7ff fbf3 	bl	8000494 <__gnu_Unwind_RaiseException>
 8000cae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cb2:	b012      	add	sp, #72	; 0x48
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <_Unwind_Resume>:
 8000cb8:	46ec      	mov	ip, sp
 8000cba:	b500      	push	{lr}
 8000cbc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cc0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ccc:	a901      	add	r1, sp, #4
 8000cce:	f7ff fc1b 	bl	8000508 <__gnu_Unwind_Resume>
 8000cd2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cd6:	b012      	add	sp, #72	; 0x48
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <_Unwind_Resume_or_Rethrow>:
 8000cdc:	46ec      	mov	ip, sp
 8000cde:	b500      	push	{lr}
 8000ce0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ce4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cf0:	a901      	add	r1, sp, #4
 8000cf2:	f7ff fc2b 	bl	800054c <__gnu_Unwind_Resume_or_Rethrow>
 8000cf6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cfa:	b012      	add	sp, #72	; 0x48
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <_Unwind_ForcedUnwind>:
 8000d00:	46ec      	mov	ip, sp
 8000d02:	b500      	push	{lr}
 8000d04:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d08:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d14:	ab01      	add	r3, sp, #4
 8000d16:	f7ff fbed 	bl	80004f4 <__gnu_Unwind_ForcedUnwind>
 8000d1a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d1e:	b012      	add	sp, #72	; 0x48
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <_Unwind_Backtrace>:
 8000d24:	46ec      	mov	ip, sp
 8000d26:	b500      	push	{lr}
 8000d28:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d2c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d38:	aa01      	add	r2, sp, #4
 8000d3a:	f7ff fc65 	bl	8000608 <__gnu_Unwind_Backtrace>
 8000d3e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d42:	b012      	add	sp, #72	; 0x48
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <next_unwind_byte>:
 8000d48:	7a02      	ldrb	r2, [r0, #8]
 8000d4a:	b91a      	cbnz	r2, 8000d54 <next_unwind_byte+0xc>
 8000d4c:	7a43      	ldrb	r3, [r0, #9]
 8000d4e:	b943      	cbnz	r3, 8000d62 <next_unwind_byte+0x1a>
 8000d50:	20b0      	movs	r0, #176	; 0xb0
 8000d52:	4770      	bx	lr
 8000d54:	6803      	ldr	r3, [r0, #0]
 8000d56:	3a01      	subs	r2, #1
 8000d58:	7202      	strb	r2, [r0, #8]
 8000d5a:	021a      	lsls	r2, r3, #8
 8000d5c:	6002      	str	r2, [r0, #0]
 8000d5e:	0e18      	lsrs	r0, r3, #24
 8000d60:	4770      	bx	lr
 8000d62:	6842      	ldr	r2, [r0, #4]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	b410      	push	{r4}
 8000d68:	7243      	strb	r3, [r0, #9]
 8000d6a:	6813      	ldr	r3, [r2, #0]
 8000d6c:	2103      	movs	r1, #3
 8000d6e:	1d14      	adds	r4, r2, #4
 8000d70:	7201      	strb	r1, [r0, #8]
 8000d72:	021a      	lsls	r2, r3, #8
 8000d74:	6044      	str	r4, [r0, #4]
 8000d76:	6002      	str	r2, [r0, #0]
 8000d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d7c:	0e18      	lsrs	r0, r3, #24
 8000d7e:	4770      	bx	lr

08000d80 <_Unwind_GetGR.constprop.0>:
 8000d80:	b500      	push	{lr}
 8000d82:	b085      	sub	sp, #20
 8000d84:	aa03      	add	r2, sp, #12
 8000d86:	2300      	movs	r3, #0
 8000d88:	9200      	str	r2, [sp, #0]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	220c      	movs	r2, #12
 8000d8e:	f7ff fbed 	bl	800056c <_Unwind_VRS_Get>
 8000d92:	9803      	ldr	r0, [sp, #12]
 8000d94:	b005      	add	sp, #20
 8000d96:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d9a:	bf00      	nop

08000d9c <unwind_UCB_from_context>:
 8000d9c:	e7f0      	b.n	8000d80 <_Unwind_GetGR.constprop.0>
 8000d9e:	bf00      	nop

08000da0 <__gnu_unwind_execute>:
 8000da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000da4:	4606      	mov	r6, r0
 8000da6:	b085      	sub	sp, #20
 8000da8:	460f      	mov	r7, r1
 8000daa:	f04f 0800 	mov.w	r8, #0
 8000dae:	4638      	mov	r0, r7
 8000db0:	f7ff ffca 	bl	8000d48 <next_unwind_byte>
 8000db4:	28b0      	cmp	r0, #176	; 0xb0
 8000db6:	4604      	mov	r4, r0
 8000db8:	d023      	beq.n	8000e02 <__gnu_unwind_execute+0x62>
 8000dba:	0605      	lsls	r5, r0, #24
 8000dbc:	d427      	bmi.n	8000e0e <__gnu_unwind_execute+0x6e>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f10d 090c 	add.w	r9, sp, #12
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	0085      	lsls	r5, r0, #2
 8000dc8:	220d      	movs	r2, #13
 8000dca:	f8cd 9000 	str.w	r9, [sp]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	f7ff fbcc 	bl	800056c <_Unwind_VRS_Get>
 8000dd4:	b2ed      	uxtb	r5, r5
 8000dd6:	9b03      	ldr	r3, [sp, #12]
 8000dd8:	f8cd 9000 	str.w	r9, [sp]
 8000ddc:	0660      	lsls	r0, r4, #25
 8000dde:	f105 0504 	add.w	r5, r5, #4
 8000de2:	bf4c      	ite	mi
 8000de4:	1b5d      	submi	r5, r3, r5
 8000de6:	18ed      	addpl	r5, r5, r3
 8000de8:	2300      	movs	r3, #0
 8000dea:	4619      	mov	r1, r3
 8000dec:	220d      	movs	r2, #13
 8000dee:	4630      	mov	r0, r6
 8000df0:	9503      	str	r5, [sp, #12]
 8000df2:	f7ff fbe1 	bl	80005b8 <_Unwind_VRS_Set>
 8000df6:	4638      	mov	r0, r7
 8000df8:	f7ff ffa6 	bl	8000d48 <next_unwind_byte>
 8000dfc:	28b0      	cmp	r0, #176	; 0xb0
 8000dfe:	4604      	mov	r4, r0
 8000e00:	d1db      	bne.n	8000dba <__gnu_unwind_execute+0x1a>
 8000e02:	f1b8 0f00 	cmp.w	r8, #0
 8000e06:	f000 8095 	beq.w	8000f34 <__gnu_unwind_execute+0x194>
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	e01c      	b.n	8000e48 <__gnu_unwind_execute+0xa8>
 8000e0e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000e12:	2b80      	cmp	r3, #128	; 0x80
 8000e14:	d05d      	beq.n	8000ed2 <__gnu_unwind_execute+0x132>
 8000e16:	2b90      	cmp	r3, #144	; 0x90
 8000e18:	d019      	beq.n	8000e4e <__gnu_unwind_execute+0xae>
 8000e1a:	2ba0      	cmp	r3, #160	; 0xa0
 8000e1c:	d02c      	beq.n	8000e78 <__gnu_unwind_execute+0xd8>
 8000e1e:	2bb0      	cmp	r3, #176	; 0xb0
 8000e20:	d03f      	beq.n	8000ea2 <__gnu_unwind_execute+0x102>
 8000e22:	2bc0      	cmp	r3, #192	; 0xc0
 8000e24:	d06c      	beq.n	8000f00 <__gnu_unwind_execute+0x160>
 8000e26:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e2a:	2bd0      	cmp	r3, #208	; 0xd0
 8000e2c:	d10b      	bne.n	8000e46 <__gnu_unwind_execute+0xa6>
 8000e2e:	f000 0207 	and.w	r2, r0, #7
 8000e32:	3201      	adds	r2, #1
 8000e34:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e38:	2305      	movs	r3, #5
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	f7ff fd89 	bl	8000954 <_Unwind_VRS_Pop>
 8000e42:	2800      	cmp	r0, #0
 8000e44:	d0b3      	beq.n	8000dae <__gnu_unwind_execute+0xe>
 8000e46:	2009      	movs	r0, #9
 8000e48:	b005      	add	sp, #20
 8000e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e4e:	f000 030d 	and.w	r3, r0, #13
 8000e52:	2b0d      	cmp	r3, #13
 8000e54:	d0f7      	beq.n	8000e46 <__gnu_unwind_execute+0xa6>
 8000e56:	ad03      	add	r5, sp, #12
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f000 020f 	and.w	r2, r0, #15
 8000e5e:	4619      	mov	r1, r3
 8000e60:	9500      	str	r5, [sp, #0]
 8000e62:	4630      	mov	r0, r6
 8000e64:	f7ff fb82 	bl	800056c <_Unwind_VRS_Get>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	9500      	str	r5, [sp, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	220d      	movs	r2, #13
 8000e70:	4630      	mov	r0, r6
 8000e72:	f7ff fba1 	bl	80005b8 <_Unwind_VRS_Set>
 8000e76:	e79a      	b.n	8000dae <__gnu_unwind_execute+0xe>
 8000e78:	43c2      	mvns	r2, r0
 8000e7a:	f002 0307 	and.w	r3, r2, #7
 8000e7e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000e82:	411a      	asrs	r2, r3
 8000e84:	0701      	lsls	r1, r0, #28
 8000e86:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	bf48      	it	mi
 8000e90:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000e94:	4619      	mov	r1, r3
 8000e96:	4630      	mov	r0, r6
 8000e98:	f7ff fd5c 	bl	8000954 <_Unwind_VRS_Pop>
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	d1d2      	bne.n	8000e46 <__gnu_unwind_execute+0xa6>
 8000ea0:	e785      	b.n	8000dae <__gnu_unwind_execute+0xe>
 8000ea2:	28b1      	cmp	r0, #177	; 0xb1
 8000ea4:	d057      	beq.n	8000f56 <__gnu_unwind_execute+0x1b6>
 8000ea6:	28b2      	cmp	r0, #178	; 0xb2
 8000ea8:	d068      	beq.n	8000f7c <__gnu_unwind_execute+0x1dc>
 8000eaa:	28b3      	cmp	r0, #179	; 0xb3
 8000eac:	f000 8095 	beq.w	8000fda <__gnu_unwind_execute+0x23a>
 8000eb0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000eb4:	2bb4      	cmp	r3, #180	; 0xb4
 8000eb6:	d0c6      	beq.n	8000e46 <__gnu_unwind_execute+0xa6>
 8000eb8:	f000 0207 	and.w	r2, r0, #7
 8000ebc:	3201      	adds	r2, #1
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	f7ff fd44 	bl	8000954 <_Unwind_VRS_Pop>
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d1ba      	bne.n	8000e46 <__gnu_unwind_execute+0xa6>
 8000ed0:	e76d      	b.n	8000dae <__gnu_unwind_execute+0xe>
 8000ed2:	4638      	mov	r0, r7
 8000ed4:	f7ff ff38 	bl	8000d48 <next_unwind_byte>
 8000ed8:	0224      	lsls	r4, r4, #8
 8000eda:	4304      	orrs	r4, r0
 8000edc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8000ee0:	d0b1      	beq.n	8000e46 <__gnu_unwind_execute+0xa6>
 8000ee2:	0124      	lsls	r4, r4, #4
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	b2a2      	uxth	r2, r4
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4630      	mov	r0, r6
 8000eec:	f7ff fd32 	bl	8000954 <_Unwind_VRS_Pop>
 8000ef0:	2800      	cmp	r0, #0
 8000ef2:	d1a8      	bne.n	8000e46 <__gnu_unwind_execute+0xa6>
 8000ef4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000ef8:	bf18      	it	ne
 8000efa:	f04f 0801 	movne.w	r8, #1
 8000efe:	e756      	b.n	8000dae <__gnu_unwind_execute+0xe>
 8000f00:	28c6      	cmp	r0, #198	; 0xc6
 8000f02:	d07d      	beq.n	8001000 <__gnu_unwind_execute+0x260>
 8000f04:	28c7      	cmp	r0, #199	; 0xc7
 8000f06:	f000 8086 	beq.w	8001016 <__gnu_unwind_execute+0x276>
 8000f0a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f0e:	2bc0      	cmp	r3, #192	; 0xc0
 8000f10:	f000 8094 	beq.w	800103c <__gnu_unwind_execute+0x29c>
 8000f14:	28c8      	cmp	r0, #200	; 0xc8
 8000f16:	f000 809f 	beq.w	8001058 <__gnu_unwind_execute+0x2b8>
 8000f1a:	28c9      	cmp	r0, #201	; 0xc9
 8000f1c:	d193      	bne.n	8000e46 <__gnu_unwind_execute+0xa6>
 8000f1e:	4638      	mov	r0, r7
 8000f20:	f7ff ff12 	bl	8000d48 <next_unwind_byte>
 8000f24:	0302      	lsls	r2, r0, #12
 8000f26:	f000 000f 	and.w	r0, r0, #15
 8000f2a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000f2e:	3001      	adds	r0, #1
 8000f30:	4302      	orrs	r2, r0
 8000f32:	e781      	b.n	8000e38 <__gnu_unwind_execute+0x98>
 8000f34:	ac03      	add	r4, sp, #12
 8000f36:	4643      	mov	r3, r8
 8000f38:	220e      	movs	r2, #14
 8000f3a:	4641      	mov	r1, r8
 8000f3c:	9400      	str	r4, [sp, #0]
 8000f3e:	4630      	mov	r0, r6
 8000f40:	f7ff fb14 	bl	800056c <_Unwind_VRS_Get>
 8000f44:	9400      	str	r4, [sp, #0]
 8000f46:	4630      	mov	r0, r6
 8000f48:	4643      	mov	r3, r8
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	4641      	mov	r1, r8
 8000f4e:	f7ff fb33 	bl	80005b8 <_Unwind_VRS_Set>
 8000f52:	4640      	mov	r0, r8
 8000f54:	e778      	b.n	8000e48 <__gnu_unwind_execute+0xa8>
 8000f56:	4638      	mov	r0, r7
 8000f58:	f7ff fef6 	bl	8000d48 <next_unwind_byte>
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	f43f af72 	beq.w	8000e46 <__gnu_unwind_execute+0xa6>
 8000f62:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f66:	f47f af6e 	bne.w	8000e46 <__gnu_unwind_execute+0xa6>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4630      	mov	r0, r6
 8000f70:	f7ff fcf0 	bl	8000954 <_Unwind_VRS_Pop>
 8000f74:	2800      	cmp	r0, #0
 8000f76:	f47f af66 	bne.w	8000e46 <__gnu_unwind_execute+0xa6>
 8000f7a:	e718      	b.n	8000dae <__gnu_unwind_execute+0xe>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f10d 090c 	add.w	r9, sp, #12
 8000f82:	220d      	movs	r2, #13
 8000f84:	4619      	mov	r1, r3
 8000f86:	f8cd 9000 	str.w	r9, [sp]
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f7ff faee 	bl	800056c <_Unwind_VRS_Get>
 8000f90:	4638      	mov	r0, r7
 8000f92:	f7ff fed9 	bl	8000d48 <next_unwind_byte>
 8000f96:	0602      	lsls	r2, r0, #24
 8000f98:	f04f 0402 	mov.w	r4, #2
 8000f9c:	d50c      	bpl.n	8000fb8 <__gnu_unwind_execute+0x218>
 8000f9e:	9b03      	ldr	r3, [sp, #12]
 8000fa0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000fa4:	40a0      	lsls	r0, r4
 8000fa6:	4403      	add	r3, r0
 8000fa8:	4638      	mov	r0, r7
 8000faa:	9303      	str	r3, [sp, #12]
 8000fac:	f7ff fecc 	bl	8000d48 <next_unwind_byte>
 8000fb0:	0603      	lsls	r3, r0, #24
 8000fb2:	f104 0407 	add.w	r4, r4, #7
 8000fb6:	d4f2      	bmi.n	8000f9e <__gnu_unwind_execute+0x1fe>
 8000fb8:	9b03      	ldr	r3, [sp, #12]
 8000fba:	f8cd 9000 	str.w	r9, [sp]
 8000fbe:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8000fc2:	40a2      	lsls	r2, r4
 8000fc4:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8000fc8:	2300      	movs	r3, #0
 8000fca:	4414      	add	r4, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	220d      	movs	r2, #13
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	9403      	str	r4, [sp, #12]
 8000fd4:	f7ff faf0 	bl	80005b8 <_Unwind_VRS_Set>
 8000fd8:	e6e9      	b.n	8000dae <__gnu_unwind_execute+0xe>
 8000fda:	4638      	mov	r0, r7
 8000fdc:	f7ff feb4 	bl	8000d48 <next_unwind_byte>
 8000fe0:	0301      	lsls	r1, r0, #12
 8000fe2:	f000 000f 	and.w	r0, r0, #15
 8000fe6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000fea:	1c42      	adds	r2, r0, #1
 8000fec:	2301      	movs	r3, #1
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fcae 	bl	8000954 <_Unwind_VRS_Pop>
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	f47f af24 	bne.w	8000e46 <__gnu_unwind_execute+0xa6>
 8000ffe:	e6d6      	b.n	8000dae <__gnu_unwind_execute+0xe>
 8001000:	4638      	mov	r0, r7
 8001002:	f7ff fea1 	bl	8000d48 <next_unwind_byte>
 8001006:	0301      	lsls	r1, r0, #12
 8001008:	f000 000f 	and.w	r0, r0, #15
 800100c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001010:	1c42      	adds	r2, r0, #1
 8001012:	2303      	movs	r3, #3
 8001014:	e7eb      	b.n	8000fee <__gnu_unwind_execute+0x24e>
 8001016:	4638      	mov	r0, r7
 8001018:	f7ff fe96 	bl	8000d48 <next_unwind_byte>
 800101c:	2800      	cmp	r0, #0
 800101e:	f43f af12 	beq.w	8000e46 <__gnu_unwind_execute+0xa6>
 8001022:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001026:	f47f af0e 	bne.w	8000e46 <__gnu_unwind_execute+0xa6>
 800102a:	4602      	mov	r2, r0
 800102c:	2104      	movs	r1, #4
 800102e:	4630      	mov	r0, r6
 8001030:	f7ff fc90 	bl	8000954 <_Unwind_VRS_Pop>
 8001034:	2800      	cmp	r0, #0
 8001036:	f47f af06 	bne.w	8000e46 <__gnu_unwind_execute+0xa6>
 800103a:	e6b8      	b.n	8000dae <__gnu_unwind_execute+0xe>
 800103c:	f000 020f 	and.w	r2, r0, #15
 8001040:	3201      	adds	r2, #1
 8001042:	2303      	movs	r3, #3
 8001044:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001048:	4619      	mov	r1, r3
 800104a:	4630      	mov	r0, r6
 800104c:	f7ff fc82 	bl	8000954 <_Unwind_VRS_Pop>
 8001050:	2800      	cmp	r0, #0
 8001052:	f47f aef8 	bne.w	8000e46 <__gnu_unwind_execute+0xa6>
 8001056:	e6aa      	b.n	8000dae <__gnu_unwind_execute+0xe>
 8001058:	4638      	mov	r0, r7
 800105a:	f7ff fe75 	bl	8000d48 <next_unwind_byte>
 800105e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001062:	f000 030f 	and.w	r3, r0, #15
 8001066:	3210      	adds	r2, #16
 8001068:	3301      	adds	r3, #1
 800106a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800106e:	e6e3      	b.n	8000e38 <__gnu_unwind_execute+0x98>

08001070 <__gnu_unwind_frame>:
 8001070:	b510      	push	{r4, lr}
 8001072:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001074:	b084      	sub	sp, #16
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	2003      	movs	r0, #3
 800107a:	f88d 000c 	strb.w	r0, [sp, #12]
 800107e:	79dc      	ldrb	r4, [r3, #7]
 8001080:	f88d 400d 	strb.w	r4, [sp, #13]
 8001084:	0212      	lsls	r2, r2, #8
 8001086:	3308      	adds	r3, #8
 8001088:	4608      	mov	r0, r1
 800108a:	a901      	add	r1, sp, #4
 800108c:	9201      	str	r2, [sp, #4]
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	f7ff fe86 	bl	8000da0 <__gnu_unwind_execute>
 8001094:	b004      	add	sp, #16
 8001096:	bd10      	pop	{r4, pc}

08001098 <_Unwind_GetRegionStart>:
 8001098:	b508      	push	{r3, lr}
 800109a:	f7ff fe7f 	bl	8000d9c <unwind_UCB_from_context>
 800109e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80010a0:	bd08      	pop	{r3, pc}
 80010a2:	bf00      	nop

080010a4 <_Unwind_GetLanguageSpecificData>:
 80010a4:	b508      	push	{r3, lr}
 80010a6:	f7ff fe79 	bl	8000d9c <unwind_UCB_from_context>
 80010aa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80010ac:	79c3      	ldrb	r3, [r0, #7]
 80010ae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80010b2:	3008      	adds	r0, #8
 80010b4:	bd08      	pop	{r3, pc}
 80010b6:	bf00      	nop

080010b8 <_Unwind_GetTextRelBase>:
 80010b8:	b508      	push	{r3, lr}
 80010ba:	f002 ff84 	bl	8003fc6 <abort>
 80010be:	bf00      	nop

080010c0 <_Unwind_GetDataRelBase>:
 80010c0:	b508      	push	{r3, lr}
 80010c2:	f7ff fff9 	bl	80010b8 <_Unwind_GetTextRelBase>
 80010c6:	bf00      	nop

080010c8 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_Init+0x20>)
{
 80010ca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010cc:	6813      	ldr	r3, [r2, #0]
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 fb95 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	2000      	movs	r0, #0
 80010dc:	f002 fe36 	bl	8003d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f002 fdf6 	bl	8003cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80010e4:	2000      	movs	r0, #0
 80010e6:	bd08      	pop	{r3, pc}
 80010e8:	40022000 	.word	0x40022000

080010ec <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010ec:	4a03      	ldr	r2, [pc, #12]	; (80010fc <HAL_IncTick+0x10>)
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <HAL_IncTick+0x14>)
 80010f0:	6811      	ldr	r1, [r2, #0]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	440b      	add	r3, r1
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000e68 	.word	0x20000e68
 8001100:	20000000 	.word	0x20000000

08001104 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001104:	4b01      	ldr	r3, [pc, #4]	; (800110c <HAL_GetTick+0x8>)
 8001106:	6818      	ldr	r0, [r3, #0]
}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000e68 	.word	0x20000e68

08001110 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001110:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001112:	6803      	ldr	r3, [r0, #0]
{
 8001114:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001116:	6898      	ldr	r0, [r3, #8]
 8001118:	f000 0003 	and.w	r0, r0, #3
 800111c:	2801      	cmp	r0, #1
 800111e:	d001      	beq.n	8001124 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001120:	2000      	movs	r0, #0
 8001122:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	07d2      	lsls	r2, r2, #31
 8001128:	d5fa      	bpl.n	8001120 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	f002 020d 	and.w	r2, r2, #13
 8001130:	2a01      	cmp	r2, #1
 8001132:	d11b      	bne.n	800116c <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	f042 0202 	orr.w	r2, r2, #2
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	2203      	movs	r2, #3
 800113e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001140:	f7ff ffe0 	bl	8001104 <HAL_GetTick>
 8001144:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	07db      	lsls	r3, r3, #31
 800114c:	d5e8      	bpl.n	8001120 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800114e:	f7ff ffd9 	bl	8001104 <HAL_GetTick>
 8001152:	1b40      	subs	r0, r0, r5
 8001154:	2802      	cmp	r0, #2
 8001156:	d9f6      	bls.n	8001146 <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001158:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800115a:	f043 0310 	orr.w	r3, r3, #16
 800115e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001160:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8001168:	2001      	movs	r0, #1
 800116a:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800116c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800116e:	f043 0310 	orr.w	r3, r3, #16
 8001172:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001174:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800117c:	bd38      	pop	{r3, r4, r5, pc}
	...

08001180 <HAL_ADC_Init>:
{
 8001180:	b570      	push	{r4, r5, r6, lr}
 8001182:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8001188:	4604      	mov	r4, r0
 800118a:	2800      	cmp	r0, #0
 800118c:	f000 8084 	beq.w	8001298 <HAL_ADC_Init+0x118>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001190:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001192:	06d2      	lsls	r2, r2, #27
 8001194:	d462      	bmi.n	800125c <HAL_ADC_Init+0xdc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001196:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001198:	2b00      	cmp	r3, #0
 800119a:	d02d      	beq.n	80011f8 <HAL_ADC_Init+0x78>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800119c:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	00d1      	lsls	r1, r2, #3
 80011a4:	d502      	bpl.n	80011ac <HAL_ADC_Init+0x2c>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80011a6:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80011a8:	009a      	lsls	r2, r3, #2
 80011aa:	d50a      	bpl.n	80011c2 <HAL_ADC_Init+0x42>
      ADC_STATE_CLR_SET(hadc->State,
 80011ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011ae:	f023 0312 	bic.w	r3, r3, #18
 80011b2:	f043 0310 	orr.w	r3, r3, #16
 80011b6:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80011c0:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011c4:	06db      	lsls	r3, r3, #27
 80011c6:	d461      	bmi.n	800128c <HAL_ADC_Init+0x10c>
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d15f      	bne.n	800128c <HAL_ADC_Init+0x10c>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	689d      	ldr	r5, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80011d0:	f015 0504 	ands.w	r5, r5, #4
 80011d4:	d15a      	bne.n	800128c <HAL_ADC_Init+0x10c>
    ADC_STATE_CLR_SET(hadc->State,
 80011d6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80011d8:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80011dc:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80011e4:	6462      	str	r2, [r4, #68]	; 0x44
 80011e6:	4a6b      	ldr	r2, [pc, #428]	; (8001394 <HAL_ADC_Init+0x214>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011e8:	d003      	beq.n	80011f2 <HAL_ADC_Init+0x72>
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d156      	bne.n	800129c <HAL_ADC_Init+0x11c>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011f2:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011f4:	4968      	ldr	r1, [pc, #416]	; (8001398 <HAL_ADC_Init+0x218>)
 80011f6:	e057      	b.n	80012a8 <HAL_ADC_Init+0x128>
      ADC_CLEAR_ERRORCODE(hadc);
 80011f8:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 80011fa:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 80011fc:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 80011fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8001202:	f002 fb33 	bl	800386c <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	00de      	lsls	r6, r3, #3
 800120c:	d4c6      	bmi.n	800119c <HAL_ADC_Init+0x1c>
        tmp_hal_status = ADC_Disable(hadc);
 800120e:	4620      	mov	r0, r4
 8001210:	f7ff ff7e 	bl	8001110 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001214:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001216:	06d5      	lsls	r5, r2, #27
 8001218:	d4c1      	bmi.n	800119e <HAL_ADC_Init+0x1e>
 800121a:	2800      	cmp	r0, #0
 800121c:	d1bf      	bne.n	800119e <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 800121e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001220:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001224:	f023 0302 	bic.w	r3, r3, #2
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001236:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800123e:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001240:	4b56      	ldr	r3, [pc, #344]	; (800139c <HAL_ADC_Init+0x21c>)
 8001242:	4a57      	ldr	r2, [pc, #348]	; (80013a0 <HAL_ADC_Init+0x220>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	fbb3 f2f2 	udiv	r2, r3, r2
 800124a:	230a      	movs	r3, #10
 800124c:	4353      	muls	r3, r2
            wait_loop_index--;
 800124e:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8001250:	9b00      	ldr	r3, [sp, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0a2      	beq.n	800119c <HAL_ADC_Init+0x1c>
            wait_loop_index--;
 8001256:	9b00      	ldr	r3, [sp, #0]
 8001258:	3b01      	subs	r3, #1
 800125a:	e7f8      	b.n	800124e <HAL_ADC_Init+0xce>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800125c:	4618      	mov	r0, r3
 800125e:	e7b0      	b.n	80011c2 <HAL_ADC_Init+0x42>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001260:	4293      	cmp	r3, r2
 8001262:	bf0c      	ite	eq
 8001264:	9101      	streq	r1, [sp, #4]
 8001266:	9001      	strne	r0, [sp, #4]
 8001268:	e01d      	b.n	80012a6 <HAL_ADC_Init+0x126>
        ADC_STATE_CLR_SET(hadc->State,
 800126a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800126c:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8001270:	f041 0120 	orr.w	r1, r1, #32
 8001274:	6461      	str	r1, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001276:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001278:	f041 0101 	orr.w	r1, r1, #1
 800127c:	64a1      	str	r1, [r4, #72]	; 0x48
 800127e:	e043      	b.n	8001308 <HAL_ADC_Init+0x188>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001280:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001284:	e055      	b.n	8001332 <HAL_ADC_Init+0x1b2>
 8001286:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 800128a:	e052      	b.n	8001332 <HAL_ADC_Init+0x1b2>
    ADC_STATE_CLR_SET(hadc->State,
 800128c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800128e:	f023 0312 	bic.w	r3, r3, #18
 8001292:	f043 0310 	orr.w	r3, r3, #16
 8001296:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8001298:	2001      	movs	r0, #1
 800129a:	e079      	b.n	8001390 <HAL_ADC_Init+0x210>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800129c:	4941      	ldr	r1, [pc, #260]	; (80013a4 <HAL_ADC_Init+0x224>)
 800129e:	4a42      	ldr	r2, [pc, #264]	; (80013a8 <HAL_ADC_Init+0x228>)
 80012a0:	428b      	cmp	r3, r1
 80012a2:	d1dd      	bne.n	8001260 <HAL_ADC_Init+0xe0>
 80012a4:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012a6:	4941      	ldr	r1, [pc, #260]	; (80013ac <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	f002 0203 	and.w	r2, r2, #3
 80012ae:	2a01      	cmp	r2, #1
 80012b0:	d102      	bne.n	80012b8 <HAL_ADC_Init+0x138>
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	07d6      	lsls	r6, r2, #31
 80012b6:	d40f      	bmi.n	80012d8 <HAL_ADC_Init+0x158>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012b8:	9a01      	ldr	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012ba:	b13a      	cbz	r2, 80012cc <HAL_ADC_Init+0x14c>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012bc:	6896      	ldr	r6, [r2, #8]
 80012be:	f006 0603 	and.w	r6, r6, #3
 80012c2:	2e01      	cmp	r6, #1
 80012c4:	d102      	bne.n	80012cc <HAL_ADC_Init+0x14c>
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	07d2      	lsls	r2, r2, #31
 80012ca:	d405      	bmi.n	80012d8 <HAL_ADC_Init+0x158>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80012cc:	688a      	ldr	r2, [r1, #8]
 80012ce:	6866      	ldr	r6, [r4, #4]
 80012d0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80012d4:	4332      	orrs	r2, r6
 80012d6:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80012d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80012da:	68a6      	ldr	r6, [r4, #8]
 80012dc:	69e1      	ldr	r1, [r4, #28]
 80012de:	2a01      	cmp	r2, #1
 80012e0:	68e2      	ldr	r2, [r4, #12]
 80012e2:	ea42 0206 	orr.w	r2, r2, r6
 80012e6:	bf18      	it	ne
 80012e8:	f44f 5580 	movne.w	r5, #4096	; 0x1000
 80012ec:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80012f0:	432a      	orrs	r2, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80012f4:	2d01      	cmp	r5, #1
 80012f6:	d107      	bne.n	8001308 <HAL_ADC_Init+0x188>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012f8:	2900      	cmp	r1, #0
 80012fa:	d1b6      	bne.n	800126a <HAL_ADC_Init+0xea>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80012fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80012fe:	3901      	subs	r1, #1
 8001300:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8001304:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001308:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800130a:	2901      	cmp	r1, #1
 800130c:	d014      	beq.n	8001338 <HAL_ADC_Init+0x1b8>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800130e:	4d25      	ldr	r5, [pc, #148]	; (80013a4 <HAL_ADC_Init+0x224>)
 8001310:	42ab      	cmp	r3, r5
 8001312:	d003      	beq.n	800131c <HAL_ADC_Init+0x19c>
 8001314:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8001318:	42ab      	cmp	r3, r5
 800131a:	d10a      	bne.n	8001332 <HAL_ADC_Init+0x1b2>
 800131c:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 8001320:	d0ae      	beq.n	8001280 <HAL_ADC_Init+0x100>
 8001322:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001326:	d0ae      	beq.n	8001286 <HAL_ADC_Init+0x106>
 8001328:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 800132c:	bf08      	it	eq
 800132e:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8001332:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001334:	432a      	orrs	r2, r5
 8001336:	430a      	orrs	r2, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001338:	6899      	ldr	r1, [r3, #8]
 800133a:	f011 0f0c 	tst.w	r1, #12
 800133e:	d10b      	bne.n	8001358 <HAL_ADC_Init+0x1d8>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001340:	68d9      	ldr	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001342:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001344:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001348:	f021 0102 	bic.w	r1, r1, #2
 800134c:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800134e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001350:	0049      	lsls	r1, r1, #1
 8001352:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 8001356:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8001358:	68dd      	ldr	r5, [r3, #12]
 800135a:	4915      	ldr	r1, [pc, #84]	; (80013b0 <HAL_ADC_Init+0x230>)
 800135c:	4029      	ands	r1, r5
 800135e:	430a      	orrs	r2, r1
 8001360:	60da      	str	r2, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001362:	6922      	ldr	r2, [r4, #16]
 8001364:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001366:	bf05      	ittet	eq
 8001368:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 800136a:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800136c:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800136e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001372:	bf06      	itte	eq
 8001374:	f021 010f 	biceq.w	r1, r1, #15
 8001378:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800137a:	f022 020f 	bicne.w	r2, r2, #15
 800137e:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8001380:	2300      	movs	r3, #0
 8001382:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8001384:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001386:	f023 0303 	bic.w	r3, r3, #3
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8001390:	b016      	add	sp, #88	; 0x58
 8001392:	bd70      	pop	{r4, r5, r6, pc}
 8001394:	50000100 	.word	0x50000100
 8001398:	50000300 	.word	0x50000300
 800139c:	20000008 	.word	0x20000008
 80013a0:	000f4240 	.word	0x000f4240
 80013a4:	50000400 	.word	0x50000400
 80013a8:	50000500 	.word	0x50000500
 80013ac:	50000700 	.word	0x50000700
 80013b0:	fff0c007 	.word	0xfff0c007

080013b4 <HAL_ADC_ConfigChannel>:
{
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b6:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 80013bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80013c0:	2b01      	cmp	r3, #1
{
 80013c2:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80013c4:	f000 8163 	beq.w	800168e <HAL_ADC_ConfigChannel+0x2da>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013c8:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80013ca:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013cc:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 80013ce:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013d0:	0752      	lsls	r2, r2, #29
  __HAL_LOCK(hadc);
 80013d2:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013d6:	f100 8155 	bmi.w	8001684 <HAL_ADC_ConfigChannel+0x2d0>
    if (sConfig->Rank < 5U)
 80013da:	6848      	ldr	r0, [r1, #4]
 80013dc:	680c      	ldr	r4, [r1, #0]
 80013de:	2804      	cmp	r0, #4
 80013e0:	f04f 0206 	mov.w	r2, #6
 80013e4:	d831      	bhi.n	800144a <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 80013e6:	4342      	muls	r2, r0
 80013e8:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80013ea:	201f      	movs	r0, #31
 80013ec:	4090      	lsls	r0, r2
 80013ee:	ea27 0000 	bic.w	r0, r7, r0
 80013f2:	fa04 f202 	lsl.w	r2, r4, r2
 80013f6:	4302      	orrs	r2, r0
 80013f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	f012 0f0c 	tst.w	r2, #12
 8001400:	d162      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001402:	2c09      	cmp	r4, #9
 8001404:	ea4f 0244 	mov.w	r2, r4, lsl #1
 8001408:	688f      	ldr	r7, [r1, #8]
 800140a:	d946      	bls.n	800149a <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800140c:	4422      	add	r2, r4
 800140e:	6998      	ldr	r0, [r3, #24]
 8001410:	3a1e      	subs	r2, #30
 8001412:	f04f 0e07 	mov.w	lr, #7
 8001416:	fa0e fe02 	lsl.w	lr, lr, r2
 800141a:	ea20 000e 	bic.w	r0, r0, lr
 800141e:	fa07 f202 	lsl.w	r2, r7, r2
 8001422:	4302      	orrs	r2, r0
 8001424:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 800142c:	694a      	ldr	r2, [r1, #20]
 800142e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8001432:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 8001436:	690a      	ldr	r2, [r1, #16]
 8001438:	3a01      	subs	r2, #1
 800143a:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 800143e:	2a03      	cmp	r2, #3
 8001440:	d873      	bhi.n	800152a <HAL_ADC_ConfigChannel+0x176>
 8001442:	e8df f002 	tbb	[pc, r2]
 8001446:	5137      	.short	0x5137
 8001448:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 800144a:	2809      	cmp	r0, #9
 800144c:	d80b      	bhi.n	8001466 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 800144e:	4342      	muls	r2, r0
 8001450:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8001452:	3a1e      	subs	r2, #30
 8001454:	201f      	movs	r0, #31
 8001456:	4090      	lsls	r0, r2
 8001458:	ea27 0000 	bic.w	r0, r7, r0
 800145c:	fa04 f202 	lsl.w	r2, r4, r2
 8001460:	4302      	orrs	r2, r0
 8001462:	635a      	str	r2, [r3, #52]	; 0x34
 8001464:	e7c9      	b.n	80013fa <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 8001466:	280e      	cmp	r0, #14
 8001468:	d80b      	bhi.n	8001482 <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800146a:	4342      	muls	r2, r0
 800146c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800146e:	3a3c      	subs	r2, #60	; 0x3c
 8001470:	201f      	movs	r0, #31
 8001472:	4090      	lsls	r0, r2
 8001474:	ea27 0000 	bic.w	r0, r7, r0
 8001478:	fa04 f202 	lsl.w	r2, r4, r2
 800147c:	4302      	orrs	r2, r0
 800147e:	639a      	str	r2, [r3, #56]	; 0x38
 8001480:	e7bb      	b.n	80013fa <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001482:	4342      	muls	r2, r0
 8001484:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8001486:	3a5a      	subs	r2, #90	; 0x5a
 8001488:	201f      	movs	r0, #31
 800148a:	4090      	lsls	r0, r2
 800148c:	ea27 0000 	bic.w	r0, r7, r0
 8001490:	fa04 f202 	lsl.w	r2, r4, r2
 8001494:	4302      	orrs	r2, r0
 8001496:	63da      	str	r2, [r3, #60]	; 0x3c
 8001498:	e7af      	b.n	80013fa <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800149a:	6958      	ldr	r0, [r3, #20]
 800149c:	4422      	add	r2, r4
 800149e:	f04f 0e07 	mov.w	lr, #7
 80014a2:	fa0e fe02 	lsl.w	lr, lr, r2
 80014a6:	ea20 000e 	bic.w	r0, r0, lr
 80014aa:	fa07 f202 	lsl.w	r2, r7, r2
 80014ae:	4302      	orrs	r2, r0
 80014b0:	615a      	str	r2, [r3, #20]
 80014b2:	e7b8      	b.n	8001426 <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80014b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014b6:	4f83      	ldr	r7, [pc, #524]	; (80016c4 <HAL_ADC_ConfigChannel+0x310>)
 80014b8:	4017      	ands	r7, r2
 80014ba:	ea47 020c 	orr.w	r2, r7, ip
 80014be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014c2:	ea42 020e 	orr.w	r2, r2, lr
 80014c6:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	f002 0203 	and.w	r2, r2, #3
 80014ce:	2a01      	cmp	r2, #1
 80014d0:	f040 80df 	bne.w	8001692 <HAL_ADC_ConfigChannel+0x2de>
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	07d7      	lsls	r7, r2, #31
 80014d8:	f140 80db 	bpl.w	8001692 <HAL_ADC_ConfigChannel+0x2de>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014dc:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80014de:	2300      	movs	r3, #0
 80014e0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 80014e4:	b017      	add	sp, #92	; 0x5c
 80014e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 80014e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014ea:	4f76      	ldr	r7, [pc, #472]	; (80016c4 <HAL_ADC_ConfigChannel+0x310>)
 80014ec:	4017      	ands	r7, r2
 80014ee:	ea47 020c 	orr.w	r2, r7, ip
 80014f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014f6:	ea42 020e 	orr.w	r2, r2, lr
 80014fa:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80014fc:	e7e4      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80014fe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001500:	4870      	ldr	r0, [pc, #448]	; (80016c4 <HAL_ADC_ConfigChannel+0x310>)
 8001502:	4010      	ands	r0, r2
 8001504:	ea40 020c 	orr.w	r2, r0, ip
 8001508:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800150c:	ea42 020e 	orr.w	r2, r2, lr
 8001510:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8001512:	e7d9      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001514:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8001516:	4a6b      	ldr	r2, [pc, #428]	; (80016c4 <HAL_ADC_ConfigChannel+0x310>)
 8001518:	4002      	ands	r2, r0
 800151a:	ea42 020c 	orr.w	r2, r2, ip
 800151e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001522:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001526:	66da      	str	r2, [r3, #108]	; 0x6c
 8001528:	e7ce      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800152a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800152c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001530:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001532:	bf02      	ittt	eq
 8001534:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8001536:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800153a:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800153c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800153e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001542:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001544:	bf02      	ittt	eq
 8001546:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8001548:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800154c:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800154e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001550:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001554:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001556:	bf02      	ittt	eq
 8001558:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 800155a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800155e:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001560:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001562:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001566:	4594      	cmp	ip, r2
 8001568:	d1ae      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800156a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800156c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001570:	e7d9      	b.n	8001526 <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001572:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001576:	2101      	movs	r1, #1
 8001578:	40a1      	lsls	r1, r4
 800157a:	ea22 0201 	bic.w	r2, r2, r1
 800157e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001586:	d01e      	beq.n	80015c6 <HAL_ADC_ConfigChannel+0x212>
 8001588:	494f      	ldr	r1, [pc, #316]	; (80016c8 <HAL_ADC_ConfigChannel+0x314>)
 800158a:	4a50      	ldr	r2, [pc, #320]	; (80016cc <HAL_ADC_ConfigChannel+0x318>)
 800158c:	4850      	ldr	r0, [pc, #320]	; (80016d0 <HAL_ADC_ConfigChannel+0x31c>)
 800158e:	4283      	cmp	r3, r0
 8001590:	bf08      	it	eq
 8001592:	460a      	moveq	r2, r1
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001594:	2c10      	cmp	r4, #16
 8001596:	d118      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x216>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001598:	6891      	ldr	r1, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800159a:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800159e:	d19d      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015a4:	494a      	ldr	r1, [pc, #296]	; (80016d0 <HAL_ADC_ConfigChannel+0x31c>)
 80015a6:	d11c      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x22e>
 80015a8:	9101      	str	r1, [sp, #4]
 80015aa:	e024      	b.n	80015f6 <HAL_ADC_ConfigChannel+0x242>
        MODIFY_REG(hadc->Instance->SMPR1,
 80015ac:	1c60      	adds	r0, r4, #1
 80015ae:	6959      	ldr	r1, [r3, #20]
 80015b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80015b4:	2207      	movs	r2, #7
 80015b6:	4082      	lsls	r2, r0
 80015b8:	ea21 0102 	bic.w	r1, r1, r2
 80015bc:	fa06 f200 	lsl.w	r2, r6, r0
 80015c0:	430a      	orrs	r2, r1
 80015c2:	615a      	str	r2, [r3, #20]
 80015c4:	e7dd      	b.n	8001582 <HAL_ADC_ConfigChannel+0x1ce>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015c6:	4a40      	ldr	r2, [pc, #256]	; (80016c8 <HAL_ADC_ConfigChannel+0x314>)
 80015c8:	e7e4      	b.n	8001594 <HAL_ADC_ConfigChannel+0x1e0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80015ca:	2c11      	cmp	r4, #17
 80015cc:	d103      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x222>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015ce:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80015d0:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 80015d4:	e7e3      	b.n	800159e <HAL_ADC_ConfigChannel+0x1ea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015d6:	2c12      	cmp	r4, #18
 80015d8:	d180      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80015da:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80015dc:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 80015e0:	e7dd      	b.n	800159e <HAL_ADC_ConfigChannel+0x1ea>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015e2:	428b      	cmp	r3, r1
 80015e4:	d102      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x238>
 80015e6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80015ea:	e7dd      	b.n	80015a8 <HAL_ADC_ConfigChannel+0x1f4>
 80015ec:	4939      	ldr	r1, [pc, #228]	; (80016d4 <HAL_ADC_ConfigChannel+0x320>)
 80015ee:	483a      	ldr	r0, [pc, #232]	; (80016d8 <HAL_ADC_ConfigChannel+0x324>)
 80015f0:	428b      	cmp	r3, r1
 80015f2:	d12b      	bne.n	800164c <HAL_ADC_ConfigChannel+0x298>
 80015f4:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015f6:	6899      	ldr	r1, [r3, #8]
 80015f8:	f001 0103 	and.w	r1, r1, #3
 80015fc:	2901      	cmp	r1, #1
 80015fe:	d102      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x252>
 8001600:	6819      	ldr	r1, [r3, #0]
 8001602:	07c8      	lsls	r0, r1, #31
 8001604:	d438      	bmi.n	8001678 <HAL_ADC_ConfigChannel+0x2c4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001606:	9901      	ldr	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001608:	b139      	cbz	r1, 800161a <HAL_ADC_ConfigChannel+0x266>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800160a:	6888      	ldr	r0, [r1, #8]
 800160c:	f000 0003 	and.w	r0, r0, #3
 8001610:	2801      	cmp	r0, #1
 8001612:	d102      	bne.n	800161a <HAL_ADC_ConfigChannel+0x266>
 8001614:	6809      	ldr	r1, [r1, #0]
 8001616:	07c9      	lsls	r1, r1, #31
 8001618:	d42e      	bmi.n	8001678 <HAL_ADC_ConfigChannel+0x2c4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800161a:	2c10      	cmp	r4, #16
 800161c:	d11a      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x2a0>
 800161e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001622:	f47f af5b 	bne.w	80014dc <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001626:	6893      	ldr	r3, [r2, #8]
 8001628:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800162c:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800162e:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <HAL_ADC_ConfigChannel+0x328>)
 8001630:	4a2b      	ldr	r2, [pc, #172]	; (80016e0 <HAL_ADC_ConfigChannel+0x32c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	fbb3 f2f2 	udiv	r2, r3, r2
 8001638:	230a      	movs	r3, #10
 800163a:	4353      	muls	r3, r2
            wait_loop_index--;
 800163c:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 800163e:	9b00      	ldr	r3, [sp, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f43f af4b 	beq.w	80014dc <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 8001646:	9b00      	ldr	r3, [sp, #0]
 8001648:	3b01      	subs	r3, #1
 800164a:	e7f7      	b.n	800163c <HAL_ADC_ConfigChannel+0x288>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800164c:	4283      	cmp	r3, r0
 800164e:	bf18      	it	ne
 8001650:	2100      	movne	r1, #0
 8001652:	e7a9      	b.n	80015a8 <HAL_ADC_ConfigChannel+0x1f4>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001654:	2c11      	cmp	r4, #17
 8001656:	d108      	bne.n	800166a <HAL_ADC_ConfigChannel+0x2b6>
 8001658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800165c:	f47f af3e 	bne.w	80014dc <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001660:	6893      	ldr	r3, [r2, #8]
 8001662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001666:	6093      	str	r3, [r2, #8]
 8001668:	e738      	b.n	80014dc <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800166a:	2c12      	cmp	r4, #18
 800166c:	f47f af36 	bne.w	80014dc <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001670:	6893      	ldr	r3, [r2, #8]
 8001672:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001676:	e7f6      	b.n	8001666 <HAL_ADC_ConfigChannel+0x2b2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001678:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800167a:	f043 0320 	orr.w	r3, r3, #32
 800167e:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8001680:	2001      	movs	r0, #1
 8001682:	e72c      	b.n	80014de <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001684:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001686:	f043 0320 	orr.w	r3, r3, #32
 800168a:	646b      	str	r3, [r5, #68]	; 0x44
 800168c:	e727      	b.n	80014de <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 800168e:	2002      	movs	r0, #2
 8001690:	e728      	b.n	80014e4 <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001692:	2e01      	cmp	r6, #1
 8001694:	f47f af6d 	bne.w	8001572 <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001698:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800169c:	40a6      	lsls	r6, r4
 800169e:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80016a0:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016a2:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 80016a6:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80016a8:	d980      	bls.n	80015ac <HAL_ADC_ConfigChannel+0x1f8>
        MODIFY_REG(hadc->Instance->SMPR2,
 80016aa:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80016ae:	6999      	ldr	r1, [r3, #24]
 80016b0:	3a1b      	subs	r2, #27
 80016b2:	2007      	movs	r0, #7
 80016b4:	4090      	lsls	r0, r2
 80016b6:	ea21 0100 	bic.w	r1, r1, r0
 80016ba:	fa06 f202 	lsl.w	r2, r6, r2
 80016be:	430a      	orrs	r2, r1
 80016c0:	619a      	str	r2, [r3, #24]
 80016c2:	e75e      	b.n	8001582 <HAL_ADC_ConfigChannel+0x1ce>
 80016c4:	83fff000 	.word	0x83fff000
 80016c8:	50000300 	.word	0x50000300
 80016cc:	50000700 	.word	0x50000700
 80016d0:	50000100 	.word	0x50000100
 80016d4:	50000400 	.word	0x50000400
 80016d8:	50000500 	.word	0x50000500
 80016dc:	20000008 	.word	0x20000008
 80016e0:	000f4240 	.word	0x000f4240

080016e4 <HAL_ADCEx_MultiModeConfigChannel>:
{
 80016e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016e6:	6802      	ldr	r2, [r0, #0]
 80016e8:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 80016ea:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
{
 80016ee:	b097      	sub	sp, #92	; 0x5c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016f0:	d101      	bne.n	80016f6 <HAL_ADCEx_MultiModeConfigChannel+0x12>
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	e009      	b.n	800170a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d102      	bne.n	8001700 <HAL_ADCEx_MultiModeConfigChannel+0x1c>
 80016fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016fe:	e7f8      	b.n	80016f2 <HAL_ADCEx_MultiModeConfigChannel+0xe>
 8001700:	4b3c      	ldr	r3, [pc, #240]	; (80017f4 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8001702:	4c3d      	ldr	r4, [pc, #244]	; (80017f8 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8001704:	429a      	cmp	r2, r3
 8001706:	d130      	bne.n	800176a <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8001708:	9401      	str	r4, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800170a:	9c01      	ldr	r4, [sp, #4]
 800170c:	2c00      	cmp	r4, #0
 800170e:	d058      	beq.n	80017c2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
  __HAL_LOCK(hadc);
 8001710:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001714:	2b01      	cmp	r3, #1
 8001716:	d056      	beq.n	80017c6 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8001718:	2301      	movs	r3, #1
 800171a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800171e:	6893      	ldr	r3, [r2, #8]
 8001720:	075b      	lsls	r3, r3, #29
 8001722:	d443      	bmi.n	80017ac <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001724:	68a3      	ldr	r3, [r4, #8]
 8001726:	075f      	lsls	r7, r3, #29
 8001728:	d440      	bmi.n	80017ac <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800172a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800172e:	d020      	beq.n	8001772 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8001730:	4d32      	ldr	r5, [pc, #200]	; (80017fc <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8001732:	4b33      	ldr	r3, [pc, #204]	; (8001800 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8001734:	4e2e      	ldr	r6, [pc, #184]	; (80017f0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8001736:	42b2      	cmp	r2, r6
 8001738:	bf08      	it	eq
 800173a:	462b      	moveq	r3, r5
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800173c:	680d      	ldr	r5, [r1, #0]
 800173e:	b1d5      	cbz	r5, 8001776 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001740:	684e      	ldr	r6, [r1, #4]
 8001742:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8001746:	4637      	mov	r7, r6
 8001748:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800174a:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 800174e:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 8001752:	433e      	orrs	r6, r7
 8001754:	609e      	str	r6, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001756:	6896      	ldr	r6, [r2, #8]
 8001758:	f006 0603 	and.w	r6, r6, #3
 800175c:	2e01      	cmp	r6, #1
 800175e:	d134      	bne.n	80017ca <HAL_ADCEx_MultiModeConfigChannel+0xe6>
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	07d6      	lsls	r6, r2, #31
 8001764:	d531      	bpl.n	80017ca <HAL_ADCEx_MultiModeConfigChannel+0xe6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	e025      	b.n	80017b6 <HAL_ADCEx_MultiModeConfigChannel+0xd2>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800176a:	42a2      	cmp	r2, r4
 800176c:	bf18      	it	ne
 800176e:	2300      	movne	r3, #0
 8001770:	e7bf      	b.n	80016f2 <HAL_ADCEx_MultiModeConfigChannel+0xe>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001772:	4b22      	ldr	r3, [pc, #136]	; (80017fc <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8001774:	e7e2      	b.n	800173c <HAL_ADCEx_MultiModeConfigChannel+0x58>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001776:	6899      	ldr	r1, [r3, #8]
 8001778:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800177c:	6099      	str	r1, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800177e:	6891      	ldr	r1, [r2, #8]
 8001780:	f001 0103 	and.w	r1, r1, #3
 8001784:	2901      	cmp	r1, #1
 8001786:	d102      	bne.n	800178e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	07d1      	lsls	r1, r2, #31
 800178c:	d4eb      	bmi.n	8001766 <HAL_ADCEx_MultiModeConfigChannel+0x82>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800178e:	68a2      	ldr	r2, [r4, #8]
 8001790:	f002 0203 	and.w	r2, r2, #3
 8001794:	2a01      	cmp	r2, #1
 8001796:	d102      	bne.n	800179e <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8001798:	6822      	ldr	r2, [r4, #0]
 800179a:	07d2      	lsls	r2, r2, #31
 800179c:	d4e3      	bmi.n	8001766 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80017a4:	f022 020f 	bic.w	r2, r2, #15
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	e7dc      	b.n	8001766 <HAL_ADCEx_MultiModeConfigChannel+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80017ae:	f043 0320 	orr.w	r3, r3, #32
 80017b2:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 80017b6:	2200      	movs	r2, #0
 80017b8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} 
 80017bc:	4618      	mov	r0, r3
 80017be:	b017      	add	sp, #92	; 0x5c
 80017c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e7fa      	b.n	80017bc <HAL_ADCEx_MultiModeConfigChannel+0xd8>
  __HAL_LOCK(hadc);
 80017c6:	2302      	movs	r3, #2
 80017c8:	e7f8      	b.n	80017bc <HAL_ADCEx_MultiModeConfigChannel+0xd8>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80017ca:	68a2      	ldr	r2, [r4, #8]
 80017cc:	f002 0203 	and.w	r2, r2, #3
 80017d0:	2a01      	cmp	r2, #1
 80017d2:	d102      	bne.n	80017da <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80017d4:	6822      	ldr	r2, [r4, #0]
 80017d6:	07d4      	lsls	r4, r2, #31
 80017d8:	d4c5      	bmi.n	8001766 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	6889      	ldr	r1, [r1, #8]
 80017de:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80017e2:	430d      	orrs	r5, r1
 80017e4:	f022 020f 	bic.w	r2, r2, #15
 80017e8:	4315      	orrs	r5, r2
 80017ea:	609d      	str	r5, [r3, #8]
 80017ec:	e7bb      	b.n	8001766 <HAL_ADCEx_MultiModeConfigChannel+0x82>
 80017ee:	bf00      	nop
 80017f0:	50000100 	.word	0x50000100
 80017f4:	50000400 	.word	0x50000400
 80017f8:	50000500 	.word	0x50000500
 80017fc:	50000300 	.word	0x50000300
 8001800:	50000700 	.word	0x50000700

08001804 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001804:	4a07      	ldr	r2, [pc, #28]	; (8001824 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001806:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001808:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800180c:	041b      	lsls	r3, r3, #16
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001814:	0200      	lsls	r0, r0, #8
 8001816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800181e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001820:	60d3      	str	r3, [r2, #12]
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182a:	b530      	push	{r4, r5, lr}
 800182c:	68dc      	ldr	r4, [r3, #12]
 800182e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001832:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001836:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	2b04      	cmp	r3, #4
 800183a:	bf28      	it	cs
 800183c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 0501 	mov.w	r5, #1
 8001844:	fa05 f303 	lsl.w	r3, r5, r3
 8001848:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184c:	bf8c      	ite	hi
 800184e:	3c03      	subhi	r4, #3
 8001850:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001852:	4019      	ands	r1, r3
 8001854:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001856:	fa05 f404 	lsl.w	r4, r5, r4
 800185a:	3c01      	subs	r4, #1
 800185c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800185e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	ea42 0201 	orr.w	r2, r2, r1
 8001864:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001868:	bfaf      	iteee	ge
 800186a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	f000 000f 	andlt.w	r0, r0, #15
 8001872:	4b06      	ldrlt	r3, [pc, #24]	; (800188c <HAL_NVIC_SetPriority+0x64>)
 8001874:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	bfa5      	ittet	ge
 8001878:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800187c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001880:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001884:	bd30      	pop	{r4, r5, pc}
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00
 800188c:	e000ed14 	.word	0xe000ed14

08001890 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001890:	0942      	lsrs	r2, r0, #5
 8001892:	2301      	movs	r3, #1
 8001894:	f000 001f 	and.w	r0, r0, #31
 8001898:	fa03 f000 	lsl.w	r0, r3, r0
 800189c:	4b01      	ldr	r3, [pc, #4]	; (80018a4 <HAL_NVIC_EnableIRQ+0x14>)
 800189e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100

080018a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	3801      	subs	r0, #1
 80018aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80018ae:	d20a      	bcs.n	80018c6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	21f0      	movs	r1, #240	; 0xf0
 80018b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018be:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80018d6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80018d8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80018da:	bf0c      	ite	eq
 80018dc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80018e0:	f022 0204 	bicne.w	r2, r2, #4
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	4770      	bx	lr
 80018e8:	e000e010 	.word	0xe000e010

080018ec <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018ec:	6801      	ldr	r1, [r0, #0]
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <DMA_CalcBaseAndBitshift+0x34>)
 80018f0:	4299      	cmp	r1, r3
{
 80018f2:	b510      	push	{r4, lr}
 80018f4:	f04f 0414 	mov.w	r4, #20
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018f8:	d809      	bhi.n	800190e <DMA_CalcBaseAndBitshift+0x22>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <DMA_CalcBaseAndBitshift+0x38>)
 80018fc:	440a      	add	r2, r1
 80018fe:	fbb2 f2f4 	udiv	r2, r2, r4
 8001902:	0092      	lsls	r2, r2, #2
 8001904:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001906:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 800190a:	63c3      	str	r3, [r0, #60]	; 0x3c
 800190c:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <DMA_CalcBaseAndBitshift+0x3c>)
 8001910:	440b      	add	r3, r1
 8001912:	fbb3 f3f4 	udiv	r3, r3, r4
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <DMA_CalcBaseAndBitshift+0x40>)
 800191c:	e7f5      	b.n	800190a <DMA_CalcBaseAndBitshift+0x1e>
 800191e:	bf00      	nop
 8001920:	40020407 	.word	0x40020407
 8001924:	bffdfff8 	.word	0xbffdfff8
 8001928:	bffdfbf8 	.word	0xbffdfbf8
 800192c:	40020400 	.word	0x40020400

08001930 <HAL_DMA_Init>:
{ 
 8001930:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 8001932:	4604      	mov	r4, r0
 8001934:	b328      	cbz	r0, 8001982 <HAL_DMA_Init+0x52>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001936:	2302      	movs	r3, #2
  tmp |=  hdma->Init.Direction        |
 8001938:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 800193a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp |=  hdma->Init.Direction        |
 800193e:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8001940:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 8001942:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001944:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8001946:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001948:	432b      	orrs	r3, r5
 800194a:	6905      	ldr	r5, [r0, #16]
 800194c:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194e:	6945      	ldr	r5, [r0, #20]
 8001950:	432b      	orrs	r3, r5
 8001952:	6985      	ldr	r5, [r0, #24]
 8001954:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001956:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001958:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800195c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8001960:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8001962:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8001964:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8001966:	f7ff ffc1 	bl	80018ec <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 800196a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800196c:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 800196e:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001970:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001972:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001974:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001976:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001978:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 800197c:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 8001980:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001982:	2001      	movs	r0, #1
}  
 8001984:	bd38      	pop	{r3, r4, r5, pc}

08001986 <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001986:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001988:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800198a:	6803      	ldr	r3, [r0, #0]
{
 800198c:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800198e:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001990:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001992:	2404      	movs	r4, #4
 8001994:	4094      	lsls	r4, r2
 8001996:	4226      	tst	r6, r4
 8001998:	d00e      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x32>
 800199a:	f015 0f04 	tst.w	r5, #4
 800199e:	d00b      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80019a4:	bf5e      	ittt	pl
 80019a6:	681a      	ldrpl	r2, [r3, #0]
 80019a8:	f022 0204 	bicpl.w	r2, r2, #4
 80019ac:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80019ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80019b0:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 80019b2:	b373      	cbz	r3, 8001a12 <HAL_DMA_IRQHandler+0x8c>
}  
 80019b4:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 80019b6:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80019b8:	2402      	movs	r4, #2
 80019ba:	4094      	lsls	r4, r2
 80019bc:	4226      	tst	r6, r4
 80019be:	d012      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x60>
 80019c0:	f015 0f02 	tst.w	r5, #2
 80019c4:	d00f      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	0695      	lsls	r5, r2, #26
 80019ca:	d406      	bmi.n	80019da <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	f022 020a 	bic.w	r2, r2, #10
 80019d2:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80019d4:	2301      	movs	r3, #1
 80019d6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 80019da:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80019dc:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 80019de:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80019e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80019e4:	e7e5      	b.n	80019b2 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019e6:	2408      	movs	r4, #8
 80019e8:	4094      	lsls	r4, r2
 80019ea:	4234      	tst	r4, r6
 80019ec:	d011      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x8c>
 80019ee:	072c      	lsls	r4, r5, #28
 80019f0:	d50f      	bpl.n	8001a12 <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019f2:	681c      	ldr	r4, [r3, #0]
 80019f4:	f024 040e 	bic.w	r4, r4, #14
 80019f8:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019fa:	2301      	movs	r3, #1
 80019fc:	fa03 f202 	lsl.w	r2, r3, r2
 8001a00:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a02:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001a04:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001a0e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001a10:	e7cf      	b.n	80019b2 <HAL_DMA_IRQHandler+0x2c>
}  
 8001a12:	bc70      	pop	{r4, r5, r6}
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a1c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a20:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8001b98 <HAL_GPIO_Init+0x180>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a24:	4a5a      	ldr	r2, [pc, #360]	; (8001b90 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 8001a26:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a28:	fa38 f403 	lsrs.w	r4, r8, r3
 8001a2c:	d102      	bne.n	8001a34 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8001a2e:	b003      	add	sp, #12
 8001a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a34:	2401      	movs	r4, #1
 8001a36:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8001a3a:	ea18 050a 	ands.w	r5, r8, sl
 8001a3e:	f000 809c 	beq.w	8001b7a <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a42:	684c      	ldr	r4, [r1, #4]
 8001a44:	f024 0b10 	bic.w	fp, r4, #16
 8001a48:	f1bb 0f02 	cmp.w	fp, #2
 8001a4c:	d114      	bne.n	8001a78 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8001a4e:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001a52:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a56:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001a5a:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001a62:	270f      	movs	r7, #15
 8001a64:	fa07 f70c 	lsl.w	r7, r7, ip
 8001a68:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a6c:	690e      	ldr	r6, [r1, #16]
 8001a6e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001a72:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8001a74:	f8ce 6020 	str.w	r6, [lr, #32]
 8001a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a7c:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001a7e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a80:	fa07 f70c 	lsl.w	r7, r7, ip
 8001a84:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a86:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a8a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a8c:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a90:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a94:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a98:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8001a9c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a9e:	d811      	bhi.n	8001ac4 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8001aa0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa2:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa6:	68ce      	ldr	r6, [r1, #12]
 8001aa8:	fa06 fe0c 	lsl.w	lr, r6, ip
 8001aac:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001ab0:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ab2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab4:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ab8:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001abc:	409e      	lsls	r6, r3
 8001abe:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001ac2:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001ac4:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ac6:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac8:	688e      	ldr	r6, [r1, #8]
 8001aca:	fa06 f60c 	lsl.w	r6, r6, ip
 8001ace:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad0:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001ad2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad4:	d551      	bpl.n	8001b7a <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8001ada:	f046 0601 	orr.w	r6, r6, #1
 8001ade:	f8c9 6018 	str.w	r6, [r9, #24]
 8001ae2:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8001ae6:	f023 0703 	bic.w	r7, r3, #3
 8001aea:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001aee:	f006 0601 	and.w	r6, r6, #1
 8001af2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001af6:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001af8:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afc:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001afe:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001b00:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001b04:	f04f 0e0f 	mov.w	lr, #15
 8001b08:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b0c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001b10:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b14:	d033      	beq.n	8001b7e <HAL_GPIO_Init+0x166>
 8001b16:	4e1f      	ldr	r6, [pc, #124]	; (8001b94 <HAL_GPIO_Init+0x17c>)
 8001b18:	42b0      	cmp	r0, r6
 8001b1a:	d032      	beq.n	8001b82 <HAL_GPIO_Init+0x16a>
 8001b1c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b20:	42b0      	cmp	r0, r6
 8001b22:	d030      	beq.n	8001b86 <HAL_GPIO_Init+0x16e>
 8001b24:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b28:	42b0      	cmp	r0, r6
 8001b2a:	d02e      	beq.n	8001b8a <HAL_GPIO_Init+0x172>
 8001b2c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b30:	42b0      	cmp	r0, r6
 8001b32:	bf14      	ite	ne
 8001b34:	2605      	movne	r6, #5
 8001b36:	2604      	moveq	r6, #4
 8001b38:	fa06 f60c 	lsl.w	r6, r6, ip
 8001b3c:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b40:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001b42:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b46:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001b4a:	bf0c      	ite	eq
 8001b4c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b4e:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8001b50:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8001b52:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b54:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001b58:	bf0c      	ite	eq
 8001b5a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b5c:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8001b5e:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8001b60:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b62:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001b66:	bf0c      	ite	eq
 8001b68:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b6a:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8001b6c:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8001b6e:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b70:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001b72:	bf54      	ite	pl
 8001b74:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001b76:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8001b78:	60d6      	str	r6, [r2, #12]
    position++;
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	e754      	b.n	8001a28 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b7e:	2600      	movs	r6, #0
 8001b80:	e7da      	b.n	8001b38 <HAL_GPIO_Init+0x120>
 8001b82:	2601      	movs	r6, #1
 8001b84:	e7d8      	b.n	8001b38 <HAL_GPIO_Init+0x120>
 8001b86:	2602      	movs	r6, #2
 8001b88:	e7d6      	b.n	8001b38 <HAL_GPIO_Init+0x120>
 8001b8a:	2603      	movs	r6, #3
 8001b8c:	e7d4      	b.n	8001b38 <HAL_GPIO_Init+0x120>
 8001b8e:	bf00      	nop
 8001b90:	40010400 	.word	0x40010400
 8001b94:	48000400 	.word	0x48000400
 8001b98:	40021000 	.word	0x40021000

08001b9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b9c:	b10a      	cbz	r2, 8001ba2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b9e:	6181      	str	r1, [r0, #24]
 8001ba0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ba2:	6281      	str	r1, [r0, #40]	; 0x28
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba8:	6803      	ldr	r3, [r0, #0]
 8001baa:	07da      	lsls	r2, r3, #31
{
 8001bac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001bb0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb2:	d411      	bmi.n	8001bd8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb4:	682b      	ldr	r3, [r5, #0]
 8001bb6:	079b      	lsls	r3, r3, #30
 8001bb8:	f100 8088 	bmi.w	8001ccc <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bbc:	682b      	ldr	r3, [r5, #0]
 8001bbe:	071c      	lsls	r4, r3, #28
 8001bc0:	f100 80f8 	bmi.w	8001db4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc4:	682b      	ldr	r3, [r5, #0]
 8001bc6:	0758      	lsls	r0, r3, #29
 8001bc8:	f100 8141 	bmi.w	8001e4e <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bcc:	69ea      	ldr	r2, [r5, #28]
 8001bce:	2a00      	cmp	r2, #0
 8001bd0:	f040 81d7 	bne.w	8001f82 <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	e021      	b.n	8001c1c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bd8:	4cba      	ldr	r4, [pc, #744]	; (8001ec4 <HAL_RCC_OscConfig+0x31c>)
 8001bda:	6863      	ldr	r3, [r4, #4]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d007      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be4:	6863      	ldr	r3, [r4, #4]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d119      	bne.n	8001c22 <HAL_RCC_OscConfig+0x7a>
 8001bee:	6863      	ldr	r3, [r4, #4]
 8001bf0:	03df      	lsls	r7, r3, #15
 8001bf2:	d516      	bpl.n	8001c22 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfc:	6821      	ldr	r1, [r4, #0]
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	420b      	tst	r3, r1
 8001c12:	d0cf      	beq.n	8001bb4 <HAL_RCC_OscConfig+0xc>
 8001c14:	686b      	ldr	r3, [r5, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1cc      	bne.n	8001bb4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001c1a:	2001      	movs	r0, #1
}
 8001c1c:	b002      	add	sp, #8
 8001c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c22:	686a      	ldr	r2, [r5, #4]
 8001c24:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001c28:	d125      	bne.n	8001c76 <HAL_RCC_OscConfig+0xce>
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c30:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c34:	68a9      	ldr	r1, [r5, #8]
 8001c36:	f023 030f 	bic.w	r3, r3, #15
 8001c3a:	430b      	orrs	r3, r1
 8001c3c:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c3e:	b352      	cbz	r2, 8001c96 <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8001c40:	f7ff fa60 	bl	8001104 <HAL_GetTick>
 8001c44:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001c48:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	2701      	movs	r7, #1
 8001c4c:	fa96 f3a6 	rbit	r3, r6
 8001c50:	6822      	ldr	r2, [r4, #0]
 8001c52:	fa96 f3a6 	rbit	r3, r6
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	fa07 f303 	lsl.w	r3, r7, r3
 8001c62:	4213      	tst	r3, r2
 8001c64:	d1a6      	bne.n	8001bb4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c66:	f7ff fa4d 	bl	8001104 <HAL_GetTick>
 8001c6a:	eba0 0008 	sub.w	r0, r0, r8
 8001c6e:	2864      	cmp	r0, #100	; 0x64
 8001c70:	d9ec      	bls.n	8001c4c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8001c72:	2003      	movs	r0, #3
 8001c74:	e7d2      	b.n	8001c1c <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	b932      	cbnz	r2, 8001c88 <HAL_RCC_OscConfig+0xe0>
 8001c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7e:	6023      	str	r3, [r4, #0]
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c86:	e7d3      	b.n	8001c30 <HAL_RCC_OscConfig+0x88>
 8001c88:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001c8c:	d1f5      	bne.n	8001c7a <HAL_RCC_OscConfig+0xd2>
 8001c8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c92:	6023      	str	r3, [r4, #0]
 8001c94:	e7c9      	b.n	8001c2a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001c96:	f7ff fa35 	bl	8001104 <HAL_GetTick>
 8001c9a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001c9e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca0:	2701      	movs	r7, #1
 8001ca2:	fa96 f3a6 	rbit	r3, r6
 8001ca6:	6822      	ldr	r2, [r4, #0]
 8001ca8:	fa96 f3a6 	rbit	r3, r6
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	fa07 f303 	lsl.w	r3, r7, r3
 8001cb8:	4213      	tst	r3, r2
 8001cba:	f43f af7b 	beq.w	8001bb4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cbe:	f7ff fa21 	bl	8001104 <HAL_GetTick>
 8001cc2:	eba0 0008 	sub.w	r0, r0, r8
 8001cc6:	2864      	cmp	r0, #100	; 0x64
 8001cc8:	d9eb      	bls.n	8001ca2 <HAL_RCC_OscConfig+0xfa>
 8001cca:	e7d2      	b.n	8001c72 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ccc:	4c7d      	ldr	r4, [pc, #500]	; (8001ec4 <HAL_RCC_OscConfig+0x31c>)
 8001cce:	6863      	ldr	r3, [r4, #4]
 8001cd0:	f013 0f0c 	tst.w	r3, #12
 8001cd4:	d007      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cd6:	6863      	ldr	r3, [r4, #4]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d121      	bne.n	8001d24 <HAL_RCC_OscConfig+0x17c>
 8001ce0:	6863      	ldr	r3, [r4, #4]
 8001ce2:	03de      	lsls	r6, r3, #15
 8001ce4:	d41e      	bmi.n	8001d24 <HAL_RCC_OscConfig+0x17c>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cec:	6821      	ldr	r1, [r4, #0]
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	420b      	tst	r3, r1
 8001d02:	d002      	beq.n	8001d0a <HAL_RCC_OscConfig+0x162>
 8001d04:	692b      	ldr	r3, [r5, #16]
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d187      	bne.n	8001c1a <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0a:	6821      	ldr	r1, [r4, #0]
 8001d0c:	23f8      	movs	r3, #248	; 0xf8
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	fab3 f283 	clz	r2, r3
 8001d16:	696b      	ldr	r3, [r5, #20]
 8001d18:	4093      	lsls	r3, r2
 8001d1a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	6023      	str	r3, [r4, #0]
 8001d22:	e74b      	b.n	8001bbc <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d24:	692a      	ldr	r2, [r5, #16]
 8001d26:	2601      	movs	r6, #1
 8001d28:	b30a      	cbz	r2, 8001d6e <HAL_RCC_OscConfig+0x1c6>
 8001d2a:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001d2e:	fab3 f383 	clz	r3, r3
 8001d32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	2702      	movs	r7, #2
 8001d3e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001d40:	f7ff f9e0 	bl	8001104 <HAL_GetTick>
 8001d44:	4680      	mov	r8, r0
 8001d46:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4a:	6822      	ldr	r2, [r4, #0]
 8001d4c:	fa97 f3a7 	rbit	r3, r7
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	fa06 f303 	lsl.w	r3, r6, r3
 8001d5c:	4213      	tst	r3, r2
 8001d5e:	d1d4      	bne.n	8001d0a <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d60:	f7ff f9d0 	bl	8001104 <HAL_GetTick>
 8001d64:	eba0 0008 	sub.w	r0, r0, r8
 8001d68:	2802      	cmp	r0, #2
 8001d6a:	d9ec      	bls.n	8001d46 <HAL_RCC_OscConfig+0x19e>
 8001d6c:	e781      	b.n	8001c72 <HAL_RCC_OscConfig+0xca>
 8001d6e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	2702      	movs	r7, #2
 8001d82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d84:	f7ff f9be 	bl	8001104 <HAL_GetTick>
 8001d88:	4680      	mov	r8, r0
 8001d8a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	6822      	ldr	r2, [r4, #0]
 8001d90:	fa97 f3a7 	rbit	r3, r7
 8001d94:	fab3 f383 	clz	r3, r3
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	fa06 f303 	lsl.w	r3, r6, r3
 8001da0:	4213      	tst	r3, r2
 8001da2:	f43f af0b 	beq.w	8001bbc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da6:	f7ff f9ad 	bl	8001104 <HAL_GetTick>
 8001daa:	eba0 0008 	sub.w	r0, r0, r8
 8001dae:	2802      	cmp	r0, #2
 8001db0:	d9eb      	bls.n	8001d8a <HAL_RCC_OscConfig+0x1e2>
 8001db2:	e75e      	b.n	8001c72 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001db4:	69aa      	ldr	r2, [r5, #24]
 8001db6:	4e43      	ldr	r6, [pc, #268]	; (8001ec4 <HAL_RCC_OscConfig+0x31c>)
 8001db8:	4943      	ldr	r1, [pc, #268]	; (8001ec8 <HAL_RCC_OscConfig+0x320>)
 8001dba:	2401      	movs	r4, #1
 8001dbc:	b31a      	cbz	r2, 8001e06 <HAL_RCC_OscConfig+0x25e>
 8001dbe:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	2702      	movs	r7, #2
 8001dcc:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001dce:	f7ff f999 	bl	8001104 <HAL_GetTick>
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	fa97 f3a7 	rbit	r3, r7
 8001dd8:	fa97 f3a7 	rbit	r3, r7
 8001ddc:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001de2:	fa97 f3a7 	rbit	r3, r7
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	fa04 f303 	lsl.w	r3, r4, r3
 8001df2:	4213      	tst	r3, r2
 8001df4:	f47f aee6 	bne.w	8001bc4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df8:	f7ff f984 	bl	8001104 <HAL_GetTick>
 8001dfc:	eba0 0008 	sub.w	r0, r0, r8
 8001e00:	2802      	cmp	r0, #2
 8001e02:	d9e7      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x22c>
 8001e04:	e735      	b.n	8001c72 <HAL_RCC_OscConfig+0xca>
 8001e06:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	440b      	add	r3, r1
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	2702      	movs	r7, #2
 8001e14:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e16:	f7ff f975 	bl	8001104 <HAL_GetTick>
 8001e1a:	4680      	mov	r8, r0
 8001e1c:	fa97 f3a7 	rbit	r3, r7
 8001e20:	fa97 f3a7 	rbit	r3, r7
 8001e24:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e28:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001e2a:	fa97 f3a7 	rbit	r3, r7
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	f003 031f 	and.w	r3, r3, #31
 8001e36:	fa04 f303 	lsl.w	r3, r4, r3
 8001e3a:	4213      	tst	r3, r2
 8001e3c:	f43f aec2 	beq.w	8001bc4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e40:	f7ff f960 	bl	8001104 <HAL_GetTick>
 8001e44:	eba0 0008 	sub.w	r0, r0, r8
 8001e48:	2802      	cmp	r0, #2
 8001e4a:	d9e7      	bls.n	8001e1c <HAL_RCC_OscConfig+0x274>
 8001e4c:	e711      	b.n	8001c72 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4e:	4c1d      	ldr	r4, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x31c>)
 8001e50:	69e3      	ldr	r3, [r4, #28]
 8001e52:	00d9      	lsls	r1, r3, #3
 8001e54:	d434      	bmi.n	8001ec0 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	69e3      	ldr	r3, [r4, #28]
 8001e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	61e3      	str	r3, [r4, #28]
 8001e5e:	69e3      	ldr	r3, [r4, #28]
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e68:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6a:	4f18      	ldr	r7, [pc, #96]	; (8001ecc <HAL_RCC_OscConfig+0x324>)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	05da      	lsls	r2, r3, #23
 8001e70:	d52e      	bpl.n	8001ed0 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e72:	68eb      	ldr	r3, [r5, #12]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d13c      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x34a>
 8001e78:	6a23      	ldr	r3, [r4, #32]
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001e80:	f7ff f940 	bl	8001104 <HAL_GetTick>
 8001e84:	2702      	movs	r7, #2
 8001e86:	4682      	mov	sl, r0
 8001e88:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8a:	f04f 0801 	mov.w	r8, #1
 8001e8e:	fa97 f3a7 	rbit	r3, r7
 8001e92:	fa97 f3a7 	rbit	r3, r7
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d06b      	beq.n	8001f72 <HAL_RCC_OscConfig+0x3ca>
 8001e9a:	6a22      	ldr	r2, [r4, #32]
 8001e9c:	fa99 f3a9 	rbit	r3, r9
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	fa08 f303 	lsl.w	r3, r8, r3
 8001eac:	4213      	tst	r3, r2
 8001eae:	d057      	beq.n	8001f60 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 8001eb0:	2e00      	cmp	r6, #0
 8001eb2:	f43f ae8b 	beq.w	8001bcc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb6:	69e3      	ldr	r3, [r4, #28]
 8001eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	61e3      	str	r3, [r4, #28]
 8001ebe:	e685      	b.n	8001bcc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001ec0:	2600      	movs	r6, #0
 8001ec2:	e7d2      	b.n	8001e6a <HAL_RCC_OscConfig+0x2c2>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	10908120 	.word	0x10908120
 8001ecc:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001ed8:	f7ff f914 	bl	8001104 <HAL_GetTick>
 8001edc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	05db      	lsls	r3, r3, #23
 8001ee2:	d4c6      	bmi.n	8001e72 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee4:	f7ff f90e 	bl	8001104 <HAL_GetTick>
 8001ee8:	eba0 0008 	sub.w	r0, r0, r8
 8001eec:	2864      	cmp	r0, #100	; 0x64
 8001eee:	d9f6      	bls.n	8001ede <HAL_RCC_OscConfig+0x336>
 8001ef0:	e6bf      	b.n	8001c72 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef2:	bb3b      	cbnz	r3, 8001f44 <HAL_RCC_OscConfig+0x39c>
 8001ef4:	6a23      	ldr	r3, [r4, #32]
 8001ef6:	f023 0301 	bic.w	r3, r3, #1
 8001efa:	6223      	str	r3, [r4, #32]
 8001efc:	6a23      	ldr	r3, [r4, #32]
 8001efe:	f023 0304 	bic.w	r3, r3, #4
 8001f02:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001f04:	f7ff f8fe 	bl	8001104 <HAL_GetTick>
 8001f08:	2702      	movs	r7, #2
 8001f0a:	4682      	mov	sl, r0
 8001f0c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0e:	f04f 0801 	mov.w	r8, #1
 8001f12:	fa97 f3a7 	rbit	r3, r7
 8001f16:	fa97 f3a7 	rbit	r3, r7
 8001f1a:	b373      	cbz	r3, 8001f7a <HAL_RCC_OscConfig+0x3d2>
 8001f1c:	6a22      	ldr	r2, [r4, #32]
 8001f1e:	fa99 f3a9 	rbit	r3, r9
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	f003 031f 	and.w	r3, r3, #31
 8001f2a:	fa08 f303 	lsl.w	r3, r8, r3
 8001f2e:	4213      	tst	r3, r2
 8001f30:	d0be      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7ff f8e7 	bl	8001104 <HAL_GetTick>
 8001f36:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f3a:	eba0 000a 	sub.w	r0, r0, sl
 8001f3e:	4298      	cmp	r0, r3
 8001f40:	d9e7      	bls.n	8001f12 <HAL_RCC_OscConfig+0x36a>
 8001f42:	e696      	b.n	8001c72 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f44:	2b05      	cmp	r3, #5
 8001f46:	6a23      	ldr	r3, [r4, #32]
 8001f48:	d103      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3aa>
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6223      	str	r3, [r4, #32]
 8001f50:	e792      	b.n	8001e78 <HAL_RCC_OscConfig+0x2d0>
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	6223      	str	r3, [r4, #32]
 8001f58:	6a23      	ldr	r3, [r4, #32]
 8001f5a:	f023 0304 	bic.w	r3, r3, #4
 8001f5e:	e78e      	b.n	8001e7e <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f60:	f7ff f8d0 	bl	8001104 <HAL_GetTick>
 8001f64:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f68:	eba0 000a 	sub.w	r0, r0, sl
 8001f6c:	4298      	cmp	r0, r3
 8001f6e:	d98e      	bls.n	8001e8e <HAL_RCC_OscConfig+0x2e6>
 8001f70:	e67f      	b.n	8001c72 <HAL_RCC_OscConfig+0xca>
 8001f72:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f78:	e790      	b.n	8001e9c <HAL_RCC_OscConfig+0x2f4>
 8001f7a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f80:	e7cd      	b.n	8001f1e <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f82:	4c41      	ldr	r4, [pc, #260]	; (8002088 <HAL_RCC_OscConfig+0x4e0>)
 8001f84:	6863      	ldr	r3, [r4, #4]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	f43f ae45 	beq.w	8001c1a <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f90:	2a02      	cmp	r2, #2
 8001f92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f96:	d152      	bne.n	800203e <HAL_RCC_OscConfig+0x496>
 8001f98:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001f9c:	fab3 f383 	clz	r3, r3
 8001fa0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fa4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fae:	f7ff f8a9 	bl	8001104 <HAL_GetTick>
 8001fb2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001fb6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb8:	2601      	movs	r6, #1
 8001fba:	fa97 f3a7 	rbit	r3, r7
 8001fbe:	6822      	ldr	r2, [r4, #0]
 8001fc0:	fa97 f3a7 	rbit	r3, r7
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	fa06 f303 	lsl.w	r3, r6, r3
 8001fd0:	4213      	tst	r3, r2
 8001fd2:	d12d      	bne.n	8002030 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd4:	6862      	ldr	r2, [r4, #4]
 8001fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001fd8:	6a29      	ldr	r1, [r5, #32]
 8001fda:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001fde:	430b      	orrs	r3, r1
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	6063      	str	r3, [r4, #4]
 8001fe4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fe8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ff4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001ffe:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8002000:	f7ff f880 	bl	8001104 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002004:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8002006:	4607      	mov	r7, r0
 8002008:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800200c:	6822      	ldr	r2, [r4, #0]
 800200e:	fa95 f3a5 	rbit	r3, r5
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	fa06 f303 	lsl.w	r3, r6, r3
 800201e:	4213      	tst	r3, r2
 8002020:	f47f add8 	bne.w	8001bd4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002024:	f7ff f86e 	bl	8001104 <HAL_GetTick>
 8002028:	1bc0      	subs	r0, r0, r7
 800202a:	2802      	cmp	r0, #2
 800202c:	d9ec      	bls.n	8002008 <HAL_RCC_OscConfig+0x460>
 800202e:	e620      	b.n	8001c72 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002030:	f7ff f868 	bl	8001104 <HAL_GetTick>
 8002034:	eba0 0008 	sub.w	r0, r0, r8
 8002038:	2802      	cmp	r0, #2
 800203a:	d9be      	bls.n	8001fba <HAL_RCC_OscConfig+0x412>
 800203c:	e619      	b.n	8001c72 <HAL_RCC_OscConfig+0xca>
 800203e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800204a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002054:	f7ff f856 	bl	8001104 <HAL_GetTick>
 8002058:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800205c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205e:	2601      	movs	r6, #1
 8002060:	fa95 f3a5 	rbit	r3, r5
 8002064:	6822      	ldr	r2, [r4, #0]
 8002066:	fa95 f3a5 	rbit	r3, r5
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	fa06 f303 	lsl.w	r3, r6, r3
 8002076:	4213      	tst	r3, r2
 8002078:	f43f adac 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207c:	f7ff f842 	bl	8001104 <HAL_GetTick>
 8002080:	1bc0      	subs	r0, r0, r7
 8002082:	2802      	cmp	r0, #2
 8002084:	d9ec      	bls.n	8002060 <HAL_RCC_OscConfig+0x4b8>
 8002086:	e5f4      	b.n	8001c72 <HAL_RCC_OscConfig+0xca>
 8002088:	40021000 	.word	0x40021000

0800208c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800208c:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800208e:	4c13      	ldr	r4, [pc, #76]	; (80020dc <HAL_RCC_GetSysClockFreq+0x50>)
 8002090:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002092:	f001 030c 	and.w	r3, r1, #12
 8002096:	2b08      	cmp	r3, #8
 8002098:	d11e      	bne.n	80020d8 <HAL_RCC_GetSysClockFreq+0x4c>
 800209a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800209e:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020a2:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	fa22 f303 	lsr.w	r3, r2, r3
 80020ae:	4a0c      	ldr	r2, [pc, #48]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x54>)
 80020b0:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020b4:	220f      	movs	r2, #15
 80020b6:	fa92 f2a2 	rbit	r2, r2
 80020ba:	fab2 f282 	clz	r2, r2
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	40d3      	lsrs	r3, r2
 80020c4:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x58>)
 80020c6:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020c8:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80020ca:	bf4a      	itet	mi
 80020cc:	4b06      	ldrmi	r3, [pc, #24]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80020ce:	4b07      	ldrpl	r3, [pc, #28]	; (80020ec <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80020d0:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80020d4:	4358      	muls	r0, r3
 80020d6:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80020d8:	4803      	ldr	r0, [pc, #12]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80020da:	bd10      	pop	{r4, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	080040bc 	.word	0x080040bc
 80020e4:	080040cc 	.word	0x080040cc
 80020e8:	007a1200 	.word	0x007a1200
 80020ec:	003d0900 	.word	0x003d0900

080020f0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80020f0:	4a5c      	ldr	r2, [pc, #368]	; (8002264 <HAL_RCC_ClockConfig+0x174>)
 80020f2:	6813      	ldr	r3, [r2, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	428b      	cmp	r3, r1
{
 80020fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020fe:	4606      	mov	r6, r0
 8002100:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002102:	d330      	bcc.n	8002166 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002104:	6832      	ldr	r2, [r6, #0]
 8002106:	0791      	lsls	r1, r2, #30
 8002108:	d43a      	bmi.n	8002180 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210a:	07d2      	lsls	r2, r2, #31
 800210c:	d440      	bmi.n	8002190 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800210e:	4a55      	ldr	r2, [pc, #340]	; (8002264 <HAL_RCC_ClockConfig+0x174>)
 8002110:	6813      	ldr	r3, [r2, #0]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	429d      	cmp	r5, r3
 8002118:	f0c0 8092 	bcc.w	8002240 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	6832      	ldr	r2, [r6, #0]
 800211e:	4c52      	ldr	r4, [pc, #328]	; (8002268 <HAL_RCC_ClockConfig+0x178>)
 8002120:	f012 0f04 	tst.w	r2, #4
 8002124:	f040 8097 	bne.w	8002256 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002128:	0713      	lsls	r3, r2, #28
 800212a:	d506      	bpl.n	800213a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212c:	6863      	ldr	r3, [r4, #4]
 800212e:	6932      	ldr	r2, [r6, #16]
 8002130:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002134:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002138:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800213a:	f7ff ffa7 	bl	800208c <HAL_RCC_GetSysClockFreq>
 800213e:	6863      	ldr	r3, [r4, #4]
 8002140:	22f0      	movs	r2, #240	; 0xf0
 8002142:	fa92 f2a2 	rbit	r2, r2
 8002146:	fab2 f282 	clz	r2, r2
 800214a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800214e:	40d3      	lsrs	r3, r2
 8002150:	4a46      	ldr	r2, [pc, #280]	; (800226c <HAL_RCC_ClockConfig+0x17c>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	40d8      	lsrs	r0, r3
 8002156:	4b46      	ldr	r3, [pc, #280]	; (8002270 <HAL_RCC_ClockConfig+0x180>)
 8002158:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800215a:	2000      	movs	r0, #0
 800215c:	f001 fdf6 	bl	8003d4c <HAL_InitTick>
  return HAL_OK;
 8002160:	2000      	movs	r0, #0
}
 8002162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	6813      	ldr	r3, [r2, #0]
 8002168:	f023 0307 	bic.w	r3, r3, #7
 800216c:	430b      	orrs	r3, r1
 800216e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002170:	6813      	ldr	r3, [r2, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	4299      	cmp	r1, r3
 8002178:	d0c4      	beq.n	8002104 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800217a:	2001      	movs	r0, #1
 800217c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002180:	4939      	ldr	r1, [pc, #228]	; (8002268 <HAL_RCC_ClockConfig+0x178>)
 8002182:	68b0      	ldr	r0, [r6, #8]
 8002184:	684b      	ldr	r3, [r1, #4]
 8002186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800218a:	4303      	orrs	r3, r0
 800218c:	604b      	str	r3, [r1, #4]
 800218e:	e7bc      	b.n	800210a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002190:	6872      	ldr	r2, [r6, #4]
 8002192:	4c35      	ldr	r4, [pc, #212]	; (8002268 <HAL_RCC_ClockConfig+0x178>)
 8002194:	2a01      	cmp	r2, #1
 8002196:	d128      	bne.n	80021ea <HAL_RCC_ClockConfig+0xfa>
 8002198:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800219c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a0:	6821      	ldr	r1, [r4, #0]
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	f003 031f 	and.w	r3, r3, #31
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b4:	d0e1      	beq.n	800217a <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b6:	6863      	ldr	r3, [r4, #4]
 80021b8:	f023 0303 	bic.w	r3, r3, #3
 80021bc:	431a      	orrs	r2, r3
 80021be:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 80021c0:	f7fe ffa0 	bl	8001104 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c4:	6873      	ldr	r3, [r6, #4]
 80021c6:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80021c8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ca:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ce:	d11f      	bne.n	8002210 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d0:	6863      	ldr	r3, [r4, #4]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d099      	beq.n	800210e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021da:	f7fe ff93 	bl	8001104 <HAL_GetTick>
 80021de:	1bc0      	subs	r0, r0, r7
 80021e0:	4540      	cmp	r0, r8
 80021e2:	d9f5      	bls.n	80021d0 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 80021e4:	2003      	movs	r0, #3
 80021e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ea:	2a02      	cmp	r2, #2
 80021ec:	bf0c      	ite	eq
 80021ee:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80021f2:	2302      	movne	r3, #2
 80021f4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f8:	6820      	ldr	r0, [r4, #0]
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	2101      	movs	r1, #1
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	4203      	tst	r3, r0
 800220e:	e7d1      	b.n	80021b4 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002210:	2b02      	cmp	r3, #2
 8002212:	d110      	bne.n	8002236 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002214:	6863      	ldr	r3, [r4, #4]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b08      	cmp	r3, #8
 800221c:	f43f af77 	beq.w	800210e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002220:	f7fe ff70 	bl	8001104 <HAL_GetTick>
 8002224:	1bc0      	subs	r0, r0, r7
 8002226:	4540      	cmp	r0, r8
 8002228:	d9f4      	bls.n	8002214 <HAL_RCC_ClockConfig+0x124>
 800222a:	e7db      	b.n	80021e4 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222c:	f7fe ff6a 	bl	8001104 <HAL_GetTick>
 8002230:	1bc0      	subs	r0, r0, r7
 8002232:	4540      	cmp	r0, r8
 8002234:	d8d6      	bhi.n	80021e4 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002236:	6863      	ldr	r3, [r4, #4]
 8002238:	f013 0f0c 	tst.w	r3, #12
 800223c:	d1f6      	bne.n	800222c <HAL_RCC_ClockConfig+0x13c>
 800223e:	e766      	b.n	800210e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002240:	6813      	ldr	r3, [r2, #0]
 8002242:	f023 0307 	bic.w	r3, r3, #7
 8002246:	432b      	orrs	r3, r5
 8002248:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800224a:	6813      	ldr	r3, [r2, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	429d      	cmp	r5, r3
 8002252:	d192      	bne.n	800217a <HAL_RCC_ClockConfig+0x8a>
 8002254:	e762      	b.n	800211c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002256:	6863      	ldr	r3, [r4, #4]
 8002258:	68f1      	ldr	r1, [r6, #12]
 800225a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800225e:	430b      	orrs	r3, r1
 8002260:	6063      	str	r3, [r4, #4]
 8002262:	e761      	b.n	8002128 <HAL_RCC_ClockConfig+0x38>
 8002264:	40022000 	.word	0x40022000
 8002268:	40021000 	.word	0x40021000
 800226c:	0800410b 	.word	0x0800410b
 8002270:	20000008 	.word	0x20000008

08002274 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002274:	4b01      	ldr	r3, [pc, #4]	; (800227c <HAL_RCC_GetHCLKFreq+0x8>)
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000008 	.word	0x20000008

08002280 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002282:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	fa92 f2a2 	rbit	r2, r2
 800228c:	fab2 f282 	clz	r2, r2
 8002290:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002294:	40d3      	lsrs	r3, r2
 8002296:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002298:	5cd3      	ldrb	r3, [r2, r3]
 800229a:	4a04      	ldr	r2, [pc, #16]	; (80022ac <HAL_RCC_GetPCLK1Freq+0x2c>)
 800229c:	6810      	ldr	r0, [r2, #0]
}    
 800229e:	40d8      	lsrs	r0, r3
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40021000 	.word	0x40021000
 80022a8:	0800411b 	.word	0x0800411b
 80022ac:	20000008 	.word	0x20000008

080022b0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	fa92 f2a2 	rbit	r2, r2
 80022bc:	fab2 f282 	clz	r2, r2
 80022c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80022c4:	40d3      	lsrs	r3, r2
 80022c6:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022c8:	5cd3      	ldrb	r3, [r2, r3]
 80022ca:	4a04      	ldr	r2, [pc, #16]	; (80022dc <HAL_RCC_GetPCLK2Freq+0x2c>)
 80022cc:	6810      	ldr	r0, [r2, #0]
} 
 80022ce:	40d8      	lsrs	r0, r3
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	0800411b 	.word	0x0800411b
 80022dc:	20000008 	.word	0x20000008

080022e0 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022e0:	230f      	movs	r3, #15
 80022e2:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_GetClockConfig+0x34>)
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	f002 0203 	and.w	r2, r2, #3
 80022ec:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80022f4:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80022fc:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	08db      	lsrs	r3, r3, #3
 8002302:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002306:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <HAL_RCC_GetClockConfig+0x38>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	600b      	str	r3, [r1, #0]
 8002312:	4770      	bx	lr
 8002314:	40021000 	.word	0x40021000
 8002318:	40022000 	.word	0x40022000

0800231c <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800231c:	6803      	ldr	r3, [r0, #0]
{
 800231e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002322:	03dd      	lsls	r5, r3, #15
{
 8002324:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002326:	d523      	bpl.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002328:	4d7c      	ldr	r5, [pc, #496]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800232a:	69eb      	ldr	r3, [r5, #28]
 800232c:	00d8      	lsls	r0, r3, #3
 800232e:	f100 8098 	bmi.w	8002462 <HAL_RCCEx_PeriphCLKConfig+0x146>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	69eb      	ldr	r3, [r5, #28]
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002338:	61eb      	str	r3, [r5, #28]
 800233a:	69eb      	ldr	r3, [r5, #28]
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	9301      	str	r3, [sp, #4]
 8002342:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002344:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002346:	4f76      	ldr	r7, [pc, #472]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	05d9      	lsls	r1, r3, #23
 800234c:	f140 808b 	bpl.w	8002466 <HAL_RCCEx_PeriphCLKConfig+0x14a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002350:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002352:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002356:	f040 809b 	bne.w	8002490 <HAL_RCCEx_PeriphCLKConfig+0x174>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800235a:	6a2b      	ldr	r3, [r5, #32]
 800235c:	6862      	ldr	r2, [r4, #4]
 800235e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002362:	4313      	orrs	r3, r2
 8002364:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002366:	b11e      	cbz	r6, 8002370 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002368:	69eb      	ldr	r3, [r5, #28]
 800236a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236e:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002370:	6820      	ldr	r0, [r4, #0]
 8002372:	07c7      	lsls	r7, r0, #31
 8002374:	d506      	bpl.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002376:	4a69      	ldr	r2, [pc, #420]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002378:	68a1      	ldr	r1, [r4, #8]
 800237a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800237c:	f023 0303 	bic.w	r3, r3, #3
 8002380:	430b      	orrs	r3, r1
 8002382:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002384:	0786      	lsls	r6, r0, #30
 8002386:	d506      	bpl.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002388:	4a64      	ldr	r2, [pc, #400]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800238a:	68e1      	ldr	r1, [r4, #12]
 800238c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800238e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002392:	430b      	orrs	r3, r1
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002396:	0745      	lsls	r5, r0, #29
 8002398:	d506      	bpl.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800239a:	4a60      	ldr	r2, [pc, #384]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800239c:	6921      	ldr	r1, [r4, #16]
 800239e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023a0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023a8:	0681      	lsls	r1, r0, #26
 80023aa:	d506      	bpl.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ac:	4a5b      	ldr	r2, [pc, #364]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023ae:	69e1      	ldr	r1, [r4, #28]
 80023b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023b2:	f023 0310 	bic.w	r3, r3, #16
 80023b6:	430b      	orrs	r3, r1
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023ba:	0382      	lsls	r2, r0, #14
 80023bc:	d506      	bpl.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80023be:	4a57      	ldr	r2, [pc, #348]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80023c2:	6853      	ldr	r3, [r2, #4]
 80023c4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80023c8:	430b      	orrs	r3, r1
 80023ca:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023cc:	0643      	lsls	r3, r0, #25
 80023ce:	d506      	bpl.n	80023de <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023d0:	4a52      	ldr	r2, [pc, #328]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023d2:	6a21      	ldr	r1, [r4, #32]
 80023d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023d6:	f023 0320 	bic.w	r3, r3, #32
 80023da:	430b      	orrs	r3, r1
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023de:	0707      	lsls	r7, r0, #28
 80023e0:	d506      	bpl.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023e2:	4a4e      	ldr	r2, [pc, #312]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023e4:	6961      	ldr	r1, [r4, #20]
 80023e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80023ec:	430b      	orrs	r3, r1
 80023ee:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023f0:	06c6      	lsls	r6, r0, #27
 80023f2:	d506      	bpl.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023f4:	4a49      	ldr	r2, [pc, #292]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023f6:	69a1      	ldr	r1, [r4, #24]
 80023f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80023fe:	430b      	orrs	r3, r1
 8002400:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002402:	0585      	lsls	r5, r0, #22
 8002404:	d506      	bpl.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002406:	4a45      	ldr	r2, [pc, #276]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002408:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800240a:	6853      	ldr	r3, [r2, #4]
 800240c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002410:	430b      	orrs	r3, r1
 8002412:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002414:	0601      	lsls	r1, r0, #24
 8002416:	d506      	bpl.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002418:	4a40      	ldr	r2, [pc, #256]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800241a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800241c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800241e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002422:	430b      	orrs	r3, r1
 8002424:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002426:	05c2      	lsls	r2, r0, #23
 8002428:	d506      	bpl.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800242a:	4a3c      	ldr	r2, [pc, #240]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800242c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800242e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002430:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8002434:	430b      	orrs	r3, r1
 8002436:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002438:	04c3      	lsls	r3, r0, #19
 800243a:	d506      	bpl.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800243c:	4a37      	ldr	r2, [pc, #220]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800243e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002440:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002446:	430b      	orrs	r3, r1
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800244a:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 800244e:	d01c      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002450:	4a32      	ldr	r2, [pc, #200]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002452:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002454:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002456:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800245a:	430b      	orrs	r3, r1
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800245e:	2000      	movs	r0, #0
 8002460:	e013      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    FlagStatus       pwrclkchanged = RESET;
 8002462:	2600      	movs	r6, #0
 8002464:	e76f      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800246e:	f7fe fe49 	bl	8001104 <HAL_GetTick>
 8002472:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	05da      	lsls	r2, r3, #23
 8002478:	f53f af6a 	bmi.w	8002350 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247c:	f7fe fe42 	bl	8001104 <HAL_GetTick>
 8002480:	eba0 0008 	sub.w	r0, r0, r8
 8002484:	2864      	cmp	r0, #100	; 0x64
 8002486:	d9f5      	bls.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x158>
          return HAL_TIMEOUT;
 8002488:	2003      	movs	r0, #3
}
 800248a:	b002      	add	sp, #8
 800248c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002490:	6862      	ldr	r2, [r4, #4]
 8002492:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002496:	4293      	cmp	r3, r2
 8002498:	f43f af5f 	beq.w	800235a <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800249c:	6a29      	ldr	r1, [r5, #32]
 800249e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a2:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80024a6:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80024aa:	f8df e078 	ldr.w	lr, [pc, #120]	; 8002524 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80024ae:	fab2 f282 	clz	r2, r2
 80024b2:	4472      	add	r2, lr
 80024b4:	0092      	lsls	r2, r2, #2
 80024b6:	2701      	movs	r7, #1
 80024b8:	6017      	str	r7, [r2, #0]
 80024ba:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	4473      	add	r3, lr
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024ca:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 80024cc:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024ce:	f57f af44 	bpl.w	800235a <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 80024d2:	f7fe fe17 	bl	8001104 <HAL_GetTick>
 80024d6:	f04f 0802 	mov.w	r8, #2
 80024da:	4682      	mov	sl, r0
 80024dc:	46c1      	mov	r9, r8
 80024de:	fa98 f3a8 	rbit	r3, r8
 80024e2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e6:	b1a3      	cbz	r3, 8002512 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80024e8:	6a2a      	ldr	r2, [r5, #32]
 80024ea:	fa99 f3a9 	rbit	r3, r9
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	fa07 f303 	lsl.w	r3, r7, r3
 80024fa:	4213      	tst	r3, r2
 80024fc:	f47f af2d 	bne.w	800235a <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002500:	f7fe fe00 	bl	8001104 <HAL_GetTick>
 8002504:	f241 3388 	movw	r3, #5000	; 0x1388
 8002508:	eba0 000a 	sub.w	r0, r0, sl
 800250c:	4298      	cmp	r0, r3
 800250e:	d9e6      	bls.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002510:	e7ba      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002512:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002516:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002518:	e7e7      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	40007000 	.word	0x40007000
 8002524:	10908100 	.word	0x10908100

08002528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002528:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800252a:	4604      	mov	r4, r0
 800252c:	2800      	cmp	r0, #0
 800252e:	d04e      	beq.n	80025ce <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002534:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002538:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800253c:	b91b      	cbnz	r3, 8002546 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800253e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002542:	f001 fb91 	bl	8003c68 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002546:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002548:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800254a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800254e:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002550:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8002552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002556:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800255a:	600b      	str	r3, [r1, #0]
 800255c:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002560:	d932      	bls.n	80025c8 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002562:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002564:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002568:	bf18      	it	ne
 800256a:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800256c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800256e:	b92b      	cbnz	r3, 800257c <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002570:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002574:	bf8c      	ite	hi
 8002576:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002578:	2301      	movls	r3, #1
 800257a:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800257c:	68a6      	ldr	r6, [r4, #8]
 800257e:	6863      	ldr	r3, [r4, #4]
 8002580:	69a5      	ldr	r5, [r4, #24]
 8002582:	4333      	orrs	r3, r6
 8002584:	6926      	ldr	r6, [r4, #16]
 8002586:	4333      	orrs	r3, r6
 8002588:	6966      	ldr	r6, [r4, #20]
 800258a:	4333      	orrs	r3, r6
 800258c:	69e6      	ldr	r6, [r4, #28]
 800258e:	4333      	orrs	r3, r6
 8002590:	6a26      	ldr	r6, [r4, #32]
 8002592:	4333      	orrs	r3, r6
 8002594:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002596:	4333      	orrs	r3, r6
 8002598:	f405 7600 	and.w	r6, r5, #512	; 0x200
 800259c:	4333      	orrs	r3, r6
 800259e:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80025a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025a2:	431a      	orrs	r2, r3
 80025a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025a6:	0c2d      	lsrs	r5, r5, #16
 80025a8:	431a      	orrs	r2, r3
 80025aa:	f005 0504 	and.w	r5, r5, #4
 80025ae:	432a      	orrs	r2, r5
 80025b0:	4302      	orrs	r2, r0
 80025b2:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025b4:	69cb      	ldr	r3, [r1, #28]
 80025b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025ba:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025bc:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80025be:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025c0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80025c2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 80025c6:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80025c8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80025cc:	e7cc      	b.n	8002568 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 80025ce:	2001      	movs	r0, #1
}
 80025d0:	bd70      	pop	{r4, r5, r6, pc}

080025d2 <HAL_TIM_Base_MspInit>:
 80025d2:	4770      	bx	lr

080025d4 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025d4:	6803      	ldr	r3, [r0, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80025e6:	2000      	movs	r0, #0
 80025e8:	4770      	bx	lr

080025ea <HAL_TIM_OC_DelayElapsedCallback>:
 80025ea:	4770      	bx	lr

080025ec <HAL_TIM_IC_CaptureCallback>:
 80025ec:	4770      	bx	lr

080025ee <HAL_TIM_PWM_PulseFinishedCallback>:
 80025ee:	4770      	bx	lr

080025f0 <HAL_TIM_TriggerCallback>:
 80025f0:	4770      	bx	lr

080025f2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025f2:	6803      	ldr	r3, [r0, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	0791      	lsls	r1, r2, #30
{
 80025f8:	b510      	push	{r4, lr}
 80025fa:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025fc:	d50f      	bpl.n	800261e <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	0792      	lsls	r2, r2, #30
 8002602:	d50c      	bpl.n	800261e <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002604:	f06f 0202 	mvn.w	r2, #2
 8002608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800260a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800260c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800260e:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002610:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002612:	f000 8085 	beq.w	8002720 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002616:	f7ff ffe9 	bl	80025ec <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261a:	2300      	movs	r3, #0
 800261c:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	691a      	ldr	r2, [r3, #16]
 8002622:	0752      	lsls	r2, r2, #29
 8002624:	d510      	bpl.n	8002648 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	0750      	lsls	r0, r2, #29
 800262a:	d50d      	bpl.n	8002648 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800262c:	f06f 0204 	mvn.w	r2, #4
 8002630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002632:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002634:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002636:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800263a:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800263c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800263e:	d075      	beq.n	800272c <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002640:	f7ff ffd4 	bl	80025ec <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002644:	2300      	movs	r3, #0
 8002646:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	0711      	lsls	r1, r2, #28
 800264e:	d50f      	bpl.n	8002670 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	0712      	lsls	r2, r2, #28
 8002654:	d50c      	bpl.n	8002670 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002656:	f06f 0208 	mvn.w	r2, #8
 800265a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800265c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800265e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002660:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002662:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002664:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002666:	d067      	beq.n	8002738 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002668:	f7ff ffc0 	bl	80025ec <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266c:	2300      	movs	r3, #0
 800266e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	06d0      	lsls	r0, r2, #27
 8002676:	d510      	bpl.n	800269a <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	06d1      	lsls	r1, r2, #27
 800267c:	d50d      	bpl.n	800269a <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800267e:	f06f 0210 	mvn.w	r2, #16
 8002682:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002684:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002686:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002688:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800268c:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800268e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002690:	d058      	beq.n	8002744 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002692:	f7ff ffab 	bl	80025ec <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002696:	2300      	movs	r3, #0
 8002698:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	691a      	ldr	r2, [r3, #16]
 800269e:	07d2      	lsls	r2, r2, #31
 80026a0:	d508      	bpl.n	80026b4 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	07d0      	lsls	r0, r2, #31
 80026a6:	d505      	bpl.n	80026b4 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026a8:	f06f 0201 	mvn.w	r2, #1
 80026ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ae:	4620      	mov	r0, r4
 80026b0:	f001 fa9e 	bl	8003bf0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	0611      	lsls	r1, r2, #24
 80026ba:	d508      	bpl.n	80026ce <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	0612      	lsls	r2, r2, #24
 80026c0:	d505      	bpl.n	80026ce <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80026c8:	4620      	mov	r0, r4
 80026ca:	f000 f8bc 	bl	8002846 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	05d0      	lsls	r0, r2, #23
 80026d4:	d508      	bpl.n	80026e8 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	0611      	lsls	r1, r2, #24
 80026da:	d505      	bpl.n	80026e8 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026dc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80026e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80026e2:	4620      	mov	r0, r4
 80026e4:	f000 f8b0 	bl	8002848 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	0652      	lsls	r2, r2, #25
 80026ee:	d508      	bpl.n	8002702 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	0650      	lsls	r0, r2, #25
 80026f4:	d505      	bpl.n	8002702 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80026fc:	4620      	mov	r0, r4
 80026fe:	f7ff ff77 	bl	80025f0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002702:	6823      	ldr	r3, [r4, #0]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	0691      	lsls	r1, r2, #26
 8002708:	d522      	bpl.n	8002750 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	0692      	lsls	r2, r2, #26
 800270e:	d51f      	bpl.n	8002750 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002710:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002714:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002716:	611a      	str	r2, [r3, #16]
    }
  }
}
 8002718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800271c:	f000 b892 	b.w	8002844 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002720:	f7ff ff63 	bl	80025ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002724:	4620      	mov	r0, r4
 8002726:	f7ff ff62 	bl	80025ee <HAL_TIM_PWM_PulseFinishedCallback>
 800272a:	e776      	b.n	800261a <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272c:	f7ff ff5d 	bl	80025ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002730:	4620      	mov	r0, r4
 8002732:	f7ff ff5c 	bl	80025ee <HAL_TIM_PWM_PulseFinishedCallback>
 8002736:	e785      	b.n	8002644 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002738:	f7ff ff57 	bl	80025ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800273c:	4620      	mov	r0, r4
 800273e:	f7ff ff56 	bl	80025ee <HAL_TIM_PWM_PulseFinishedCallback>
 8002742:	e793      	b.n	800266c <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002744:	f7ff ff51 	bl	80025ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002748:	4620      	mov	r0, r4
 800274a:	f7ff ff50 	bl	80025ee <HAL_TIM_PWM_PulseFinishedCallback>
 800274e:	e7a2      	b.n	8002696 <HAL_TIM_IRQHandler+0xa4>
 8002750:	bd10      	pop	{r4, pc}
	...

08002754 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002754:	4a2c      	ldr	r2, [pc, #176]	; (8002808 <TIM_Base_SetConfig+0xb4>)
  tmpcr1 = TIMx->CR1;
 8002756:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002758:	4290      	cmp	r0, r2
 800275a:	d00e      	beq.n	800277a <TIM_Base_SetConfig+0x26>
 800275c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002760:	d00b      	beq.n	800277a <TIM_Base_SetConfig+0x26>
 8002762:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002766:	4290      	cmp	r0, r2
 8002768:	d007      	beq.n	800277a <TIM_Base_SetConfig+0x26>
 800276a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800276e:	4290      	cmp	r0, r2
 8002770:	d003      	beq.n	800277a <TIM_Base_SetConfig+0x26>
 8002772:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002776:	4290      	cmp	r0, r2
 8002778:	d115      	bne.n	80027a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800277a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800277c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002780:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002782:	4a21      	ldr	r2, [pc, #132]	; (8002808 <TIM_Base_SetConfig+0xb4>)
 8002784:	4290      	cmp	r0, r2
 8002786:	d019      	beq.n	80027bc <TIM_Base_SetConfig+0x68>
 8002788:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800278c:	d016      	beq.n	80027bc <TIM_Base_SetConfig+0x68>
 800278e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002792:	4290      	cmp	r0, r2
 8002794:	d012      	beq.n	80027bc <TIM_Base_SetConfig+0x68>
 8002796:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800279a:	4290      	cmp	r0, r2
 800279c:	d00e      	beq.n	80027bc <TIM_Base_SetConfig+0x68>
 800279e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80027a2:	4290      	cmp	r0, r2
 80027a4:	d00a      	beq.n	80027bc <TIM_Base_SetConfig+0x68>
 80027a6:	4a19      	ldr	r2, [pc, #100]	; (800280c <TIM_Base_SetConfig+0xb8>)
 80027a8:	4290      	cmp	r0, r2
 80027aa:	d007      	beq.n	80027bc <TIM_Base_SetConfig+0x68>
 80027ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027b0:	4290      	cmp	r0, r2
 80027b2:	d003      	beq.n	80027bc <TIM_Base_SetConfig+0x68>
 80027b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027b8:	4290      	cmp	r0, r2
 80027ba:	d103      	bne.n	80027c4 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027bc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80027be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027c2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027c4:	694a      	ldr	r2, [r1, #20]
 80027c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ca:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80027cc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027ce:	688b      	ldr	r3, [r1, #8]
 80027d0:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80027d2:	680b      	ldr	r3, [r1, #0]
 80027d4:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80027d6:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <TIM_Base_SetConfig+0xb4>)
 80027d8:	4298      	cmp	r0, r3
 80027da:	d00f      	beq.n	80027fc <TIM_Base_SetConfig+0xa8>
 80027dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e0:	4298      	cmp	r0, r3
 80027e2:	d00b      	beq.n	80027fc <TIM_Base_SetConfig+0xa8>
 80027e4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80027e8:	4298      	cmp	r0, r3
 80027ea:	d007      	beq.n	80027fc <TIM_Base_SetConfig+0xa8>
 80027ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027f0:	4298      	cmp	r0, r3
 80027f2:	d003      	beq.n	80027fc <TIM_Base_SetConfig+0xa8>
 80027f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027f8:	4298      	cmp	r0, r3
 80027fa:	d101      	bne.n	8002800 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027fc:	690b      	ldr	r3, [r1, #16]
 80027fe:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002800:	2301      	movs	r3, #1
 8002802:	6143      	str	r3, [r0, #20]
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40012c00 	.word	0x40012c00
 800280c:	40014000 	.word	0x40014000

08002810 <HAL_TIM_Base_Init>:
{ 
 8002810:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002812:	4604      	mov	r4, r0
 8002814:	b1a0      	cbz	r0, 8002840 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002816:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800281a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800281e:	b91b      	cbnz	r3, 8002828 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002820:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002824:	f7ff fed5 	bl	80025d2 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002828:	2302      	movs	r3, #2
 800282a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800282e:	6820      	ldr	r0, [r4, #0]
 8002830:	1d21      	adds	r1, r4, #4
 8002832:	f7ff ff8f 	bl	8002754 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002836:	2301      	movs	r3, #1
 8002838:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800283c:	2000      	movs	r0, #0
 800283e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002840:	2001      	movs	r0, #1
}
 8002842:	bd10      	pop	{r4, pc}

08002844 <HAL_TIMEx_CommutationCallback>:
 8002844:	4770      	bx	lr

08002846 <HAL_TIMEx_BreakCallback>:
 8002846:	4770      	bx	lr

08002848 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002848:	4770      	bx	lr
	...

0800284c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800284c:	b538      	push	{r3, r4, r5, lr}
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800284e:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002850:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002852:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002854:	6829      	ldr	r1, [r5, #0]
{
 8002856:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002858:	6900      	ldr	r0, [r0, #16]
 800285a:	4302      	orrs	r2, r0
 800285c:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800285e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002862:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002864:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002868:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800286a:	430a      	orrs	r2, r1
 800286c:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800286e:	686a      	ldr	r2, [r5, #4]
 8002870:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002872:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002874:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002878:	430a      	orrs	r2, r1
 800287a:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800287c:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800287e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002880:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002884:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002886:	430a      	orrs	r2, r1
 8002888:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800288a:	4a6e      	ldr	r2, [pc, #440]	; (8002a44 <UART_SetConfig+0x1f8>)
 800288c:	4295      	cmp	r5, r2
 800288e:	d112      	bne.n	80028b6 <UART_SetConfig+0x6a>
 8002890:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8002894:	496c      	ldr	r1, [pc, #432]	; (8002a48 <UART_SetConfig+0x1fc>)
 8002896:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002898:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800289c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028a0:	5c8a      	ldrb	r2, [r1, r2]
 80028a2:	d066      	beq.n	8002972 <UART_SetConfig+0x126>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 80028a4:	2a08      	cmp	r2, #8
 80028a6:	d819      	bhi.n	80028dc <UART_SetConfig+0x90>
 80028a8:	e8df f002 	tbb	[pc, r2]
 80028ac:	189e92c2 	.word	0x189e92c2
 80028b0:	181818a9 	.word	0x181818a9
 80028b4:	ac          	.byte	0xac
 80028b5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028b6:	4a65      	ldr	r2, [pc, #404]	; (8002a4c <UART_SetConfig+0x200>)
 80028b8:	4295      	cmp	r5, r2
 80028ba:	d124      	bne.n	8002906 <UART_SetConfig+0xba>
 80028bc:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80028c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028c2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80028c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80028ca:	f000 80a0 	beq.w	8002a0e <UART_SetConfig+0x1c2>
 80028ce:	d807      	bhi.n	80028e0 <UART_SetConfig+0x94>
 80028d0:	2a00      	cmp	r2, #0
 80028d2:	f000 80aa 	beq.w	8002a2a <UART_SetConfig+0x1de>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028da:	d076      	beq.n	80029ca <UART_SetConfig+0x17e>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80028dc:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80028de:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028e0:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80028e4:	f000 8099 	beq.w	8002a1a <UART_SetConfig+0x1ce>
 80028e8:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80028ec:	d1f3      	bne.n	80028d6 <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f2:	d179      	bne.n	80029e8 <UART_SetConfig+0x19c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80028f4:	6860      	ldr	r0, [r4, #4]
 80028f6:	0843      	lsrs	r3, r0, #1
 80028f8:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80028fc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002900:	fbb3 f3f0 	udiv	r3, r3, r0
 8002904:	e054      	b.n	80029b0 <UART_SetConfig+0x164>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002906:	4a52      	ldr	r2, [pc, #328]	; (8002a50 <UART_SetConfig+0x204>)
 8002908:	4295      	cmp	r5, r2
 800290a:	d10e      	bne.n	800292a <UART_SetConfig+0xde>
 800290c:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8002910:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002912:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8002916:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800291a:	d078      	beq.n	8002a0e <UART_SetConfig+0x1c2>
 800291c:	d9d8      	bls.n	80028d0 <UART_SetConfig+0x84>
 800291e:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8002922:	d07a      	beq.n	8002a1a <UART_SetConfig+0x1ce>
 8002924:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002928:	e7e0      	b.n	80028ec <UART_SetConfig+0xa0>
 800292a:	4a4a      	ldr	r2, [pc, #296]	; (8002a54 <UART_SetConfig+0x208>)
 800292c:	4295      	cmp	r5, r2
 800292e:	d10e      	bne.n	800294e <UART_SetConfig+0x102>
 8002930:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8002934:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002936:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800293a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800293e:	d066      	beq.n	8002a0e <UART_SetConfig+0x1c2>
 8002940:	d9c6      	bls.n	80028d0 <UART_SetConfig+0x84>
 8002942:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002946:	d068      	beq.n	8002a1a <UART_SetConfig+0x1ce>
 8002948:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800294c:	e7ce      	b.n	80028ec <UART_SetConfig+0xa0>
 800294e:	4a42      	ldr	r2, [pc, #264]	; (8002a58 <UART_SetConfig+0x20c>)
 8002950:	4295      	cmp	r5, r2
 8002952:	d1c0      	bne.n	80028d6 <UART_SetConfig+0x8a>
 8002954:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002958:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800295a:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800295e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002962:	d054      	beq.n	8002a0e <UART_SetConfig+0x1c2>
 8002964:	d9b4      	bls.n	80028d0 <UART_SetConfig+0x84>
 8002966:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800296a:	d056      	beq.n	8002a1a <UART_SetConfig+0x1ce>
 800296c:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8002970:	e7bc      	b.n	80028ec <UART_SetConfig+0xa0>
    switch (clocksource)
 8002972:	2a08      	cmp	r2, #8
 8002974:	d829      	bhi.n	80029ca <UART_SetConfig+0x17e>
 8002976:	a301      	add	r3, pc, #4	; (adr r3, 800297c <UART_SetConfig+0x130>)
 8002978:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800297c:	080029a1 	.word	0x080029a1
 8002980:	080029c5 	.word	0x080029c5
 8002984:	080028f5 	.word	0x080028f5
 8002988:	080029cb 	.word	0x080029cb
 800298c:	08002a15 	.word	0x08002a15
 8002990:	080029cb 	.word	0x080029cb
 8002994:	080029cb 	.word	0x080029cb
 8002998:	080029cb 	.word	0x080029cb
 800299c:	08002a21 	.word	0x08002a21
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80029a0:	f7ff fc6e 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029a4:	6861      	ldr	r1, [r4, #4]
 80029a6:	084a      	lsrs	r2, r1, #1
 80029a8:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80029ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80029b2:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80029b4:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 80029b8:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029ba:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80029be:	4313      	orrs	r3, r2
 80029c0:	60cb      	str	r3, [r1, #12]
 80029c2:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029c4:	f7ff fc74 	bl	80022b0 <HAL_RCC_GetPCLK2Freq>
 80029c8:	e7ec      	b.n	80029a4 <UART_SetConfig+0x158>
        ret = HAL_ERROR;
 80029ca:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e7f1      	b.n	80029b4 <UART_SetConfig+0x168>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029d0:	f7ff fc6e 	bl	80022b0 <HAL_RCC_GetPCLK2Freq>
 80029d4:	6863      	ldr	r3, [r4, #4]
 80029d6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80029da:	fbb0 f0f3 	udiv	r0, r0, r3
 80029de:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <UART_SetConfig+0x1f8>)
 80029e0:	b280      	uxth	r0, r0
 80029e2:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80029e4:	2000      	movs	r0, #0
        break;
 80029e6:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80029e8:	6862      	ldr	r2, [r4, #4]
 80029ea:	0853      	lsrs	r3, r2, #1
 80029ec:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80029f0:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80029f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	60eb      	str	r3, [r5, #12]
 80029fc:	e7f2      	b.n	80029e4 <UART_SetConfig+0x198>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029fe:	f7ff fb45 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8002a02:	e017      	b.n	8002a34 <UART_SetConfig+0x1e8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a04:	6862      	ldr	r2, [r4, #4]
 8002a06:	0853      	lsrs	r3, r2, #1
 8002a08:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a0c:	e7f2      	b.n	80029f4 <UART_SetConfig+0x1a8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a12:	d1f4      	bne.n	80029fe <UART_SetConfig+0x1b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a14:	f7ff fb3a 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8002a18:	e7c4      	b.n	80029a4 <UART_SetConfig+0x158>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a1e:	d1f1      	bne.n	8002a04 <UART_SetConfig+0x1b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002a20:	6860      	ldr	r0, [r4, #4]
 8002a22:	0843      	lsrs	r3, r0, #1
 8002a24:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002a28:	e76a      	b.n	8002900 <UART_SetConfig+0xb4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a2e:	d0b7      	beq.n	80029a0 <UART_SetConfig+0x154>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a30:	f7ff fc26 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a34:	6863      	ldr	r3, [r4, #4]
 8002a36:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002a3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a3e:	b280      	uxth	r0, r0
 8002a40:	60e8      	str	r0, [r5, #12]
 8002a42:	e7cf      	b.n	80029e4 <UART_SetConfig+0x198>
 8002a44:	40013800 	.word	0x40013800
 8002a48:	080040dc 	.word	0x080040dc
 8002a4c:	40004400 	.word	0x40004400
 8002a50:	40004800 	.word	0x40004800
 8002a54:	40004c00 	.word	0x40004c00
 8002a58:	40005000 	.word	0x40005000

08002a5c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a5e:	07da      	lsls	r2, r3, #31
{
 8002a60:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a62:	d506      	bpl.n	8002a72 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a64:	6801      	ldr	r1, [r0, #0]
 8002a66:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002a68:	684a      	ldr	r2, [r1, #4]
 8002a6a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002a6e:	4322      	orrs	r2, r4
 8002a70:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a72:	079c      	lsls	r4, r3, #30
 8002a74:	d506      	bpl.n	8002a84 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a76:	6801      	ldr	r1, [r0, #0]
 8002a78:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002a7a:	684a      	ldr	r2, [r1, #4]
 8002a7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a80:	4322      	orrs	r2, r4
 8002a82:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a84:	0759      	lsls	r1, r3, #29
 8002a86:	d506      	bpl.n	8002a96 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a88:	6801      	ldr	r1, [r0, #0]
 8002a8a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002a8c:	684a      	ldr	r2, [r1, #4]
 8002a8e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a92:	4322      	orrs	r2, r4
 8002a94:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a96:	071a      	lsls	r2, r3, #28
 8002a98:	d506      	bpl.n	8002aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a9a:	6801      	ldr	r1, [r0, #0]
 8002a9c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002a9e:	684a      	ldr	r2, [r1, #4]
 8002aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa4:	4322      	orrs	r2, r4
 8002aa6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002aa8:	06dc      	lsls	r4, r3, #27
 8002aaa:	d506      	bpl.n	8002aba <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002aac:	6801      	ldr	r1, [r0, #0]
 8002aae:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002ab0:	688a      	ldr	r2, [r1, #8]
 8002ab2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ab6:	4322      	orrs	r2, r4
 8002ab8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aba:	0699      	lsls	r1, r3, #26
 8002abc:	d506      	bpl.n	8002acc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002abe:	6801      	ldr	r1, [r0, #0]
 8002ac0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002ac2:	688a      	ldr	r2, [r1, #8]
 8002ac4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ac8:	4322      	orrs	r2, r4
 8002aca:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002acc:	065a      	lsls	r2, r3, #25
 8002ace:	d50f      	bpl.n	8002af0 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ad0:	6801      	ldr	r1, [r0, #0]
 8002ad2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002ad4:	684a      	ldr	r2, [r1, #4]
 8002ad6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002ada:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002adc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ae0:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ae2:	d105      	bne.n	8002af0 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ae4:	684a      	ldr	r2, [r1, #4]
 8002ae6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002ae8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002aec:	4322      	orrs	r2, r4
 8002aee:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002af0:	061b      	lsls	r3, r3, #24
 8002af2:	d506      	bpl.n	8002b02 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002af4:	6802      	ldr	r2, [r0, #0]
 8002af6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002af8:	6853      	ldr	r3, [r2, #4]
 8002afa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002afe:	430b      	orrs	r3, r1
 8002b00:	6053      	str	r3, [r2, #4]
 8002b02:	bd10      	pop	{r4, pc}

08002b04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b08:	9d06      	ldr	r5, [sp, #24]
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	460f      	mov	r7, r1
 8002b0e:	4616      	mov	r6, r2
 8002b10:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b12:	6821      	ldr	r1, [r4, #0]
 8002b14:	69ca      	ldr	r2, [r1, #28]
 8002b16:	ea37 0302 	bics.w	r3, r7, r2
 8002b1a:	bf0c      	ite	eq
 8002b1c:	2201      	moveq	r2, #1
 8002b1e:	2200      	movne	r2, #0
 8002b20:	42b2      	cmp	r2, r6
 8002b22:	d002      	beq.n	8002b2a <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002b24:	2000      	movs	r0, #0
}
 8002b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002b2a:	1c6b      	adds	r3, r5, #1
 8002b2c:	d0f2      	beq.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002b2e:	b99d      	cbnz	r5, 8002b58 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b38:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002b42:	2320      	movs	r3, #32
 8002b44:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002b48:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002b52:	2003      	movs	r0, #3
 8002b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002b58:	f7fe fad4 	bl	8001104 <HAL_GetTick>
 8002b5c:	eba0 0008 	sub.w	r0, r0, r8
 8002b60:	4285      	cmp	r5, r0
 8002b62:	d2d6      	bcs.n	8002b12 <UART_WaitOnFlagUntilTimeout+0xe>
 8002b64:	e7e4      	b.n	8002b30 <UART_WaitOnFlagUntilTimeout+0x2c>

08002b66 <UART_CheckIdleState>:
{
 8002b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b68:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6a:	2600      	movs	r6, #0
 8002b6c:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002b6e:	f7fe fac9 	bl	8001104 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002b78:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b7a:	d417      	bmi.n	8002bac <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b7c:	6823      	ldr	r3, [r4, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	075b      	lsls	r3, r3, #29
 8002b82:	d50a      	bpl.n	8002b9a <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	462b      	mov	r3, r5
 8002b8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b92:	4620      	mov	r0, r4
 8002b94:	f7ff ffb6 	bl	8002b04 <UART_WaitOnFlagUntilTimeout>
 8002b98:	b9a0      	cbnz	r0, 8002bc4 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002b9a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002b9c:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002b9e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002ba2:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002ba6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8002baa:	e00c      	b.n	8002bc6 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	4632      	mov	r2, r6
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f7ff ffa2 	bl	8002b04 <UART_WaitOnFlagUntilTimeout>
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	d0db      	beq.n	8002b7c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002bc4:	2003      	movs	r0, #3
}
 8002bc6:	b002      	add	sp, #8
 8002bc8:	bd70      	pop	{r4, r5, r6, pc}

08002bca <HAL_UART_Init>:
{
 8002bca:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002bcc:	4604      	mov	r4, r0
 8002bce:	b360      	cbz	r0, 8002c2a <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002bd0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002bd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bd8:	b91b      	cbnz	r3, 8002be2 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002bda:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002bde:	f001 f955 	bl	8003e8c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002be2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002be4:	2324      	movs	r3, #36	; 0x24
 8002be6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002bea:	6813      	ldr	r3, [r2, #0]
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f7ff fe2a 	bl	800284c <UART_SetConfig>
 8002bf8:	2801      	cmp	r0, #1
 8002bfa:	d016      	beq.n	8002c2a <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bfe:	b113      	cbz	r3, 8002c06 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002c00:	4620      	mov	r0, r4
 8002c02:	f7ff ff2b 	bl	8002a5c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c16:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002c1e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002c20:	601a      	str	r2, [r3, #0]
}
 8002c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002c26:	f7ff bf9e 	b.w	8002b66 <UART_CheckIdleState>
}
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	bd10      	pop	{r4, pc}

08002c2e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002c2e:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002c30:	f000 fbe2 	bl	80033f8 <vTaskStartScheduler>
  
  return osOK;
}
 8002c34:	2000      	movs	r0, #0
 8002c36:	bd08      	pop	{r3, pc}

08002c38 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002c38:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c3a:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8002c3e:	8a02      	ldrh	r2, [r0, #16]
{
 8002c40:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c42:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8002c46:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8002c48:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8002c4a:	bf14      	ite	ne
 8002c4c:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002c4e:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c50:	a803      	add	r0, sp, #12
 8002c52:	9001      	str	r0, [sp, #4]
 8002c54:	9400      	str	r4, [sp, #0]
 8002c56:	4628      	mov	r0, r5
 8002c58:	f000 fafe 	bl	8003258 <xTaskCreate>
 8002c5c:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002c5e:	bf0c      	ite	eq
 8002c60:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8002c62:	2000      	movne	r0, #0
}
 8002c64:	b005      	add	sp, #20
 8002c66:	bd30      	pop	{r4, r5, pc}

08002c68 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c68:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002c6a:	2800      	cmp	r0, #0
 8002c6c:	bf08      	it	eq
 8002c6e:	2001      	moveq	r0, #1
 8002c70:	f000 fd10 	bl	8003694 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002c74:	2000      	movs	r0, #0
 8002c76:	bd08      	pop	{r3, pc}

08002c78 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002c78:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002c7a:	f000 fda3 	bl	80037c4 <xTaskGetSchedulerState>
 8002c7e:	2801      	cmp	r0, #1
 8002c80:	d003      	beq.n	8002c8a <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8002c82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8002c86:	f000 b905 	b.w	8002e94 <xPortSysTickHandler>
 8002c8a:	bd08      	pop	{r3, pc}

08002c8c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c8c:	f100 0308 	add.w	r3, r0, #8
 8002c90:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c92:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c96:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c98:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c9a:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c9c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c9e:	6003      	str	r3, [r0, #0]
 8002ca0:	4770      	bx	lr

08002ca2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	6103      	str	r3, [r0, #16]
 8002ca6:	4770      	bx	lr

08002ca8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ca8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002caa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cb4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002cb6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cb8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002cba:	3301      	adds	r3, #1
 8002cbc:	6003      	str	r3, [r0, #0]
 8002cbe:	4770      	bx	lr

08002cc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cc0:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cc2:	1c53      	adds	r3, r2, #1
{
 8002cc4:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8002cc6:	d10a      	bne.n	8002cde <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cc8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cce:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cd0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cd2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002cd4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cd6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002cd8:	3301      	adds	r3, #1
 8002cda:	6003      	str	r3, [r0, #0]
 8002cdc:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cde:	f100 0308 	add.w	r3, r0, #8
 8002ce2:	685c      	ldr	r4, [r3, #4]
 8002ce4:	6825      	ldr	r5, [r4, #0]
 8002ce6:	42aa      	cmp	r2, r5
 8002ce8:	d3ef      	bcc.n	8002cca <vListInsert+0xa>
 8002cea:	4623      	mov	r3, r4
 8002cec:	e7f9      	b.n	8002ce2 <vListInsert+0x22>

08002cee <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cee:	6841      	ldr	r1, [r0, #4]
 8002cf0:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002cf2:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cf4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cf6:	6882      	ldr	r2, [r0, #8]
 8002cf8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cfe:	bf08      	it	eq
 8002d00:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d02:	2200      	movs	r2, #0
 8002d04:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	3801      	subs	r0, #1
 8002d0a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002d0c:	4770      	bx	lr
	...

08002d10 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002d10:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <prvTaskExitError+0x2c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	d008      	beq.n	8002d2a <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	e7fe      	b.n	8002d28 <prvTaskExitError+0x18>
 8002d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	e7fe      	b.n	8002d3a <prvTaskExitError+0x2a>
 8002d3c:	20000004 	.word	0x20000004

08002d40 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002d40:	4806      	ldr	r0, [pc, #24]	; (8002d5c <prvPortStartFirstTask+0x1c>)
 8002d42:	6800      	ldr	r0, [r0, #0]
 8002d44:	6800      	ldr	r0, [r0, #0]
 8002d46:	f380 8808 	msr	MSP, r0
 8002d4a:	b662      	cpsie	i
 8002d4c:	b661      	cpsie	f
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	df00      	svc	0
 8002d58:	bf00      	nop
 8002d5a:	0000      	.short	0x0000
 8002d5c:	e000ed08 	.word	0xe000ed08

08002d60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002d60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002d70 <vPortEnableVFP+0x10>
 8002d64:	6801      	ldr	r1, [r0, #0]
 8002d66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002d6a:	6001      	str	r1, [r0, #0]
 8002d6c:	4770      	bx	lr
 8002d6e:	0000      	.short	0x0000
 8002d70:	e000ed88 	.word	0xe000ed88

08002d74 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d78:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d7c:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <pxPortInitialiseStack+0x28>)
 8002d7e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d82:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002d86:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d8a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d8e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002d92:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002d96:	3844      	subs	r0, #68	; 0x44
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	08002d11 	.word	0x08002d11

08002da0 <SVC_Handler>:
	__asm volatile (
 8002da0:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <pxCurrentTCBConst2>)
 8002da2:	6819      	ldr	r1, [r3, #0]
 8002da4:	6808      	ldr	r0, [r1, #0]
 8002da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002daa:	f380 8809 	msr	PSP, r0
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f04f 0000 	mov.w	r0, #0
 8002db6:	f380 8811 	msr	BASEPRI, r0
 8002dba:	4770      	bx	lr
 8002dbc:	f3af 8000 	nop.w

08002dc0 <pxCurrentTCBConst2>:
 8002dc0:	20000d3c 	.word	0x20000d3c

08002dc4 <vPortEnterCritical>:
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002dd4:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <vPortEnterCritical+0x3c>)
 8002dd6:	6813      	ldr	r3, [r2, #0]
 8002dd8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8002dda:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002ddc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002dde:	d10d      	bne.n	8002dfc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <vPortEnterCritical+0x40>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002de8:	d008      	beq.n	8002dfc <vPortEnterCritical+0x38>
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	e7fe      	b.n	8002dfa <vPortEnterCritical+0x36>
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000004 	.word	0x20000004
 8002e04:	e000ed04 	.word	0xe000ed04

08002e08 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002e08:	4a08      	ldr	r2, [pc, #32]	; (8002e2c <vPortExitCritical+0x24>)
 8002e0a:	6813      	ldr	r3, [r2, #0]
 8002e0c:	b943      	cbnz	r3, 8002e20 <vPortExitCritical+0x18>
 8002e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e12:	f383 8811 	msr	BASEPRI, r3
 8002e16:	f3bf 8f6f 	isb	sy
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	e7fe      	b.n	8002e1e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002e20:	3b01      	subs	r3, #1
 8002e22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002e24:	b90b      	cbnz	r3, 8002e2a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e26:	f383 8811 	msr	BASEPRI, r3
 8002e2a:	4770      	bx	lr
 8002e2c:	20000004 	.word	0x20000004

08002e30 <PendSV_Handler>:
	__asm volatile
 8002e30:	f3ef 8009 	mrs	r0, PSP
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <pxCurrentTCBConst>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	f01e 0f10 	tst.w	lr, #16
 8002e40:	bf08      	it	eq
 8002e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e4a:	6010      	str	r0, [r2, #0]
 8002e4c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e54:	f380 8811 	msr	BASEPRI, r0
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f000 fc76 	bl	8003750 <vTaskSwitchContext>
 8002e64:	f04f 0000 	mov.w	r0, #0
 8002e68:	f380 8811 	msr	BASEPRI, r0
 8002e6c:	bc08      	pop	{r3}
 8002e6e:	6819      	ldr	r1, [r3, #0]
 8002e70:	6808      	ldr	r0, [r1, #0]
 8002e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e76:	f01e 0f10 	tst.w	lr, #16
 8002e7a:	bf08      	it	eq
 8002e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e80:	f380 8809 	msr	PSP, r0
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	f3af 8000 	nop.w

08002e90 <pxCurrentTCBConst>:
 8002e90:	20000d3c 	.word	0x20000d3c

08002e94 <xPortSysTickHandler>:
{
 8002e94:	b508      	push	{r3, lr}
	__asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002ea6:	f000 faeb 	bl	8003480 <xTaskIncrementTick>
 8002eaa:	b118      	cbz	r0, 8002eb4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <xPortSysTickHandler+0x28>)
 8002eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	bd08      	pop	{r3, pc}
 8002ebc:	e000ed04 	.word	0xe000ed04

08002ec0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <vPortSetupTimerInterrupt+0x1c>)
 8002ec2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ecc:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <vPortSetupTimerInterrupt+0x20>)
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ed2:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <vPortSetupTimerInterrupt+0x24>)
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000008 	.word	0x20000008
 8002ee0:	e000e014 	.word	0xe000e014
 8002ee4:	e000e010 	.word	0xe000e010

08002ee8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002ee8:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <xPortStartScheduler+0xc8>)
 8002eea:	4a32      	ldr	r2, [pc, #200]	; (8002fb4 <xPortStartScheduler+0xcc>)
{
 8002eec:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	4291      	cmp	r1, r2
 8002ef2:	d108      	bne.n	8002f06 <xPortStartScheduler+0x1e>
	__asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	e7fe      	b.n	8002f04 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <xPortStartScheduler+0xd0>)
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d108      	bne.n	8002f20 <xPortStartScheduler+0x38>
 8002f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	e7fe      	b.n	8002f1e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f20:	4b26      	ldr	r3, [pc, #152]	; (8002fbc <xPortStartScheduler+0xd4>)
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f28:	22ff      	movs	r2, #255	; 0xff
 8002f2a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f2c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f2e:	4a24      	ldr	r2, [pc, #144]	; (8002fc0 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f36:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002f3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f3e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f40:	4b20      	ldr	r3, [pc, #128]	; (8002fc4 <xPortStartScheduler+0xdc>)
 8002f42:	2207      	movs	r2, #7
 8002f44:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f46:	2100      	movs	r1, #0
 8002f48:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002f4c:	0600      	lsls	r0, r0, #24
 8002f4e:	f102 34ff 	add.w	r4, r2, #4294967295
 8002f52:	d423      	bmi.n	8002f9c <xPortStartScheduler+0xb4>
 8002f54:	b101      	cbz	r1, 8002f58 <xPortStartScheduler+0x70>
 8002f56:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f5c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002f60:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f62:	9b01      	ldr	r3, [sp, #4]
 8002f64:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <xPortStartScheduler+0xd4>)
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <xPortStartScheduler+0xe0>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002f72:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002f7a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002f7c:	f7ff ffa0 	bl	8002ec0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002f80:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <xPortStartScheduler+0xe4>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8002f86:	f7ff feeb 	bl	8002d60 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f8a:	4a11      	ldr	r2, [pc, #68]	; (8002fd0 <xPortStartScheduler+0xe8>)
 8002f8c:	6813      	ldr	r3, [r2, #0]
 8002f8e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f92:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002f94:	f7ff fed4 	bl	8002d40 <prvPortStartFirstTask>
	prvTaskExitError();
 8002f98:	f7ff feba 	bl	8002d10 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f9c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002fa0:	0052      	lsls	r2, r2, #1
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	f88d 2003 	strb.w	r2, [sp, #3]
 8002fa8:	2101      	movs	r1, #1
 8002faa:	4622      	mov	r2, r4
 8002fac:	e7cc      	b.n	8002f48 <xPortStartScheduler+0x60>
 8002fae:	bf00      	nop
 8002fb0:	e000ed00 	.word	0xe000ed00
 8002fb4:	410fc271 	.word	0x410fc271
 8002fb8:	410fc270 	.word	0x410fc270
 8002fbc:	e000e400 	.word	0xe000e400
 8002fc0:	2000011c 	.word	0x2000011c
 8002fc4:	20000120 	.word	0x20000120
 8002fc8:	e000ed20 	.word	0xe000ed20
 8002fcc:	20000004 	.word	0x20000004
 8002fd0:	e000ef34 	.word	0xe000ef34

08002fd4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002fd4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <prvInsertBlockIntoFreeList+0x40>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4282      	cmp	r2, r0
 8002fdc:	d318      	bcc.n	8003010 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002fde:	685c      	ldr	r4, [r3, #4]
 8002fe0:	1919      	adds	r1, r3, r4
 8002fe2:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002fe4:	bf01      	itttt	eq
 8002fe6:	6841      	ldreq	r1, [r0, #4]
 8002fe8:	4618      	moveq	r0, r3
 8002fea:	1909      	addeq	r1, r1, r4
 8002fec:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002fee:	6844      	ldr	r4, [r0, #4]
 8002ff0:	1901      	adds	r1, r0, r4
 8002ff2:	428a      	cmp	r2, r1
 8002ff4:	d107      	bne.n	8003006 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ff6:	4908      	ldr	r1, [pc, #32]	; (8003018 <prvInsertBlockIntoFreeList+0x44>)
 8002ff8:	6809      	ldr	r1, [r1, #0]
 8002ffa:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ffc:	bf1f      	itttt	ne
 8002ffe:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003000:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003002:	1909      	addne	r1, r1, r4
 8003004:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003006:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003008:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800300a:	bf18      	it	ne
 800300c:	6018      	strne	r0, [r3, #0]
 800300e:	bd10      	pop	{r4, pc}
 8003010:	4613      	mov	r3, r2
 8003012:	e7e1      	b.n	8002fd8 <prvInsertBlockIntoFreeList+0x4>
 8003014:	20000d34 	.word	0x20000d34
 8003018:	20000124 	.word	0x20000124

0800301c <pvPortMalloc>:
{
 800301c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003020:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003022:	f000 fa25 	bl	8003470 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003026:	493e      	ldr	r1, [pc, #248]	; (8003120 <pvPortMalloc+0x104>)
 8003028:	4d3e      	ldr	r5, [pc, #248]	; (8003124 <pvPortMalloc+0x108>)
 800302a:	680b      	ldr	r3, [r1, #0]
 800302c:	bb0b      	cbnz	r3, 8003072 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800302e:	4a3e      	ldr	r2, [pc, #248]	; (8003128 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003030:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003032:	bf1f      	itttt	ne
 8003034:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003036:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800303a:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
 800303e:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003040:	bf14      	ite	ne
 8003042:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003044:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003048:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800304a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800304c:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003050:	4e36      	ldr	r6, [pc, #216]	; (800312c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8003052:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003054:	2000      	movs	r0, #0
 8003056:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003058:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800305a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800305c:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800305e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003060:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003062:	4b33      	ldr	r3, [pc, #204]	; (8003130 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003064:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003066:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003068:	4b32      	ldr	r3, [pc, #200]	; (8003134 <pvPortMalloc+0x118>)
 800306a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800306c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003070:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003072:	682f      	ldr	r7, [r5, #0]
 8003074:	4227      	tst	r7, r4
 8003076:	d116      	bne.n	80030a6 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8003078:	2c00      	cmp	r4, #0
 800307a:	d041      	beq.n	8003100 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 800307c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003080:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003082:	bf1c      	itt	ne
 8003084:	f023 0307 	bicne.w	r3, r3, #7
 8003088:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800308a:	b163      	cbz	r3, 80030a6 <pvPortMalloc+0x8a>
 800308c:	4a29      	ldr	r2, [pc, #164]	; (8003134 <pvPortMalloc+0x118>)
 800308e:	6816      	ldr	r6, [r2, #0]
 8003090:	42b3      	cmp	r3, r6
 8003092:	4690      	mov	r8, r2
 8003094:	d807      	bhi.n	80030a6 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8003096:	4a25      	ldr	r2, [pc, #148]	; (800312c <pvPortMalloc+0x110>)
 8003098:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800309a:	6868      	ldr	r0, [r5, #4]
 800309c:	4283      	cmp	r3, r0
 800309e:	d804      	bhi.n	80030aa <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80030a0:	6809      	ldr	r1, [r1, #0]
 80030a2:	428d      	cmp	r5, r1
 80030a4:	d107      	bne.n	80030b6 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80030a6:	2400      	movs	r4, #0
 80030a8:	e02a      	b.n	8003100 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030aa:	682c      	ldr	r4, [r5, #0]
 80030ac:	2c00      	cmp	r4, #0
 80030ae:	d0f7      	beq.n	80030a0 <pvPortMalloc+0x84>
 80030b0:	462a      	mov	r2, r5
 80030b2:	4625      	mov	r5, r4
 80030b4:	e7f1      	b.n	800309a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80030b6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80030b8:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80030ba:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80030bc:	1ac2      	subs	r2, r0, r3
 80030be:	2a10      	cmp	r2, #16
 80030c0:	d90f      	bls.n	80030e2 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80030c2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030c4:	0741      	lsls	r1, r0, #29
 80030c6:	d008      	beq.n	80030da <pvPortMalloc+0xbe>
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	e7fe      	b.n	80030d8 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80030da:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80030dc:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80030de:	f7ff ff79 	bl	8002fd4 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030e2:	4913      	ldr	r1, [pc, #76]	; (8003130 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030e4:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030e6:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030e8:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80030ea:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030ec:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80030ee:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030f2:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030f6:	bf38      	it	cc
 80030f8:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80030fa:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80030fc:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80030fe:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8003100:	f000 fa50 	bl	80035a4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003104:	0763      	lsls	r3, r4, #29
 8003106:	d008      	beq.n	800311a <pvPortMalloc+0xfe>
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	e7fe      	b.n	8003118 <pvPortMalloc+0xfc>
}
 800311a:	4620      	mov	r0, r4
 800311c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003120:	20000124 	.word	0x20000124
 8003124:	20000d28 	.word	0x20000d28
 8003128:	20000128 	.word	0x20000128
 800312c:	20000d34 	.word	0x20000d34
 8003130:	20000d30 	.word	0x20000d30
 8003134:	20000d2c 	.word	0x20000d2c

08003138 <vPortFree>:
{
 8003138:	b510      	push	{r4, lr}
	if( pv != NULL )
 800313a:	4604      	mov	r4, r0
 800313c:	b370      	cbz	r0, 800319c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800313e:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <vPortFree+0x68>)
 8003140:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	4213      	tst	r3, r2
 8003148:	d108      	bne.n	800315c <vPortFree+0x24>
 800314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	e7fe      	b.n	800315a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800315c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003160:	b141      	cbz	r1, 8003174 <vPortFree+0x3c>
 8003162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	e7fe      	b.n	8003172 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003174:	ea23 0302 	bic.w	r3, r3, r2
 8003178:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800317c:	f000 f978 	bl	8003470 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003180:	4a08      	ldr	r2, [pc, #32]	; (80031a4 <vPortFree+0x6c>)
 8003182:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003186:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003188:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800318c:	440b      	add	r3, r1
 800318e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003190:	f7ff ff20 	bl	8002fd4 <prvInsertBlockIntoFreeList>
}
 8003194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003198:	f000 ba04 	b.w	80035a4 <xTaskResumeAll>
 800319c:	bd10      	pop	{r4, pc}
 800319e:	bf00      	nop
 80031a0:	20000d28 	.word	0x20000d28
 80031a4:	20000d2c 	.word	0x20000d2c

080031a8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031a8:	4a06      	ldr	r2, [pc, #24]	; (80031c4 <prvResetNextTaskUnblockTime+0x1c>)
 80031aa:	6813      	ldr	r3, [r2, #0]
 80031ac:	6819      	ldr	r1, [r3, #0]
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <prvResetNextTaskUnblockTime+0x20>)
 80031b0:	b919      	cbnz	r1, 80031ba <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80031b2:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80031be:	68d2      	ldr	r2, [r2, #12]
 80031c0:	6852      	ldr	r2, [r2, #4]
 80031c2:	e7f8      	b.n	80031b6 <prvResetNextTaskUnblockTime+0xe>
 80031c4:	20000d40 	.word	0x20000d40
 80031c8:	20000e18 	.word	0x20000e18

080031cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80031cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80031ce:	4b1b      	ldr	r3, [pc, #108]	; (800323c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031d0:	4e1b      	ldr	r6, [pc, #108]	; (8003240 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80031d2:	681d      	ldr	r5, [r3, #0]
{
 80031d4:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031d6:	6830      	ldr	r0, [r6, #0]
 80031d8:	3004      	adds	r0, #4
{
 80031da:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031dc:	f7ff fd87 	bl	8002cee <uxListRemove>
 80031e0:	4633      	mov	r3, r6
 80031e2:	b940      	cbnz	r0, 80031f6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80031e4:	6831      	ldr	r1, [r6, #0]
 80031e6:	4e17      	ldr	r6, [pc, #92]	; (8003244 <prvAddCurrentTaskToDelayedList+0x78>)
 80031e8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80031ea:	6832      	ldr	r2, [r6, #0]
 80031ec:	2001      	movs	r0, #1
 80031ee:	4088      	lsls	r0, r1
 80031f0:	ea22 0200 	bic.w	r2, r2, r0
 80031f4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80031f6:	1c62      	adds	r2, r4, #1
 80031f8:	d107      	bne.n	800320a <prvAddCurrentTaskToDelayedList+0x3e>
 80031fa:	b137      	cbz	r7, 800320a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031fc:	6819      	ldr	r1, [r3, #0]
 80031fe:	4812      	ldr	r0, [pc, #72]	; (8003248 <prvAddCurrentTaskToDelayedList+0x7c>)
 8003200:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003202:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003206:	f7ff bd4f 	b.w	8002ca8 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800320a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800320c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800320e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003210:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8003212:	d907      	bls.n	8003224 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003214:	4a0d      	ldr	r2, [pc, #52]	; (800324c <prvAddCurrentTaskToDelayedList+0x80>)
 8003216:	6810      	ldr	r0, [r2, #0]
 8003218:	6819      	ldr	r1, [r3, #0]
}
 800321a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800321e:	3104      	adds	r1, #4
 8003220:	f7ff bd4e 	b.w	8002cc0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003224:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <prvAddCurrentTaskToDelayedList+0x84>)
 8003226:	6810      	ldr	r0, [r2, #0]
 8003228:	6819      	ldr	r1, [r3, #0]
 800322a:	3104      	adds	r1, #4
 800322c:	f7ff fd48 	bl	8002cc0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003230:	4b08      	ldr	r3, [pc, #32]	; (8003254 <prvAddCurrentTaskToDelayedList+0x88>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003236:	bf38      	it	cc
 8003238:	601c      	strcc	r4, [r3, #0]
 800323a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800323c:	20000e60 	.word	0x20000e60
 8003240:	20000d3c 	.word	0x20000d3c
 8003244:	20000de8 	.word	0x20000de8
 8003248:	20000e38 	.word	0x20000e38
 800324c:	20000d44 	.word	0x20000d44
 8003250:	20000d40 	.word	0x20000d40
 8003254:	20000e18 	.word	0x20000e18

08003258 <xTaskCreate>:
	{
 8003258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800325c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8003260:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003262:	4650      	mov	r0, sl
	{
 8003264:	460f      	mov	r7, r1
 8003266:	4699      	mov	r9, r3
 8003268:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800326a:	f7ff fed7 	bl	800301c <pvPortMalloc>
			if( pxStack != NULL )
 800326e:	4605      	mov	r5, r0
 8003270:	2800      	cmp	r0, #0
 8003272:	f000 8096 	beq.w	80033a2 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003276:	2054      	movs	r0, #84	; 0x54
 8003278:	f7ff fed0 	bl	800301c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800327c:	4604      	mov	r4, r0
 800327e:	2800      	cmp	r0, #0
 8003280:	f000 808c 	beq.w	800339c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003284:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8003288:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800328a:	4455      	add	r5, sl
 800328c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800328e:	f025 0a07 	bic.w	sl, r5, #7
 8003292:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8003296:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003298:	7859      	ldrb	r1, [r3, #1]
 800329a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800329e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80032a2:	b109      	cbz	r1, 80032a8 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032a4:	42bb      	cmp	r3, r7
 80032a6:	d1f7      	bne.n	8003298 <xTaskCreate+0x40>
 80032a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80032aa:	2d06      	cmp	r5, #6
 80032ac:	bf28      	it	cs
 80032ae:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032b0:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032b4:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80032b6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80032b8:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032ba:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032bc:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80032c0:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032c4:	f7ff fced 	bl	8002ca2 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032c8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032cc:	f104 0018 	add.w	r0, r4, #24
 80032d0:	f7ff fce7 	bl	8002ca2 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80032d4:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032d8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032da:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032dc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032de:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032e2:	464a      	mov	r2, r9
 80032e4:	4641      	mov	r1, r8
 80032e6:	4650      	mov	r0, sl
 80032e8:	f7ff fd44 	bl	8002d74 <pxPortInitialiseStack>
 80032ec:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80032ee:	b106      	cbz	r6, 80032f2 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032f0:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80032f2:	f7ff fd67 	bl	8002dc4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80032f6:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80032f8:	4e32      	ldr	r6, [pc, #200]	; (80033c4 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80033f0 <xTaskCreate+0x198>
 8003300:	3201      	adds	r2, #1
 8003302:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003304:	6835      	ldr	r5, [r6, #0]
 8003306:	2d00      	cmp	r5, #0
 8003308:	d14e      	bne.n	80033a8 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 800330a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d11d      	bne.n	800334e <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003312:	eb08 0005 	add.w	r0, r8, r5
 8003316:	3514      	adds	r5, #20
 8003318:	f7ff fcb8 	bl	8002c8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800331c:	2d8c      	cmp	r5, #140	; 0x8c
 800331e:	d1f8      	bne.n	8003312 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8003320:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80033f4 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8003324:	4d28      	ldr	r5, [pc, #160]	; (80033c8 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8003326:	4648      	mov	r0, r9
 8003328:	f7ff fcb0 	bl	8002c8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800332c:	4628      	mov	r0, r5
 800332e:	f7ff fcad 	bl	8002c8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003332:	4826      	ldr	r0, [pc, #152]	; (80033cc <xTaskCreate+0x174>)
 8003334:	f7ff fcaa 	bl	8002c8c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003338:	4825      	ldr	r0, [pc, #148]	; (80033d0 <xTaskCreate+0x178>)
 800333a:	f7ff fca7 	bl	8002c8c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800333e:	4825      	ldr	r0, [pc, #148]	; (80033d4 <xTaskCreate+0x17c>)
 8003340:	f7ff fca4 	bl	8002c8c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003344:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <xTaskCreate+0x180>)
 8003346:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800334a:	4b24      	ldr	r3, [pc, #144]	; (80033dc <xTaskCreate+0x184>)
 800334c:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800334e:	4a24      	ldr	r2, [pc, #144]	; (80033e0 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8003350:	4924      	ldr	r1, [pc, #144]	; (80033e4 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8003352:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003354:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003356:	3301      	adds	r3, #1
 8003358:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800335a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800335c:	2501      	movs	r5, #1
 800335e:	fa05 f302 	lsl.w	r3, r5, r2
 8003362:	4303      	orrs	r3, r0
 8003364:	2014      	movs	r0, #20
 8003366:	600b      	str	r3, [r1, #0]
 8003368:	fb00 8002 	mla	r0, r0, r2, r8
 800336c:	4639      	mov	r1, r7
 800336e:	f7ff fc9b 	bl	8002ca8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003372:	f7ff fd49 	bl	8002e08 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003376:	4b1c      	ldr	r3, [pc, #112]	; (80033e8 <xTaskCreate+0x190>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	b163      	cbz	r3, 8003396 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800337c:	6833      	ldr	r3, [r6, #0]
 800337e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003380:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003382:	429a      	cmp	r2, r3
 8003384:	d207      	bcs.n	8003396 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8003386:	4b19      	ldr	r3, [pc, #100]	; (80033ec <xTaskCreate+0x194>)
 8003388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	f3bf 8f6f 	isb	sy
	}
 8003396:	4628      	mov	r0, r5
 8003398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800339c:	4628      	mov	r0, r5
 800339e:	f7ff fecb 	bl	8003138 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033a2:	f04f 35ff 	mov.w	r5, #4294967295
 80033a6:	e7f6      	b.n	8003396 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80033a8:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <xTaskCreate+0x190>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1ce      	bne.n	800334e <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033b0:	6833      	ldr	r3, [r6, #0]
 80033b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80033b6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80033b8:	bf98      	it	ls
 80033ba:	6034      	strls	r4, [r6, #0]
 80033bc:	e7c7      	b.n	800334e <xTaskCreate+0xf6>
 80033be:	bf00      	nop
 80033c0:	20000dd4 	.word	0x20000dd4
 80033c4:	20000d3c 	.word	0x20000d3c
 80033c8:	20000e00 	.word	0x20000e00
 80033cc:	20000e20 	.word	0x20000e20
 80033d0:	20000e4c 	.word	0x20000e4c
 80033d4:	20000e38 	.word	0x20000e38
 80033d8:	20000d40 	.word	0x20000d40
 80033dc:	20000d44 	.word	0x20000d44
 80033e0:	20000de4 	.word	0x20000de4
 80033e4:	20000de8 	.word	0x20000de8
 80033e8:	20000e34 	.word	0x20000e34
 80033ec:	e000ed04 	.word	0xe000ed04
 80033f0:	20000d48 	.word	0x20000d48
 80033f4:	20000dec 	.word	0x20000dec

080033f8 <vTaskStartScheduler>:
{
 80033f8:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80033fa:	4b17      	ldr	r3, [pc, #92]	; (8003458 <vTaskStartScheduler+0x60>)
 80033fc:	9301      	str	r3, [sp, #4]
 80033fe:	2400      	movs	r4, #0
 8003400:	9400      	str	r4, [sp, #0]
 8003402:	4623      	mov	r3, r4
 8003404:	2280      	movs	r2, #128	; 0x80
 8003406:	4915      	ldr	r1, [pc, #84]	; (800345c <vTaskStartScheduler+0x64>)
 8003408:	4815      	ldr	r0, [pc, #84]	; (8003460 <vTaskStartScheduler+0x68>)
 800340a:	f7ff ff25 	bl	8003258 <xTaskCreate>
	if( xReturn == pdPASS )
 800340e:	2801      	cmp	r0, #1
 8003410:	d114      	bne.n	800343c <vTaskStartScheduler+0x44>
 8003412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003422:	4b10      	ldr	r3, [pc, #64]	; (8003464 <vTaskStartScheduler+0x6c>)
 8003424:	f04f 32ff 	mov.w	r2, #4294967295
 8003428:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800342a:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <vTaskStartScheduler+0x70>)
 800342c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800342e:	4b0f      	ldr	r3, [pc, #60]	; (800346c <vTaskStartScheduler+0x74>)
 8003430:	601c      	str	r4, [r3, #0]
}
 8003432:	b002      	add	sp, #8
 8003434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003438:	f7ff bd56 	b.w	8002ee8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800343c:	3001      	adds	r0, #1
 800343e:	d108      	bne.n	8003452 <vTaskStartScheduler+0x5a>
 8003440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	e7fe      	b.n	8003450 <vTaskStartScheduler+0x58>
}
 8003452:	b002      	add	sp, #8
 8003454:	bd10      	pop	{r4, pc}
 8003456:	bf00      	nop
 8003458:	20000e14 	.word	0x20000e14
 800345c:	080040e0 	.word	0x080040e0
 8003460:	080036dd 	.word	0x080036dd
 8003464:	20000e18 	.word	0x20000e18
 8003468:	20000e34 	.word	0x20000e34
 800346c:	20000e60 	.word	0x20000e60

08003470 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003470:	4a02      	ldr	r2, [pc, #8]	; (800347c <vTaskSuspendAll+0xc>)
 8003472:	6813      	ldr	r3, [r2, #0]
 8003474:	3301      	adds	r3, #1
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000de0 	.word	0x20000de0

08003480 <xTaskIncrementTick>:
{
 8003480:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003484:	4b3c      	ldr	r3, [pc, #240]	; (8003578 <xTaskIncrementTick+0xf8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d153      	bne.n	8003534 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 800348c:	4b3b      	ldr	r3, [pc, #236]	; (800357c <xTaskIncrementTick+0xfc>)
 800348e:	681c      	ldr	r4, [r3, #0]
 8003490:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003492:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003494:	b9bc      	cbnz	r4, 80034c6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003496:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <xTaskIncrementTick+0x100>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	b142      	cbz	r2, 80034b0 <xTaskIncrementTick+0x30>
 800349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	e7fe      	b.n	80034ae <xTaskIncrementTick+0x2e>
 80034b0:	4a34      	ldr	r2, [pc, #208]	; (8003584 <xTaskIncrementTick+0x104>)
 80034b2:	6819      	ldr	r1, [r3, #0]
 80034b4:	6810      	ldr	r0, [r2, #0]
 80034b6:	6018      	str	r0, [r3, #0]
 80034b8:	6011      	str	r1, [r2, #0]
 80034ba:	4a33      	ldr	r2, [pc, #204]	; (8003588 <xTaskIncrementTick+0x108>)
 80034bc:	6813      	ldr	r3, [r2, #0]
 80034be:	3301      	adds	r3, #1
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	f7ff fe71 	bl	80031a8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034c6:	4d31      	ldr	r5, [pc, #196]	; (800358c <xTaskIncrementTick+0x10c>)
 80034c8:	4f31      	ldr	r7, [pc, #196]	; (8003590 <xTaskIncrementTick+0x110>)
 80034ca:	682b      	ldr	r3, [r5, #0]
 80034cc:	429c      	cmp	r4, r3
 80034ce:	f04f 0b00 	mov.w	fp, #0
 80034d2:	d33e      	bcc.n	8003552 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034d4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003580 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80034d8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80035a0 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034dc:	f8d8 2000 	ldr.w	r2, [r8]
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	bb72      	cbnz	r2, 8003542 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034e4:	f04f 32ff 	mov.w	r2, #4294967295
 80034e8:	602a      	str	r2, [r5, #0]
					break;
 80034ea:	e032      	b.n	8003552 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034ec:	f106 0a04 	add.w	sl, r6, #4
 80034f0:	4650      	mov	r0, sl
 80034f2:	f7ff fbfc 	bl	8002cee <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034f6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80034f8:	b119      	cbz	r1, 8003502 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034fa:	f106 0018 	add.w	r0, r6, #24
 80034fe:	f7ff fbf6 	bl	8002cee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003502:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003504:	f8d9 3000 	ldr.w	r3, [r9]
 8003508:	2201      	movs	r2, #1
 800350a:	fa02 f100 	lsl.w	r1, r2, r0
 800350e:	4319      	orrs	r1, r3
 8003510:	4b20      	ldr	r3, [pc, #128]	; (8003594 <xTaskIncrementTick+0x114>)
 8003512:	f8c9 1000 	str.w	r1, [r9]
 8003516:	f04f 0e14 	mov.w	lr, #20
 800351a:	4651      	mov	r1, sl
 800351c:	fb0e 3000 	mla	r0, lr, r0, r3
 8003520:	f7ff fbc2 	bl	8002ca8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003524:	6838      	ldr	r0, [r7, #0]
 8003526:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003528:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800352a:	4291      	cmp	r1, r2
 800352c:	bf28      	it	cs
 800352e:	f04f 0b01 	movcs.w	fp, #1
 8003532:	e7d3      	b.n	80034dc <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003534:	4a18      	ldr	r2, [pc, #96]	; (8003598 <xTaskIncrementTick+0x118>)
 8003536:	6813      	ldr	r3, [r2, #0]
 8003538:	3301      	adds	r3, #1
 800353a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800353c:	f04f 0b00 	mov.w	fp, #0
 8003540:	e011      	b.n	8003566 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003542:	f8d8 2000 	ldr.w	r2, [r8]
 8003546:	68d2      	ldr	r2, [r2, #12]
 8003548:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800354a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800354c:	428c      	cmp	r4, r1
 800354e:	d2cd      	bcs.n	80034ec <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003550:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <xTaskIncrementTick+0x114>)
 8003556:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003558:	2214      	movs	r2, #20
 800355a:	434a      	muls	r2, r1
 800355c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800355e:	2a02      	cmp	r2, #2
 8003560:	bf28      	it	cs
 8003562:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003566:	4a0d      	ldr	r2, [pc, #52]	; (800359c <xTaskIncrementTick+0x11c>)
 8003568:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800356a:	2a00      	cmp	r2, #0
 800356c:	bf18      	it	ne
 800356e:	f04f 0b01 	movne.w	fp, #1
}
 8003572:	4658      	mov	r0, fp
 8003574:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003578:	20000de0 	.word	0x20000de0
 800357c:	20000e60 	.word	0x20000e60
 8003580:	20000d40 	.word	0x20000d40
 8003584:	20000d44 	.word	0x20000d44
 8003588:	20000e1c 	.word	0x20000e1c
 800358c:	20000e18 	.word	0x20000e18
 8003590:	20000d3c 	.word	0x20000d3c
 8003594:	20000d48 	.word	0x20000d48
 8003598:	20000ddc 	.word	0x20000ddc
 800359c:	20000e64 	.word	0x20000e64
 80035a0:	20000de8 	.word	0x20000de8

080035a4 <xTaskResumeAll>:
{
 80035a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80035a8:	4c31      	ldr	r4, [pc, #196]	; (8003670 <xTaskResumeAll+0xcc>)
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	b943      	cbnz	r3, 80035c0 <xTaskResumeAll+0x1c>
 80035ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	e7fe      	b.n	80035be <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80035c0:	f7ff fc00 	bl	8002dc4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ca:	6824      	ldr	r4, [r4, #0]
 80035cc:	b12c      	cbz	r4, 80035da <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80035ce:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80035d0:	f7ff fc1a 	bl	8002e08 <vPortExitCritical>
}
 80035d4:	4620      	mov	r0, r4
 80035d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035da:	4b26      	ldr	r3, [pc, #152]	; (8003674 <xTaskResumeAll+0xd0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f5      	beq.n	80035ce <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035e2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800368c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80035e6:	4f24      	ldr	r7, [pc, #144]	; (8003678 <xTaskResumeAll+0xd4>)
 80035e8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003690 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035ec:	f8d9 3000 	ldr.w	r3, [r9]
 80035f0:	b9e3      	cbnz	r3, 800362c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80035f2:	b10c      	cbz	r4, 80035f8 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80035f4:	f7ff fdd8 	bl	80031a8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80035f8:	4d20      	ldr	r5, [pc, #128]	; (800367c <xTaskResumeAll+0xd8>)
 80035fa:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80035fc:	b144      	cbz	r4, 8003610 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80035fe:	4e20      	ldr	r6, [pc, #128]	; (8003680 <xTaskResumeAll+0xdc>)
 8003600:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003602:	f7ff ff3d 	bl	8003480 <xTaskIncrementTick>
 8003606:	b100      	cbz	r0, 800360a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8003608:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800360a:	3c01      	subs	r4, #1
 800360c:	d1f9      	bne.n	8003602 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800360e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003610:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <xTaskResumeAll+0xdc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0da      	beq.n	80035ce <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003618:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <xTaskResumeAll+0xe0>)
 800361a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003628:	2401      	movs	r4, #1
 800362a:	e7d1      	b.n	80035d0 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800362c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003630:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003632:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003634:	f104 0018 	add.w	r0, r4, #24
 8003638:	f7ff fb59 	bl	8002cee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800363c:	4630      	mov	r0, r6
 800363e:	f7ff fb56 	bl	8002cee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003642:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003644:	6839      	ldr	r1, [r7, #0]
 8003646:	2501      	movs	r5, #1
 8003648:	fa05 f302 	lsl.w	r3, r5, r2
 800364c:	2014      	movs	r0, #20
 800364e:	430b      	orrs	r3, r1
 8003650:	fb00 8002 	mla	r0, r0, r2, r8
 8003654:	4631      	mov	r1, r6
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	f7ff fb26 	bl	8002ca8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <xTaskResumeAll+0xe4>)
 800365e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003666:	bf24      	itt	cs
 8003668:	4b05      	ldrcs	r3, [pc, #20]	; (8003680 <xTaskResumeAll+0xdc>)
 800366a:	601d      	strcs	r5, [r3, #0]
 800366c:	e7be      	b.n	80035ec <xTaskResumeAll+0x48>
 800366e:	bf00      	nop
 8003670:	20000de0 	.word	0x20000de0
 8003674:	20000dd4 	.word	0x20000dd4
 8003678:	20000de8 	.word	0x20000de8
 800367c:	20000ddc 	.word	0x20000ddc
 8003680:	20000e64 	.word	0x20000e64
 8003684:	e000ed04 	.word	0xe000ed04
 8003688:	20000d3c 	.word	0x20000d3c
 800368c:	20000e20 	.word	0x20000e20
 8003690:	20000d48 	.word	0x20000d48

08003694 <vTaskDelay>:
	{
 8003694:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003696:	b940      	cbnz	r0, 80036aa <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003698:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <vTaskDelay+0x40>)
 800369a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <vTaskDelay+0x44>)
 80036ac:	6819      	ldr	r1, [r3, #0]
 80036ae:	b141      	cbz	r1, 80036c2 <vTaskDelay+0x2e>
 80036b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	e7fe      	b.n	80036c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80036c2:	f7ff fed5 	bl	8003470 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036c6:	f7ff fd81 	bl	80031cc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80036ca:	f7ff ff6b 	bl	80035a4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80036ce:	2800      	cmp	r0, #0
 80036d0:	d0e2      	beq.n	8003698 <vTaskDelay+0x4>
 80036d2:	bd08      	pop	{r3, pc}
 80036d4:	e000ed04 	.word	0xe000ed04
 80036d8:	20000de0 	.word	0x20000de0

080036dc <prvIdleTask>:
{
 80036dc:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80036de:	4e17      	ldr	r6, [pc, #92]	; (800373c <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036e0:	4c17      	ldr	r4, [pc, #92]	; (8003740 <prvIdleTask+0x64>)
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	b963      	cbnz	r3, 8003700 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036e6:	4b17      	ldr	r3, [pc, #92]	; (8003744 <prvIdleTask+0x68>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d9f8      	bls.n	80036e0 <prvIdleTask+0x4>
				taskYIELD();
 80036ee:	4b16      	ldr	r3, [pc, #88]	; (8003748 <prvIdleTask+0x6c>)
 80036f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	e7ef      	b.n	80036e0 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8003700:	f7ff feb6 	bl	8003470 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003704:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8003706:	f7ff ff4d 	bl	80035a4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800370a:	2d00      	cmp	r5, #0
 800370c:	d0e9      	beq.n	80036e2 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800370e:	f7ff fb59 	bl	8002dc4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003712:	68f3      	ldr	r3, [r6, #12]
 8003714:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003716:	1d28      	adds	r0, r5, #4
 8003718:	f7ff fae9 	bl	8002cee <uxListRemove>
					--uxCurrentNumberOfTasks;
 800371c:	4a0b      	ldr	r2, [pc, #44]	; (800374c <prvIdleTask+0x70>)
 800371e:	6813      	ldr	r3, [r2, #0]
 8003720:	3b01      	subs	r3, #1
 8003722:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	3b01      	subs	r3, #1
 8003728:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800372a:	f7ff fb6d 	bl	8002e08 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800372e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003730:	f7ff fd02 	bl	8003138 <vPortFree>
			vPortFree( pxTCB );
 8003734:	4628      	mov	r0, r5
 8003736:	f7ff fcff 	bl	8003138 <vPortFree>
 800373a:	e7d2      	b.n	80036e2 <prvIdleTask+0x6>
 800373c:	20000e4c 	.word	0x20000e4c
 8003740:	20000dd8 	.word	0x20000dd8
 8003744:	20000d48 	.word	0x20000d48
 8003748:	e000ed04 	.word	0xe000ed04
 800374c:	20000dd4 	.word	0x20000dd4

08003750 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003750:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <vTaskSwitchContext+0x60>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4b17      	ldr	r3, [pc, #92]	; (80037b4 <vTaskSwitchContext+0x64>)
{
 8003756:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003758:	b112      	cbz	r2, 8003760 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800375a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003760:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <vTaskSwitchContext+0x68>)
 8003764:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f1c3 031f 	rsb	r3, r3, #31
 8003770:	2214      	movs	r2, #20
 8003772:	4912      	ldr	r1, [pc, #72]	; (80037bc <vTaskSwitchContext+0x6c>)
 8003774:	435a      	muls	r2, r3
 8003776:	1888      	adds	r0, r1, r2
 8003778:	588c      	ldr	r4, [r1, r2]
 800377a:	b944      	cbnz	r4, 800378e <vTaskSwitchContext+0x3e>
	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	e7fe      	b.n	800378c <vTaskSwitchContext+0x3c>
 800378e:	6844      	ldr	r4, [r0, #4]
 8003790:	3208      	adds	r2, #8
 8003792:	6864      	ldr	r4, [r4, #4]
 8003794:	6044      	str	r4, [r0, #4]
 8003796:	440a      	add	r2, r1
 8003798:	4294      	cmp	r4, r2
 800379a:	bf04      	itt	eq
 800379c:	6862      	ldreq	r2, [r4, #4]
 800379e:	6042      	streq	r2, [r0, #4]
 80037a0:	2214      	movs	r2, #20
 80037a2:	fb02 1303 	mla	r3, r2, r3, r1
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <vTaskSwitchContext+0x70>)
 80037ac:	e7d6      	b.n	800375c <vTaskSwitchContext+0xc>
 80037ae:	bf00      	nop
 80037b0:	20000de0 	.word	0x20000de0
 80037b4:	20000e64 	.word	0x20000e64
 80037b8:	20000de8 	.word	0x20000de8
 80037bc:	20000d48 	.word	0x20000d48
 80037c0:	20000d3c 	.word	0x20000d3c

080037c4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <xTaskGetSchedulerState+0x18>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	b133      	cbz	r3, 80037d8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <xTaskGetSchedulerState+0x1c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80037d0:	bf0c      	ite	eq
 80037d2:	2002      	moveq	r0, #2
 80037d4:	2000      	movne	r0, #0
 80037d6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037d8:	2001      	movs	r0, #1
	}
 80037da:	4770      	bx	lr
 80037dc:	20000e34 	.word	0x20000e34
 80037e0:	20000de0 	.word	0x20000de0

080037e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80037e4:	b510      	push	{r4, lr}
  ADC_MultiModeTypeDef multimode;
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 80037e6:	481f      	ldr	r0, [pc, #124]	; (8003864 <MX_ADC1_Init+0x80>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80037e8:	2400      	movs	r4, #0
 80037ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80037ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80037f2:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.ContinuousConvMode = ENABLE;
 80037f6:	2301      	movs	r3, #1
{
 80037f8:	b08a      	sub	sp, #40	; 0x28
  hadc1.Init.ContinuousConvMode = ENABLE;
 80037fa:	61c3      	str	r3, [r0, #28]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80037fc:	6302      	str	r2, [r0, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_EXT_IT11;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 80037fe:	6203      	str	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_EXT_IT11;
 8003800:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003804:	2304      	movs	r3, #4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003806:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003808:	6104      	str	r4, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800380a:	6244      	str	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_EXT_IT11;
 800380c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800380e:	60c4      	str	r4, [r0, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003810:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003812:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003814:	6184      	str	r4, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003816:	6384      	str	r4, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003818:	f7fd fcb2 	bl	8001180 <HAL_ADC_Init>
 800381c:	b118      	cbz	r0, 8003826 <MX_ADC1_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 800381e:	2155      	movs	r1, #85	; 0x55
 8003820:	4811      	ldr	r0, [pc, #68]	; (8003868 <MX_ADC1_Init+0x84>)
 8003822:	f000 f86f 	bl	8003904 <_Error_Handler>
  }

    /**Configure the ADC multi-mode 
    */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003826:	a90a      	add	r1, sp, #40	; 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003828:	480e      	ldr	r0, [pc, #56]	; (8003864 <MX_ADC1_Init+0x80>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800382a:	f841 4d24 	str.w	r4, [r1, #-36]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800382e:	f7fd ff59 	bl	80016e4 <HAL_ADCEx_MultiModeConfigChannel>
 8003832:	b118      	cbz	r0, 800383c <MX_ADC1_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003834:	215d      	movs	r1, #93	; 0x5d
 8003836:	480c      	ldr	r0, [pc, #48]	; (8003868 <MX_ADC1_Init+0x84>)
 8003838:	f000 f864 	bl	8003904 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 800383c:	2302      	movs	r3, #2
 800383e:	9304      	str	r3, [sp, #16]
  sConfig.Rank = 1;
 8003840:	2301      	movs	r3, #1
 8003842:	9305      	str	r3, [sp, #20]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003844:	a904      	add	r1, sp, #16
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003846:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003848:	4806      	ldr	r0, [pc, #24]	; (8003864 <MX_ADC1_Init+0x80>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800384a:	9307      	str	r3, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800384c:	9306      	str	r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800384e:	9308      	str	r3, [sp, #32]
  sConfig.Offset = 0;
 8003850:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003852:	f7fd fdaf 	bl	80013b4 <HAL_ADC_ConfigChannel>
 8003856:	b118      	cbz	r0, 8003860 <MX_ADC1_Init+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003858:	216a      	movs	r1, #106	; 0x6a
 800385a:	4803      	ldr	r0, [pc, #12]	; (8003868 <MX_ADC1_Init+0x84>)
 800385c:	f000 f852 	bl	8003904 <_Error_Handler>
  }

}
 8003860:	b00a      	add	sp, #40	; 0x28
 8003862:	bd10      	pop	{r4, pc}
 8003864:	20000e6c 	.word	0x20000e6c
 8003868:	080040e5 	.word	0x080040e5

0800386c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800386c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 800386e:	6803      	ldr	r3, [r0, #0]
 8003870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8003874:	b087      	sub	sp, #28
  if(adcHandle->Instance==ADC1)
 8003876:	d127      	bne.n	80038c8 <HAL_ADC_MspInit+0x5c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003878:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800387c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PF4     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003880:	2503      	movs	r5, #3
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003882:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003884:	4811      	ldr	r0, [pc, #68]	; (80038cc <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003886:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800388a:	615a      	str	r2, [r3, #20]
 800388c:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800388e:	9502      	str	r5, [sp, #8]
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003894:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003896:	2400      	movs	r4, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003898:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800389c:	230f      	movs	r3, #15
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800389e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80038a0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038a2:	f7fe f8b9 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80038a6:	2314      	movs	r3, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038a8:	a901      	add	r1, sp, #4
 80038aa:	4809      	ldr	r0, [pc, #36]	; (80038d0 <HAL_ADC_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80038ac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038ae:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b0:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038b2:	f7fe f8b1 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80038b6:	230e      	movs	r3, #14
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b8:	a901      	add	r1, sp, #4
 80038ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80038be:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038c0:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c2:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c4:	f7fe f8a8 	bl	8001a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80038c8:	b007      	add	sp, #28
 80038ca:	bd30      	pop	{r4, r5, pc}
 80038cc:	48000800 	.word	0x48000800
 80038d0:	48001400 	.word	0x48001400

080038d4 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038d4:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <MX_DMA_Init+0x2c>)
{
 80038d6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	f042 0202 	orr.w	r2, r2, #2
 80038de:	615a      	str	r2, [r3, #20]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 80038e8:	2200      	movs	r2, #0
 80038ea:	2105      	movs	r1, #5
 80038ec:	203c      	movs	r0, #60	; 0x3c
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038ee:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 80038f0:	f7fd ff9a 	bl	8001828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80038f4:	203c      	movs	r0, #60	; 0x3c
 80038f6:	f7fd ffcb 	bl	8001890 <HAL_NVIC_EnableIRQ>

}
 80038fa:	b003      	add	sp, #12
 80038fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003900:	40021000 	.word	0x40021000

08003904 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8003904:	e7fe      	b.n	8003904 <_Error_Handler>

08003906 <StartDefaultTask>:
  /* USER CODE END RTOS_QUEUES */
}

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8003906:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003908:	2001      	movs	r0, #1
 800390a:	f7ff f9ad 	bl	8002c68 <osDelay>
 800390e:	e7fb      	b.n	8003908 <StartDefaultTask+0x2>

08003910 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8003910:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003912:	4d07      	ldr	r5, [pc, #28]	; (8003930 <MX_FREERTOS_Init+0x20>)
 8003914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 8003916:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003918:	ac01      	add	r4, sp, #4
 800391a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003920:	2100      	movs	r1, #0
 8003922:	a801      	add	r0, sp, #4
 8003924:	f7ff f988 	bl	8002c38 <osThreadCreate>
 8003928:	4b02      	ldr	r3, [pc, #8]	; (8003934 <MX_FREERTOS_Init+0x24>)
 800392a:	6018      	str	r0, [r3, #0]
}
 800392c:	b007      	add	sp, #28
 800392e:	bd30      	pop	{r4, r5, pc}
 8003930:	08004098 	.word	0x08004098
 8003934:	20000ec0 	.word	0x20000ec0

08003938 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003938:	4b63      	ldr	r3, [pc, #396]	; (8003ac8 <MX_GPIO_Init+0x190>)
{
 800393a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800393e:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8003940:	4f62      	ldr	r7, [pc, #392]	; (8003acc <MX_GPIO_Init+0x194>)
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8003942:	4d63      	ldr	r5, [pc, #396]	; (8003ad0 <MX_GPIO_Init+0x198>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR1_Pin|MOTOR2_Pin|MOTOR3_Pin, GPIO_PIN_RESET);
 8003944:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8003ae0 <MX_GPIO_Init+0x1a8>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003948:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800394c:	615a      	str	r2, [r3, #20]
 800394e:	695a      	ldr	r2, [r3, #20]
{
 8003950:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003952:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003956:	9201      	str	r2, [sp, #4]
 8003958:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003960:	615a      	str	r2, [r3, #20]
 8003962:	695a      	ldr	r2, [r3, #20]
 8003964:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003968:	9202      	str	r2, [sp, #8]
 800396a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003972:	615a      	str	r2, [r3, #20]
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800397a:	9203      	str	r2, [sp, #12]
 800397c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003984:	615a      	str	r2, [r3, #20]
 8003986:	695a      	ldr	r2, [r3, #20]
 8003988:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800398c:	9204      	str	r2, [sp, #16]
 800398e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003996:	615a      	str	r2, [r3, #20]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800399e:	9205      	str	r2, [sp, #20]
 80039a0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039a2:	695a      	ldr	r2, [r3, #20]
 80039a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80039a8:	615a      	str	r2, [r3, #20]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039b0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 80039b2:	4638      	mov	r0, r7
 80039b4:	2200      	movs	r2, #0
 80039b6:	f64f 7108 	movw	r1, #65288	; 0xff08
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039ba:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 80039bc:	f7fe f8ee 	bl	8001b9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 80039c0:	4628      	mov	r0, r5
 80039c2:	2200      	movs	r2, #0
 80039c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039c8:	f7fe f8e8 	bl	8001b9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, MOTOR1_Pin|MOTOR2_Pin|MOTOR3_Pin, GPIO_PIN_RESET);
 80039cc:	2200      	movs	r2, #0
 80039ce:	4648      	mov	r0, r9
 80039d0:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80039d4:	f7fe f8e2 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 80039d8:	2337      	movs	r3, #55	; 0x37
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 80039dc:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039de:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80039e0:	4b3c      	ldr	r3, [pc, #240]	; (8003ad4 <MX_GPIO_Init+0x19c>)
 80039e2:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039e4:	4638      	mov	r0, r7
                           PEPin PEPin PEPin PEPin 
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039e6:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039ea:	f7fe f815 	bl	8001a18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 80039ee:	f64f 7308 	movw	r3, #65288	; 0xff08
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039f2:	a907      	add	r1, sp, #28
 80039f4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 80039f6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fa:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039fe:	f7fe f80b 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003a02:	a907      	add	r1, sp, #28
 8003a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = B1_Pin;
 8003a08:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a0a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003a0e:	f7fe f803 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8003a12:	23e0      	movs	r3, #224	; 0xe0
 8003a14:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a16:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a1a:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a1c:	a907      	add	r1, sp, #28
 8003a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a22:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a24:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a28:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2c:	f7fd fff4 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8003a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003a34:	a907      	add	r1, sp, #28
 8003a36:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8003a38:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a3a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003a3e:	f7fd ffeb 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003a42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a46:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a48:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a4a:	4b23      	ldr	r3, [pc, #140]	; (8003ad8 <MX_GPIO_Init+0x1a0>)
 8003a4c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a4e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a50:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a52:	f7fd ffe1 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8003a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8003a5a:	a907      	add	r1, sp, #28
 8003a5c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8003a5e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a60:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a62:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a64:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8003a66:	f7fd ffd7 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR1_Pin|MOTOR2_Pin|MOTOR3_Pin;
 8003a6a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a6e:	a907      	add	r1, sp, #28
 8003a70:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = MOTOR1_Pin|MOTOR2_Pin|MOTOR3_Pin;
 8003a72:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = WATER_LVL_H_Pin|WATER_LVL_L_Pin;
 8003a74:	27c0      	movs	r7, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a76:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a7c:	f7fd ffcc 	bl	8001a18 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a80:	a907      	add	r1, sp, #28
 8003a82:	4816      	ldr	r0, [pc, #88]	; (8003adc <MX_GPIO_Init+0x1a4>)
  GPIO_InitStruct.Pin = WATER_LVL_H_Pin|WATER_LVL_L_Pin;
 8003a84:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a86:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a88:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a8a:	f7fd ffc5 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8003a8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003a92:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a94:	2303      	movs	r3, #3
 8003a96:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a98:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8003a9a:	230e      	movs	r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8003aa0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa2:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa8:	f7fd ffb6 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003aac:	2312      	movs	r3, #18
 8003aae:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ab0:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ab2:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ab4:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8003ab6:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ab8:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aba:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003abc:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003abe:	f7fd ffab 	bl	8001a18 <HAL_GPIO_Init>

}
 8003ac2:	b00d      	add	sp, #52	; 0x34
 8003ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	48001000 	.word	0x48001000
 8003ad0:	48000400 	.word	0x48000400
 8003ad4:	10120000 	.word	0x10120000
 8003ad8:	10110000 	.word	0x10110000
 8003adc:	48000800 	.word	0x48000800
 8003ae0:	48000c00 	.word	0x48000c00

08003ae4 <main>:
}

/* USER CODE END 0 */

int main(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ae8:	f7fd faee 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003aec:	f000 f810 	bl	8003b10 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003af0:	f7ff ff22 	bl	8003938 <MX_GPIO_Init>
  MX_DMA_Init();
 8003af4:	f7ff feee 	bl	80038d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8003af8:	f7ff fe74 	bl	80037e4 <MX_ADC1_Init>
  MX_UART4_Init();
 8003afc:	f000 f9a4 	bl	8003e48 <MX_UART4_Init>
  MX_SPI2_Init();
 8003b00:	f000 f888 	bl	8003c14 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003b04:	f7ff ff04 	bl	8003910 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003b08:	f7ff f891 	bl	8002c2e <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003b0c:	e7fe      	b.n	8003b0c <main+0x28>
	...

08003b10 <_Z18SystemClock_Configv>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b09e      	sub	sp, #120	; 0x78
 8003b14:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b16:	2302      	movs	r3, #2
 8003b18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003b1e:	2310      	movs	r3, #16
 8003b20:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b22:	2302      	movs	r3, #2
 8003b24:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b26:	2300      	movs	r3, #0
 8003b28:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003b2a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003b2e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fe f837 	bl	8001ba8 <HAL_RCC_OscConfig>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bf14      	ite	ne
 8003b40:	2301      	movne	r3, #1
 8003b42:	2300      	moveq	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <_Z18SystemClock_Configv+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003b4a:	21a9      	movs	r1, #169	; 0xa9
 8003b4c:	4826      	ldr	r0, [pc, #152]	; (8003be8 <_Z18SystemClock_Configv+0xd8>)
 8003b4e:	f7ff fed9 	bl	8003904 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b52:	230f      	movs	r3, #15
 8003b54:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b56:	2302      	movs	r3, #2
 8003b58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b64:	2300      	movs	r3, #0
 8003b66:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b6c:	2102      	movs	r1, #2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe fabe 	bl	80020f0 <HAL_RCC_ClockConfig>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	bf14      	ite	ne
 8003b7a:	2301      	movne	r3, #1
 8003b7c:	2300      	moveq	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <_Z18SystemClock_Configv+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003b84:	21b7      	movs	r1, #183	; 0xb7
 8003b86:	4818      	ldr	r0, [pc, #96]	; (8003be8 <_Z18SystemClock_Configv+0xd8>)
 8003b88:	f7ff febc 	bl	8003904 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_ADC12;
 8003b8c:	2388      	movs	r3, #136	; 0x88
 8003b8e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8003b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b9a:	463b      	mov	r3, r7
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe fbbd 	bl	800231c <HAL_RCCEx_PeriphCLKConfig>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf14      	ite	ne
 8003ba8:	2301      	movne	r3, #1
 8003baa:	2300      	moveq	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <_Z18SystemClock_Configv+0xaa>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003bb2:	21bf      	movs	r1, #191	; 0xbf
 8003bb4:	480c      	ldr	r0, [pc, #48]	; (8003be8 <_Z18SystemClock_Configv+0xd8>)
 8003bb6:	f7ff fea5 	bl	8003904 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003bba:	f7fe fb5b 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <_Z18SystemClock_Configv+0xdc>)
 8003bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fd fe6d 	bl	80018a8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003bce:	2004      	movs	r0, #4
 8003bd0:	f7fd fe80 	bl	80018d4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	210f      	movs	r1, #15
 8003bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bdc:	f7fd fe24 	bl	8001828 <HAL_NVIC_SetPriority>
}
 8003be0:	bf00      	nop
 8003be2:	3778      	adds	r7, #120	; 0x78
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	080040ac 	.word	0x080040ac
 8003bec:	10624dd3 	.word	0x10624dd3

08003bf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a04      	ldr	r2, [pc, #16]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d101      	bne.n	8003c06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003c02:	f7fd fa73 	bl	80010ec <HAL_IncTick>
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40001000 	.word	0x40001000

08003c14 <MX_SPI2_Init>:

/* SPI2 init function */
void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
 8003c14:	4811      	ldr	r0, [pc, #68]	; (8003c5c <MX_SPI2_Init+0x48>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c16:	4912      	ldr	r1, [pc, #72]	; (8003c60 <MX_SPI2_Init+0x4c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c18:	f44f 62e0 	mov.w	r2, #1792	; 0x700
{
 8003c1c:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c1e:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c22:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003c24:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c28:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003c2c:	6182      	str	r2, [r0, #24]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c2e:	2300      	movs	r3, #0
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003c30:	2208      	movs	r2, #8
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 8003c32:	2107      	movs	r1, #7
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c34:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c36:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c38:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003c3a:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c3c:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c3e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c40:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003c42:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c44:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c46:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c48:	f7fe fc6e 	bl	8002528 <HAL_SPI_Init>
 8003c4c:	b128      	cbz	r0, 8003c5a <MX_SPI2_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c4e:	2151      	movs	r1, #81	; 0x51
 8003c50:	4804      	ldr	r0, [pc, #16]	; (8003c64 <MX_SPI2_Init+0x50>)
  }

}
 8003c52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003c56:	f7ff be55 	b.w	8003904 <_Error_Handler>
 8003c5a:	bd08      	pop	{r3, pc}
 8003c5c:	20000ec4 	.word	0x20000ec4
 8003c60:	40003800 	.word	0x40003800
 8003c64:	080040fe 	.word	0x080040fe

08003c68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c68:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI2)
 8003c6a:	6802      	ldr	r2, [r0, #0]
 8003c6c:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <HAL_SPI_MspInit+0x5c>)
 8003c6e:	429a      	cmp	r2, r3
{
 8003c70:	b087      	sub	sp, #28
  if(spiHandle->Instance==SPI2)
 8003c72:	d124      	bne.n	8003cbe <HAL_SPI_MspInit+0x56>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c74:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    PB12     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c78:	2702      	movs	r7, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c7a:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(NRF24_SCK_GPIO_Port, &GPIO_InitStruct);
 8003c7c:	4812      	ldr	r0, [pc, #72]	; (8003cc8 <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c82:	61da      	str	r2, [r3, #28]
 8003c84:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c86:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c90:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = NRF24_SCK_Pin;
 8003c92:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c96:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c98:	2405      	movs	r4, #5
    HAL_GPIO_Init(NRF24_SCK_GPIO_Port, &GPIO_InitStruct);
 8003c9a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = NRF24_SCK_Pin;
 8003c9c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9e:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ca0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ca2:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(NRF24_SCK_GPIO_Port, &GPIO_InitStruct);
 8003ca4:	f7fd feb8 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF24_NSS_Pin|NRF24_MISO_Pin|NRF24_MOSI_Pin;
 8003ca8:	f44f 4350 	mov.w	r3, #53248	; 0xd000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cac:	a901      	add	r1, sp, #4
 8003cae:	4807      	ldr	r0, [pc, #28]	; (8003ccc <HAL_SPI_MspInit+0x64>)
    GPIO_InitStruct.Pin = NRF24_NSS_Pin|NRF24_MISO_Pin|NRF24_MOSI_Pin;
 8003cb0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb2:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb4:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cb6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003cb8:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cba:	f7fd fead 	bl	8001a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003cbe:	b007      	add	sp, #28
 8003cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40003800 	.word	0x40003800
 8003cc8:	48001400 	.word	0x48001400
 8003ccc:	48000400 	.word	0x48000400

08003cd0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd0:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <HAL_MspInit+0x78>)
{
 8003cd2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	619a      	str	r2, [r3, #24]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ce4:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ce8:	f7fd fd8c 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003cec:	2200      	movs	r2, #0
 8003cee:	4611      	mov	r1, r2
 8003cf0:	f06f 000b 	mvn.w	r0, #11
 8003cf4:	f7fd fd98 	bl	8001828 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	f06f 000a 	mvn.w	r0, #10
 8003d00:	f7fd fd92 	bl	8001828 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003d04:	2200      	movs	r2, #0
 8003d06:	4611      	mov	r1, r2
 8003d08:	f06f 0009 	mvn.w	r0, #9
 8003d0c:	f7fd fd8c 	bl	8001828 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003d10:	2200      	movs	r2, #0
 8003d12:	4611      	mov	r1, r2
 8003d14:	f06f 0004 	mvn.w	r0, #4
 8003d18:	f7fd fd86 	bl	8001828 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	4611      	mov	r1, r2
 8003d20:	f06f 0003 	mvn.w	r0, #3
 8003d24:	f7fd fd80 	bl	8001828 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d28:	2200      	movs	r2, #0
 8003d2a:	210f      	movs	r1, #15
 8003d2c:	f06f 0001 	mvn.w	r0, #1
 8003d30:	f7fd fd7a 	bl	8001828 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003d34:	2200      	movs	r2, #0
 8003d36:	210f      	movs	r1, #15
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3c:	f7fd fd74 	bl	8001828 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d40:	b003      	add	sp, #12
 8003d42:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d46:	bf00      	nop
 8003d48:	40021000 	.word	0x40021000

08003d4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d4c:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003d4e:	4601      	mov	r1, r0
{
 8003d50:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003d52:	2200      	movs	r2, #0
 8003d54:	2036      	movs	r0, #54	; 0x36
 8003d56:	f7fd fd67 	bl	8001828 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003d5a:	2036      	movs	r0, #54	; 0x36
 8003d5c:	f7fd fd98 	bl	8001890 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d60:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003d62:	4c15      	ldr	r4, [pc, #84]	; (8003db8 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d64:	69da      	ldr	r2, [r3, #28]
 8003d66:	f042 0210 	orr.w	r2, r2, #16
 8003d6a:	61da      	str	r2, [r3, #28]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d74:	a901      	add	r1, sp, #4
 8003d76:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d78:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d7a:	f7fe fab1 	bl	80022e0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003d7e:	f7fe fa7f 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8003d82:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <HAL_InitTick+0x70>)
 8003d84:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003d86:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003d8a:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003d8c:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003d8e:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <HAL_InitTick+0x74>)
 8003d90:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d94:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8003d96:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8003d98:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003d9a:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8003d9c:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d9e:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003da0:	f7fe fd36 	bl	8002810 <HAL_TIM_Base_Init>
 8003da4:	b920      	cbnz	r0, 8003db0 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003da6:	4620      	mov	r0, r4
 8003da8:	f7fe fc14 	bl	80025d4 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8003dac:	b008      	add	sp, #32
 8003dae:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8003db0:	2001      	movs	r0, #1
 8003db2:	e7fb      	b.n	8003dac <HAL_InitTick+0x60>
 8003db4:	40021000 	.word	0x40021000
 8003db8:	20000f28 	.word	0x20000f28
 8003dbc:	40001000 	.word	0x40001000
 8003dc0:	000f4240 	.word	0x000f4240

08003dc4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8003dc4:	f7fe bf58 	b.w	8002c78 <osSystickHandler>

08003dc8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003dc8:	4801      	ldr	r0, [pc, #4]	; (8003dd0 <TIM6_DAC_IRQHandler+0x8>)
 8003dca:	f7fe bc12 	b.w	80025f2 <HAL_TIM_IRQHandler>
 8003dce:	bf00      	nop
 8003dd0:	20000f28 	.word	0x20000f28

08003dd4 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003dd4:	4801      	ldr	r0, [pc, #4]	; (8003ddc <DMA2_Channel5_IRQHandler+0x8>)
 8003dd6:	f7fd bdd6 	b.w	8001986 <HAL_DMA_IRQHandler>
 8003dda:	bf00      	nop
 8003ddc:	20000fd8 	.word	0x20000fd8

08003de0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003de0:	4915      	ldr	r1, [pc, #84]	; (8003e38 <SystemInit+0x58>)
 8003de2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003de6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003dee:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <SystemInit+0x5c>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003df8:	6858      	ldr	r0, [r3, #4]
 8003dfa:	4a11      	ldr	r2, [pc, #68]	; (8003e40 <SystemInit+0x60>)
 8003dfc:	4002      	ands	r2, r0
 8003dfe:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003e06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e12:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003e1a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1e:	f022 020f 	bic.w	r2, r2, #15
 8003e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003e24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e26:	4a07      	ldr	r2, [pc, #28]	; (8003e44 <SystemInit+0x64>)
 8003e28:	4002      	ands	r2, r0
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e34:	608b      	str	r3, [r1, #8]
 8003e36:	4770      	bx	lr
 8003e38:	e000ed00 	.word	0xe000ed00
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	f87fc00c 	.word	0xf87fc00c
 8003e44:	ff00fccc 	.word	0xff00fccc

08003e48 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003e48:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 8003e4a:	480d      	ldr	r0, [pc, #52]	; (8003e80 <MX_UART4_Init+0x38>)
  huart4.Init.BaudRate = 115200;
 8003e4c:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <MX_UART4_Init+0x3c>)
 8003e4e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003e52:	e880 4008 	stmia.w	r0, {r3, lr}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003e56:	220c      	movs	r2, #12
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003e5c:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003e5e:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003e60:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e62:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e64:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e66:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e68:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003e6a:	f7fe feae 	bl	8002bca <HAL_UART_Init>
 8003e6e:	b128      	cbz	r0, 8003e7c <MX_UART4_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003e70:	214f      	movs	r1, #79	; 0x4f
 8003e72:	4805      	ldr	r0, [pc, #20]	; (8003e88 <MX_UART4_Init+0x40>)
  }

}
 8003e74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003e78:	f7ff bd44 	b.w	8003904 <_Error_Handler>
 8003e7c:	bd08      	pop	{r3, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000f68 	.word	0x20000f68
 8003e84:	40004c00 	.word	0x40004c00
 8003e88:	08004123 	.word	0x08004123

08003e8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e8c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 8003e8e:	6802      	ldr	r2, [r0, #0]
 8003e90:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <HAL_UART_MspInit+0x74>)
 8003e92:	429a      	cmp	r2, r3
{
 8003e94:	b087      	sub	sp, #28
 8003e96:	4605      	mov	r5, r0
  if(uartHandle->Instance==UART4)
 8003e98:	d130      	bne.n	8003efc <HAL_UART_MspInit+0x70>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003e9a:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e9e:	4819      	ldr	r0, [pc, #100]	; (8003f04 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8003ea0:	69da      	ldr	r2, [r3, #28]

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel5;
 8003ea2:	4c19      	ldr	r4, [pc, #100]	; (8003f08 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8003ea4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003ea8:	61da      	str	r2, [r3, #28]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003eb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003eb8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ec6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003ec8:	2305      	movs	r3, #5
 8003eca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ecc:	f7fd fda4 	bl	8001a18 <HAL_GPIO_Init>
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ed0:	4a0e      	ldr	r2, [pc, #56]	; (8003f0c <HAL_UART_MspInit+0x80>)
 8003ed2:	2310      	movs	r3, #16
 8003ed4:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003ed8:	4620      	mov	r0, r4
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eda:	2300      	movs	r3, #0
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003edc:	2280      	movs	r2, #128	; 0x80
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ede:	60a3      	str	r3, [r4, #8]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ee0:	60e2      	str	r2, [r4, #12]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ee2:	6123      	str	r3, [r4, #16]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ee4:	6163      	str	r3, [r4, #20]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003ee6:	61a3      	str	r3, [r4, #24]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ee8:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003eea:	f7fd fd21 	bl	8001930 <HAL_DMA_Init>
 8003eee:	b118      	cbz	r0, 8003ef8 <HAL_UART_MspInit+0x6c>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003ef0:	2177      	movs	r1, #119	; 0x77
 8003ef2:	4807      	ldr	r0, [pc, #28]	; (8003f10 <HAL_UART_MspInit+0x84>)
 8003ef4:	f7ff fd06 	bl	8003904 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8003ef8:	662c      	str	r4, [r5, #96]	; 0x60
 8003efa:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8003efc:	b007      	add	sp, #28
 8003efe:	bd30      	pop	{r4, r5, pc}
 8003f00:	40004c00 	.word	0x40004c00
 8003f04:	48000800 	.word	0x48000800
 8003f08:	20000fd8 	.word	0x20000fd8
 8003f0c:	40020458 	.word	0x40020458
 8003f10:	08004123 	.word	0x08004123

08003f14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f4c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003f18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003f1a:	e003      	b.n	8003f24 <LoopCopyDataInit>

08003f1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003f1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003f20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003f22:	3104      	adds	r1, #4

08003f24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003f24:	480b      	ldr	r0, [pc, #44]	; (8003f54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003f26:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003f28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003f2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003f2c:	d3f6      	bcc.n	8003f1c <CopyDataInit>
	ldr	r2, =_sbss
 8003f2e:	4a0b      	ldr	r2, [pc, #44]	; (8003f5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003f30:	e002      	b.n	8003f38 <LoopFillZerobss>

08003f32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003f32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003f34:	f842 3b04 	str.w	r3, [r2], #4

08003f38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <LoopForever+0x16>)
	cmp	r2, r3
 8003f3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003f3c:	d3f9      	bcc.n	8003f32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f3e:	f7ff ff4f 	bl	8003de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f42:	f000 f811 	bl	8003f68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f46:	f7ff fdcd 	bl	8003ae4 <main>

08003f4a <LoopForever>:

LoopForever:
    b LoopForever
 8003f4a:	e7fe      	b.n	8003f4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f4c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8003f50:	08004244 	.word	0x08004244
	ldr	r0, =_sdata
 8003f54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003f58:	20000100 	.word	0x20000100
	ldr	r2, =_sbss
 8003f5c:	20000100 	.word	0x20000100
	ldr	r3, = _ebss
 8003f60:	20001020 	.word	0x20001020

08003f64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f64:	e7fe      	b.n	8003f64 <ADC1_2_IRQHandler>
	...

08003f68 <__libc_init_array>:
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	4e0d      	ldr	r6, [pc, #52]	; (8003fa0 <__libc_init_array+0x38>)
 8003f6c:	4c0d      	ldr	r4, [pc, #52]	; (8003fa4 <__libc_init_array+0x3c>)
 8003f6e:	1ba4      	subs	r4, r4, r6
 8003f70:	10a4      	asrs	r4, r4, #2
 8003f72:	2500      	movs	r5, #0
 8003f74:	42a5      	cmp	r5, r4
 8003f76:	d109      	bne.n	8003f8c <__libc_init_array+0x24>
 8003f78:	4e0b      	ldr	r6, [pc, #44]	; (8003fa8 <__libc_init_array+0x40>)
 8003f7a:	4c0c      	ldr	r4, [pc, #48]	; (8003fac <__libc_init_array+0x44>)
 8003f7c:	f000 f880 	bl	8004080 <_init>
 8003f80:	1ba4      	subs	r4, r4, r6
 8003f82:	10a4      	asrs	r4, r4, #2
 8003f84:	2500      	movs	r5, #0
 8003f86:	42a5      	cmp	r5, r4
 8003f88:	d105      	bne.n	8003f96 <__libc_init_array+0x2e>
 8003f8a:	bd70      	pop	{r4, r5, r6, pc}
 8003f8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f90:	4798      	blx	r3
 8003f92:	3501      	adds	r5, #1
 8003f94:	e7ee      	b.n	8003f74 <__libc_init_array+0xc>
 8003f96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f9a:	4798      	blx	r3
 8003f9c:	3501      	adds	r5, #1
 8003f9e:	e7f2      	b.n	8003f86 <__libc_init_array+0x1e>
 8003fa0:	0800423c 	.word	0x0800423c
 8003fa4:	0800423c 	.word	0x0800423c
 8003fa8:	0800423c 	.word	0x0800423c
 8003fac:	08004240 	.word	0x08004240

08003fb0 <memcpy>:
 8003fb0:	b510      	push	{r4, lr}
 8003fb2:	1e43      	subs	r3, r0, #1
 8003fb4:	440a      	add	r2, r1
 8003fb6:	4291      	cmp	r1, r2
 8003fb8:	d100      	bne.n	8003fbc <memcpy+0xc>
 8003fba:	bd10      	pop	{r4, pc}
 8003fbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fc4:	e7f7      	b.n	8003fb6 <memcpy+0x6>

08003fc6 <abort>:
 8003fc6:	b508      	push	{r3, lr}
 8003fc8:	2006      	movs	r0, #6
 8003fca:	f000 f82b 	bl	8004024 <raise>
 8003fce:	2001      	movs	r0, #1
 8003fd0:	f000 f854 	bl	800407c <_exit>

08003fd4 <_raise_r>:
 8003fd4:	291f      	cmp	r1, #31
 8003fd6:	b538      	push	{r3, r4, r5, lr}
 8003fd8:	4604      	mov	r4, r0
 8003fda:	460d      	mov	r5, r1
 8003fdc:	d904      	bls.n	8003fe8 <_raise_r+0x14>
 8003fde:	2316      	movs	r3, #22
 8003fe0:	6003      	str	r3, [r0, #0]
 8003fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}
 8003fe8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003fea:	b112      	cbz	r2, 8003ff2 <_raise_r+0x1e>
 8003fec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003ff0:	b94b      	cbnz	r3, 8004006 <_raise_r+0x32>
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f000 f830 	bl	8004058 <_getpid_r>
 8003ff8:	462a      	mov	r2, r5
 8003ffa:	4601      	mov	r1, r0
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004002:	f000 b817 	b.w	8004034 <_kill_r>
 8004006:	2b01      	cmp	r3, #1
 8004008:	d00a      	beq.n	8004020 <_raise_r+0x4c>
 800400a:	1c59      	adds	r1, r3, #1
 800400c:	d103      	bne.n	8004016 <_raise_r+0x42>
 800400e:	2316      	movs	r3, #22
 8004010:	6003      	str	r3, [r0, #0]
 8004012:	2001      	movs	r0, #1
 8004014:	bd38      	pop	{r3, r4, r5, pc}
 8004016:	2400      	movs	r4, #0
 8004018:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800401c:	4628      	mov	r0, r5
 800401e:	4798      	blx	r3
 8004020:	2000      	movs	r0, #0
 8004022:	bd38      	pop	{r3, r4, r5, pc}

08004024 <raise>:
 8004024:	4b02      	ldr	r3, [pc, #8]	; (8004030 <raise+0xc>)
 8004026:	4601      	mov	r1, r0
 8004028:	6818      	ldr	r0, [r3, #0]
 800402a:	f7ff bfd3 	b.w	8003fd4 <_raise_r>
 800402e:	bf00      	nop
 8004030:	2000000c 	.word	0x2000000c

08004034 <_kill_r>:
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	4c07      	ldr	r4, [pc, #28]	; (8004054 <_kill_r+0x20>)
 8004038:	2300      	movs	r3, #0
 800403a:	4605      	mov	r5, r0
 800403c:	4608      	mov	r0, r1
 800403e:	4611      	mov	r1, r2
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	f000 f813 	bl	800406c <_kill>
 8004046:	1c43      	adds	r3, r0, #1
 8004048:	d102      	bne.n	8004050 <_kill_r+0x1c>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	b103      	cbz	r3, 8004050 <_kill_r+0x1c>
 800404e:	602b      	str	r3, [r5, #0]
 8004050:	bd38      	pop	{r3, r4, r5, pc}
 8004052:	bf00      	nop
 8004054:	2000101c 	.word	0x2000101c

08004058 <_getpid_r>:
 8004058:	f000 b800 	b.w	800405c <_getpid>

0800405c <_getpid>:
 800405c:	4b02      	ldr	r3, [pc, #8]	; (8004068 <_getpid+0xc>)
 800405e:	2258      	movs	r2, #88	; 0x58
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	f04f 30ff 	mov.w	r0, #4294967295
 8004066:	4770      	bx	lr
 8004068:	2000101c 	.word	0x2000101c

0800406c <_kill>:
 800406c:	4b02      	ldr	r3, [pc, #8]	; (8004078 <_kill+0xc>)
 800406e:	2258      	movs	r2, #88	; 0x58
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	f04f 30ff 	mov.w	r0, #4294967295
 8004076:	4770      	bx	lr
 8004078:	2000101c 	.word	0x2000101c

0800407c <_exit>:
 800407c:	e7fe      	b.n	800407c <_exit>
	...

08004080 <_init>:
 8004080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004082:	bf00      	nop
 8004084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004086:	bc08      	pop	{r3}
 8004088:	469e      	mov	lr, r3
 800408a:	4770      	bx	lr

0800408c <_fini>:
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408e:	bf00      	nop
 8004090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004092:	bc08      	pop	{r3}
 8004094:	469e      	mov	lr, r3
 8004096:	4770      	bx	lr
